/**
 * Convert an ArrayBuffer to Base64 string
 * @param buffer - ArrayBuffer to convert
 * @category ArrayBuffer
 */
export declare function arrayBufferToBase64(buffer: ArrayBuffer): string;
/**
 * Convert a Base64 string to ArrayBuffer
 * @param base64 - Base64 string to convert
 * @category ArrayBuffer
 */
export declare function base64ToArrayBuffer(base64: string): ArrayBuffer | Uint8Array<ArrayBuffer>;
/**
 * Mapping of typed array constructors by name
 * @category ArrayBuffer
 */
export declare const TYPED_ARRAYS: {
    Int8Array: Int8ArrayConstructor;
    Uint8Array: Uint8ArrayConstructor;
    Uint8ClampedArray: Uint8ClampedArrayConstructor;
    Int16Array: Int16ArrayConstructor;
    Uint16Array: Uint16ArrayConstructor;
    Int32Array: Int32ArrayConstructor;
    Uint32Array: Uint32ArrayConstructor;
    Float32Array: Float32ArrayConstructor;
    Float64Array: Float64ArrayConstructor;
};
/**
 * Create a typed array from an ArrayBuffer by name
 * @param type - Name of the typed array constructor
 * @param buffer - ArrayBuffer to use
 * @category ArrayBuffer
 */
export declare function getTypedArray(type: keyof typeof TYPED_ARRAYS, buffer: ArrayBuffer): Uint8Array<ArrayBuffer> | Int8Array<ArrayBuffer> | Uint8ClampedArray<ArrayBuffer> | Int16Array<ArrayBuffer> | Uint16Array<ArrayBuffer> | Int32Array<ArrayBuffer> | Uint32Array<ArrayBuffer> | Float32Array<ArrayBuffer> | Float64Array<ArrayBuffer>;
//# sourceMappingURL=arrayBuffer.d.ts.map