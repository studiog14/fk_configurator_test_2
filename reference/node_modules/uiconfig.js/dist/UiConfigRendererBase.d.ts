import { JSUndoManager, SimpleEventDispatcher } from 'ts-browser-helpers';
import { TUiRefreshModes, UiObjectConfig } from './types';
import { UiConfigMethods } from './UiConfigMethods';
export declare abstract class UiConfigRendererBase extends SimpleEventDispatcher<'preFrame' | 'preRender' | 'postRender' | 'postFrame'> {
    readonly methods: UiConfigMethods;
    private _undoManager?;
    get undoManager(): JSUndoManager | undefined;
    set undoManager(value: JSUndoManager | undefined);
    protected _autoFrameEvents: boolean;
    protected constructor(autoFrameEvents?: boolean, methods?: UiConfigMethods, undoManager?: JSUndoManager | false);
    private _rafId;
    raf: () => void;
    start(): void;
    stop(): void;
    protected _refreshQueue: Record<TUiRefreshModes, [UiObjectConfig, number, string | undefined][]>;
    private _lastModeTime;
    refreshQueue(mode: TUiRefreshModes): void;
    private _addToRefreshQueue;
    /**
     * Disposes the UI associated with a config, doesn't makes change to the object or its parent.
     * @param config
     * @param performDispose
     */
    disposeUiConfig(config?: UiObjectConfig, performDispose?: boolean): void;
    addToRefreshQueue(mode: TUiRefreshModes | 'immediate', uiConfig: UiObjectConfig, deep: boolean, delay: number): void;
    protected abstract _refreshUiConfigObject(config: UiObjectConfig): void;
    private _flattenUiConfig;
}
//# sourceMappingURL=UiConfigRendererBase.d.ts.map