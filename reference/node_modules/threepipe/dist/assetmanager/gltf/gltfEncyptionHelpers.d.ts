import { GLTFExporter2Options } from '../export';
import { GLTFPreparser } from '../import';
/**
 * Sample encryption processor for {@link GLTFExporter2} that wraps the glb in a new glb with encrypted content and encryption metadata.
 * Uses AES-GCM ({@link aesGcmEncrypt}) for encryption since it is widely supported across browsers and js environments.
 * @param gltf
 * @param options
 */
export declare const glbEncryptionProcessor: (gltf: ArrayBuffer | any, options: GLTFExporter2Options) => Promise<any>;
export interface IGLBEncryptionPreparser extends GLTFPreparser {
    key: string | ((encryption: any, json: any, path: string) => string | Promise<string>);
}
/**
 * Sample encryption preparser for {@link GLTFLoader2} that unwraps the glb container and decrypts the content. The encryption key can be provided in the file or set in this const is prompted from the user.
 */
export declare const glbEncryptionPreparser: IGLBEncryptionPreparser;
//# sourceMappingURL=gltfEncyptionHelpers.d.ts.map