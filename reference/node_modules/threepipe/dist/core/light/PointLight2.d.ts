import { Color, ColorRepresentation, PointLight, PointLightShadow, Vector2, Vector3 } from 'three';
import { ILight } from './ILight';
import { IObject3D } from '../IObject';
import { UiObjectConfig } from 'uiconfig.js';
/**
 * Extension of three.js PointLight with additional properties for serialization and UI
 *
 * Note - gltf serialization is handled by {@link GLTFLightExtrasExtension}
 */
export declare class PointLight2 extends PointLight implements ILight<PointLightShadow> {
    assetType: "light";
    setDirty: (this: ILight, options?: import('../IObject').IObjectSetDirtyOptions, ...args: any[]) => void;
    refreshUi: (this: IObject3D) => void;
    uiConfig: UiObjectConfig;
    readonly isPointLight2 = true;
    visible: boolean;
    color: Color;
    intensity: number;
    distance: number;
    decay: number;
    power: number;
    readonly position: Vector3;
    castShadow: boolean;
    shadowMapSize: Vector2;
    protected _mapSizeChanged(): void;
    shadowBias: number;
    shadowRadius: number;
    shadowNear: number;
    shadowFar: number;
    shadowAspect: number;
    shadowFov: number;
    protected _shadowCamUpdate(change?: string): void;
    constructor(color?: ColorRepresentation, intensity?: number, distance?: number, decay?: number);
    autoScale(): this;
    autoCenter(): this;
    /**
     * @deprecated use `this` instead
     */
    get lightObject(): this;
    /**
     * @deprecated use `this` instead
     */
    get modelObject(): this;
    traverse: (callback: (object: IObject3D) => void) => void;
    traverseVisible: (callback: (object: IObject3D) => void) => void;
    traverseAncestors: (callback: (object: IObject3D) => void) => void;
    getObjectById: <T extends IObject3D = IObject3D>(id: number) => T | undefined;
    getObjectByName: <T extends IObject3D = IObject3D>(name: string) => T | undefined;
    getObjectByProperty: <T extends IObject3D = IObject3D>(name: string, value: string) => T | undefined;
    copy: (source: PointLight | IObject3D, recursive?: boolean, ...args: any[]) => this;
    clone: (recursive?: boolean) => this;
    remove: (...object: IObject3D[]) => this;
    parent: IObject3D | null;
    children: IObject3D[];
}
//# sourceMappingURL=PointLight2.d.ts.map