import type { GLTFLoaderPlugin, GLTFParser } from 'three/examples/jsm/loaders/GLTFLoader';
import type { MeshStandardMaterial } from 'three';
import type { GLTFExporterPlugin, GLTFWriter } from 'three/examples/jsm/exporters/GLTFExporter';
/**
 * Light Map Extension
 *
 * lightMapTexture and lightMapIntensity are added to the material
 *
 * Specification: https://webgi.xyz/docs/gltf-extensions/WEBGI_materials_lightmap.html
 */
export declare class GLTFMaterialsLightMapExtension {
    static readonly WebGiMaterialsLightMapExtension = "WEBGI_materials_lightmap";
    static Import: (parser: GLTFParser) => GLTFLoaderPlugin;
    static Export: (writer: GLTFWriter) => GLTFExporterPlugin;
    static Textures: Record<string, string | number>;
}
declare class GLTFMaterialsLightMapExtensionImport {
    parser: GLTFParser;
    name: string;
    constructor(parser: GLTFParser);
    extendMaterialParams(materialIndex: number, materialParams: any): Promise<void | import("three").Texture<import("three").TextureEventMap>[]>;
}
export type { GLTFMaterialsLightMapExtensionImport };
declare class GLTFMaterialsLightMapExtensionExport {
    writer: GLTFWriter;
    name: string;
    constructor(writer: GLTFWriter);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsLightMapExtensionExport };
//# sourceMappingURL=GLTFMaterialsLightMapExtension.d.ts.map