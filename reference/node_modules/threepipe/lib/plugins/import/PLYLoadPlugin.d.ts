import { Importer } from '../../assetmanager';
import { AnyOptions } from 'ts-browser-helpers';
import { BufferGeometry, Mesh } from 'three';
import { BaseImporterPlugin } from '../base/BaseImporterPlugin';
/**
 * Adds support for loading `.ply`, `text/plain+ply` files and data uris
 * @category Plugins
 */
export declare class PLYLoadPlugin extends BaseImporterPlugin {
    static readonly PluginType = "PLYLoadPlugin";
    protected _importer: Importer<{
        transform(res: BufferGeometry, _: AnyOptions): Mesh | undefined;
        propertyNameMapping: object;
        customPropertyMapping: Record<string, any>;
        setPropertyNameMapping(mapping: object): void;
        setCustomPropertyNameMapping(mapping: Record<string, any>): void;
        parse(data: ArrayBuffer | string): BufferGeometry;
        crossOrigin: string;
        withCredentials: boolean;
        path: string;
        resourcePath: string;
        manager: import("three").LoadingManager;
        requestHeader: {
            [header: string]: string;
        };
        load(url: string, onLoad: (data: BufferGeometry<import("three").NormalBufferAttributes, import("three").BufferGeometryEventMap>) => void, onProgress?: (event: ProgressEvent) => void, onError?: (err: unknown) => void): void;
        loadAsync(url: string, onProgress?: (event: ProgressEvent) => void): Promise<BufferGeometry<import("three").NormalBufferAttributes, import("three").BufferGeometryEventMap>>;
        setCrossOrigin(crossOrigin: string): /*elided*/ any;
        setWithCredentials(value: boolean): /*elided*/ any;
        setPath(path: string): /*elided*/ any;
        setResourcePath(resourcePath: string): /*elided*/ any;
        setRequestHeader(requestHeader: {
            [header: string]: string;
        }): /*elided*/ any;
    }>;
}
//# sourceMappingURL=PLYLoadPlugin.d.ts.map