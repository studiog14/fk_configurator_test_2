import { Importer } from '../../assetmanager';
import { Group, Mesh } from 'three';
import { BaseImporterPlugin } from '../base/BaseImporterPlugin';
/**
 * Adds support for loading `.usdz`, `model/vnd.usd+zip` and `.usda`, `model/vnd.usda` files and data uris
 * @category Plugins
 */
export declare class USDZLoadPlugin extends BaseImporterPlugin {
    static readonly PluginType = "USDZLoadPlugin";
    protected _importer: Importer<{
        currentUrl: string;
        loadAsync(url: string, onProgress?: (event: ProgressEvent) => void): Promise<Mesh>;
        parse(buffer: ArrayBuffer | string): Group;
        crossOrigin: string;
        withCredentials: boolean;
        path: string;
        resourcePath: string;
        manager: import("three").LoadingManager;
        requestHeader: {
            [header: string]: string;
        };
        load(url: string, onLoad: (data: Mesh<import("three").BufferGeometry<import("three").NormalBufferAttributes, import("three").BufferGeometryEventMap>, import("three").Material<import("three").MaterialEventMap> | import("three").Material<import("three").MaterialEventMap>[], import("three").Object3DEventMap>) => void, onProgress?: (event: ProgressEvent) => void, onError?: (err: unknown) => void): void;
        setCrossOrigin(crossOrigin: string): /*elided*/ any;
        setWithCredentials(value: boolean): /*elided*/ any;
        setPath(path: string): /*elided*/ any;
        setResourcePath(resourcePath: string): /*elided*/ any;
        setRequestHeader(requestHeader: {
            [header: string]: string;
        }): /*elided*/ any;
    }>;
}
//# sourceMappingURL=USDZLoadPlugin.d.ts.map