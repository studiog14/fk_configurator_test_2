import { IPipelinePass } from './Pass';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import { Color, Material, Texture, WebGLRenderTarget } from 'three';
import { UiObjectConfig } from 'uiconfig.js';
import { IRenderTarget } from '../rendering';
import { ICamera, IRenderManager, IScene, IWebGLRenderer } from '../core';
import { ViewerRenderManager } from '../viewer';
export declare class ExtendedRenderPass extends RenderPass implements IPipelinePass<'render'> {
    readonly isExtendedRenderPass = true;
    enabled: boolean;
    readonly passId = "render";
    private _blendPass;
    readonly renderManager: ViewerRenderManager;
    private _doTransmissionFix;
    blurTransmissionTarget: boolean;
    preserveTransparentTarget: boolean;
    private _transparentTarget?;
    get transparentTarget(): IRenderTarget;
    private _releaseTransparentTarget;
    readonly preserveOpaqueTarget = false;
    private _opaqueTarget?;
    get opaqueTarget(): WebGLRenderTarget;
    private _releaseOpaqueTarget;
    constructor(renderManager: ViewerRenderManager, overrideMaterial?: Material, clearColor?: Color, clearAlpha?: number);
    render(renderer: IWebGLRenderer, writeBuffer?: WebGLRenderTarget<Texture | Texture[]> | null, readBuffer?: WebGLRenderTarget<Texture | Texture[]>, deltaTime?: number, maskActive?: boolean): void;
    onDirty: (() => void)[];
    dispose(): void;
    setDirty(): void;
    beforeRender(scene: IScene, camera: ICamera, _: IRenderManager): void;
    uiConfig: UiObjectConfig;
    /**
     * @deprecated renamed to {@link isExtendedRenderPass}
     */
    get isRenderPass2(): boolean;
}
/**
 * @deprecated renamed to {@link ExtendedRenderPass}
 */
export declare class RenderPass2 extends ExtendedRenderPass {
    constructor(...args: ConstructorParameters<typeof ExtendedRenderPass>);
}
//# sourceMappingURL=ExtendedRenderPass.d.ts.map