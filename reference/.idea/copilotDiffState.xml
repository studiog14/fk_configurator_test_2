<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pl&quot;&gt;&#10;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no&quot; /&gt;&#10;  &lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;&#10;  &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;&#10;  &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;&#10;  &lt;title&gt;Konfigurator krzeseł - Fajne Krzesła&lt;/title&gt;&#10;  &lt;link rel=&quot;icon&quot; href=&quot;icons/favicon.png&quot; type=&quot;image/jpeg&quot; /&gt;&#10;  &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache, no-store, must-revalidate&quot; /&gt;&#10;  &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot; /&gt;&#10;  &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot; /&gt;&#10;&#10;  &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&amp;display=swap&quot; rel=&quot;stylesheet&quot; /&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;threepipe&quot;: &quot;https://unpkg.com/threepipe@latest/dist/index.mjs&quot;,&#10;    &quot;@threepipe/webgi-plugins&quot;: &quot;https://unpkg.com/@threepipe/webgi-plugins@latest/dist/index.mjs&quot;,&#10;    &quot;three&quot;: &quot;https://unpkg.com/three@0.157.0/build/three.module.js&quot;&#10;    &#10;&#10;    &#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;  &lt;style&gt;&#10;    html,&#10;    body {&#10;      margin: 0;&#10;      padding: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      overflow: hidden;&#10;      font-family: 'Poppins', sans-serif;&#10;    }&#10;&#10;    #app {&#10;      display: flex;&#10;      height: 100vh;&#10;      width: 100vw;&#10;      position: relative;&#10;      visibility: hidden;&#10;    }&#10;&#10;    #app.visible {&#10;  visibility: visible;&#10;  opacity: 1;&#10;}&#10;&#10;    #canvas {&#10;      width: 100%;&#10;      height: 100%;&#10;      display: block;&#10;    }&#10;&#10;    body {&#10;      background: #ededed80;&#10;      /* przezroczyste tło, lepszy blur */&#10;    }&#10;&#10;    /* Panele UI: identyczna przezroczystość i blur obu paneli */&#10;    #sidebar,&#10;    #config-overview {&#10;      background: #fff;&#10;      border-radius: 16px;&#10;      box-shadow: 0 4px 32px rgba(0, 0, 0, 0.10);&#10;      border: 1px solid rgba(0, 0, 0, 0.08);&#10;    }&#10;&#10;    #sidebar {&#10;      flex: 0 0 460px;&#10;      min-width: 460px;&#10;      max-width: 540px;&#10;      padding: 32px 24px 24px 24px;&#10;      z-index: 1200;&#10;      display: flex;&#10;      flex-direction: column;&#10;      height: 100vh;&#10;      box-sizing: border-box;&#10;      overflow-y: auto;&#10;      overflow-x: visible;&#10;      position: relative;&#10;      /* NIE dodawaj background! */&#10;    }&#10;&#10;    #sidebar-content {&#10;      flex-grow: 1;&#10;      overflow-y: auto;&#10;    }&#10;&#10;    /* Pole wyszukiwania w lewym sidebar'ze po prawej stronie */&#10;    #search-container {&#10;      position: absolute;&#10;      top: 20px;&#10;      right: 20px;&#10;      z-index: 1300;&#10;    }&#10;&#10;    #search-toggle {&#10;      background: #F5C842;&#10;      border: none;&#10;      border-radius: 50%;&#10;      width: 44px;&#10;      height: 44px;&#10;      cursor: pointer;&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);&#10;      transition: all 0.3s ease;&#10;    }&#10;&#10;    #search-toggle:hover {&#10;      background: #E5B432;&#10;      transform: scale(1.05);&#10;    }&#10;&#10;    #search-toggle svg {&#10;      width: 20px;&#10;      height: 20px;&#10;      fill: #333;&#10;    }&#10;&#10;    #search-panel {&#10;      position: fixed !important;&#10;      top: 70px !important;&#10;      right: -320px !important;&#10;      width: 320px !important;&#10;      max-width: calc(100vw - 40px) !important;&#10;      background: rgba(255, 255, 255, 0.98) !important;&#10;      backdrop-filter: blur(15px) !important;&#10;      border-radius: 12px !important;&#10;      padding: 16px !important;&#10;      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2) !important;&#10;      opacity: 0 !important;&#10;      visibility: hidden !important;&#10;      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;&#10;      z-index: 1400 !important;&#10;      transform: translateX(0) !important;&#10;    }&#10;&#10;    #search-panel.active {&#10;      right: 20px !important;&#10;      opacity: 1 !important;&#10;      visibility: visible !important;&#10;      transform: translateX(0) !important;&#10;    }&#10;&#10;    #search-input {&#10;      width: 100%;&#10;      border: 2px solid #F5C842;&#10;      border-radius: 8px;&#10;      padding: 12px 16px;&#10;      font-size: 16px;&#10;      outline: none;&#10;      background: white;&#10;      box-sizing: border-box;&#10;    }&#10;&#10;    #search-input::placeholder {&#10;      color: #888;&#10;    }&#10;&#10;    #search-input:focus {&#10;      border-color: #E5B432;&#10;      box-shadow: 0 0 0 3px rgba(245, 200, 66, 0.2);&#10;    }&#10;&#10;    #search-results {&#10;      margin-top: 8px;&#10;      max-height: 300px;&#10;      overflow-y: auto;&#10;      display: grid;&#10;      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));&#10;      gap: 8px;&#10;    }&#10;&#10;    .search-result-item {&#10;      display: flex;&#10;      flex-direction: column;&#10;      align-items: center;&#10;      padding: 8px;&#10;      border-radius: 8px;&#10;      cursor: pointer;&#10;      transition: all 0.2s ease;&#10;      border: 2px solid transparent;&#10;      background: rgba(255, 255, 255, 0.9);&#10;      text-align: center;&#10;    }&#10;&#10;    .search-result-item:hover {&#10;      background: rgba(245, 200, 66, 0.15);&#10;      border-color: #F5C842;&#10;      transform: translateY(-2px);&#10;    }&#10;&#10;    .search-result-item img {&#10;      width: 50px;&#10;      height: 50px;&#10;      object-fit: cover;&#10;      border-radius: 6px;&#10;      margin-bottom: 4px;&#10;    }&#10;&#10;    .search-result-item .result-name {&#10;      font-size: 11px;&#10;      font-weight: 600;&#10;      color: #333;&#10;      margin-bottom: 2px;&#10;      line-height: 1.2;&#10;    }&#10;&#10;    .search-result-item .result-category {&#10;      font-size: 10px;&#10;      color: #666;&#10;      line-height: 1.1;&#10;    }&#10;&#10;    /* Fallback dla wyników bez obrazków */&#10;    .search-result-item.text-only {&#10;      grid-column: 1 / -1;&#10;      flex-direction: row;&#10;      justify-content: flex-start;&#10;      text-align: left;&#10;      padding: 8px 12px;&#10;    }&#10;&#10;    .search-result-item.text-only .result-name {&#10;      font-size: 14px;&#10;      margin-bottom: 0;&#10;      margin-right: 8px;&#10;    }&#10;&#10;    .search-result-item.text-only .result-category {&#10;      font-size: 12px;&#10;    }&#10;&#10;    .search-result-item .result-type {&#10;      font-size: 10px;&#10;      color: #F5C842;&#10;      font-weight: 600;&#10;      margin-top: 2px;&#10;      text-transform: uppercase;&#10;      letter-spacing: 0.5px;&#10;    }&#10;&#10;    /* Przyciski kategorii */&#10;    .category-button {&#10;      padding: 8px 16px;&#10;      border: 2px solid #F5C842;&#10;      background: white;&#10;      color: #333;&#10;      border-radius: 20px;&#10;      font-size: 14px;&#10;      font-weight: 600;&#10;      cursor: pointer;&#10;      transition: all 0.2s ease;&#10;      text-transform: capitalize;&#10;    }&#10;&#10;    .category-button:hover {&#10;      background: #F5C842;&#10;      color: white;&#10;      transform: translateY(-1px);&#10;    }&#10;&#10;    .category-button.active {&#10;      background: #F5C842;&#10;      color: white;&#10;    }&#10;&#10;    .category-button.promotion {&#10;      border-color: #FF6B6B;&#10;      color: #FF6B6B;&#10;    }&#10;&#10;    .category-button.promotion:hover,&#10;    .category-button.promotion.active {&#10;      background: #FF6B6B;&#10;      color: white;&#10;    }&#10;&#10;    /* Modal wyboru akcji po wyszukiwaniu */&#10;    #search-choice-modal {&#10;      position: fixed;&#10;      top: 0;&#10;      left: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      background: rgba(0, 0, 0, 0.5);&#10;      display: none;&#10;      justify-content: center;&#10;      align-items: center;&#10;      z-index: 2000;&#10;      backdrop-filter: blur(5px);&#10;    }&#10;&#10;    #search-choice-modal.active {&#10;      display: flex;&#10;    }&#10;&#10;    .search-choice-content {&#10;      background: white;&#10;      border-radius: 16px;&#10;      padding: 24px;&#10;      max-width: 400px;&#10;      width: 90%;&#10;      text-align: center;&#10;      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);&#10;      animation: modalSlideIn 0.3s ease;&#10;    }&#10;&#10;    @keyframes modalSlideIn {&#10;      from {&#10;        opacity: 0;&#10;        transform: translateY(-20px) scale(0.95);&#10;      }&#10;      to {&#10;        opacity: 1;&#10;        transform: translateY(0) scale(1);&#10;      }&#10;    }&#10;&#10;    .search-choice-title {&#10;      font-size: 18px;&#10;      font-weight: 600;&#10;      margin-bottom: 16px;&#10;      color: #333;&#10;    }&#10;&#10;    .search-choice-item {&#10;      display: flex;&#10;      align-items: center;&#10;      margin-bottom: 16px;&#10;      padding: 12px;&#10;      border-radius: 8px;&#10;      background: #f8f9fa;&#10;      border: 2px solid transparent;&#10;    }&#10;&#10;    .search-choice-item img {&#10;      width: 40px;&#10;      height: 40px;&#10;      object-fit: contain;&#10;      margin-right: 12px;&#10;      border-radius: 4px;&#10;    }&#10;&#10;    .search-choice-item-info {&#10;      flex: 1;&#10;      text-align: left;&#10;    }&#10;&#10;    .search-choice-item-name {&#10;      font-weight: 600;&#10;      font-size: 14px;&#10;      color: #333;&#10;      margin-bottom: 2px;&#10;    }&#10;&#10;    .search-choice-item-category {&#10;      font-size: 12px;&#10;      color: #666;&#10;    }&#10;&#10;    .search-choice-buttons {&#10;      display: flex;&#10;      gap: 12px;&#10;      margin-top: 20px;&#10;    }&#10;&#10;    .search-choice-btn {&#10;      flex: 1;&#10;      padding: 12px 16px;&#10;      border: none;&#10;      border-radius: 8px;&#10;      font-size: 14px;&#10;      font-weight: 600;&#10;      cursor: pointer;&#10;      transition: all 0.2s ease;&#10;    }&#10;&#10;    .search-choice-btn.primary {&#10;      background: #F5C842;&#10;      color: #333;&#10;    }&#10;&#10;    .search-choice-btn.primary:hover {&#10;      background: #E5B432;&#10;      transform: translateY(-1px);&#10;    }&#10;&#10;    .search-choice-btn.secondary {&#10;      background: #f8f9fa;&#10;      color: #666;&#10;      border: 2px solid #e9ecef;&#10;    }&#10;&#10;    .search-choice-btn.secondary:hover {&#10;      background: #e9ecef;&#10;      color: #333;&#10;    }&#10;&#10;&#10;&#10;    #config-overview {&#10;      position: absolute;&#10;      top: 20px;&#10;      left: 20px;&#10;      width: 300px;&#10;      padding: 12px 16px;&#10;      /* Zmniejszone padding */&#10;      z-index: 1300;&#10;      font-size: 15px;&#10;      max-height: 1000px;&#10;      opacity: 1;&#10;      transition: max-height 0.3s ease, opacity 0.3s ease, padding 0.3s ease;&#10;      overflow: hidden;&#10;      box-shadow: 0 4px 32px rgba(0, 0, 0, 0.10);&#10;      border-radius: 16px;&#10;      border: 1px solid rgba(0, 0, 0, 0.08);&#10;      background: #fff;&#10;      box-sizing: border-box;&#10;    }&#10;&#10;    #config-overview.collapsed {&#10;      max-height: 40px;&#10;      /* Zmniejszone z 60px */&#10;      opacity: 0.8;&#10;      padding: 8px 16px;&#10;      /* Zmniejszone padding w stanie zwiniętym */&#10;    }&#10;&#10;&#10;&#10;    #config-overview:hover {&#10;      opacity: 1;&#10;    }&#10;&#10;    .overview-content {&#10;      max-height: 1000px;&#10;      opacity: 1;&#10;      transition: max-height 0.3s ease, opacity 0.3s ease;&#10;      overflow: hidden;&#10;    }&#10;&#10;    #config-overview.collapsed .overview-content {&#10;      max-height: 0;&#10;      opacity: 0;&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    hr {&#10;      border: none;&#10;      border-top: 1px solid #eee;&#10;      margin: 16px 0 12px;&#10;    }&#10;&#10;    .selection-section h3 {&#10;      font-size: 16px;&#10;      margin-bottom: 10px;&#10;      color: #555;&#10;    }&#10;&#10;    .options-grid {&#10;      display: flex;&#10;      flex-wrap: wrap;&#10;      gap: 10px;&#10;    }&#10;&#10;    .thumbnail-wrapper {&#10;      text-align: center;&#10;      display: flex;&#10;      flex-direction: column;&#10;      align-items: center;&#10;    }&#10;&#10;    .thumbnail {&#10;      width: 80px;&#10;      height: 80px;&#10;      object-fit: contain;&#10;      cursor: pointer;&#10;      border: 1px solid #ccc;&#10;      border-radius: 8px;&#10;      transition: all 0.2s;&#10;      background-color: transparent;&#10;      display: flex;&#10;      flex-direction: column;&#10;      align-items: center;&#10;      justify-content: center;&#10;      padding: 4px;&#10;      box-sizing: border-box;&#10;      opacity: 1;&#10;      /* Ikonki w pełni widoczne */&#10;    }&#10;&#10;    .thumbnail:hover {&#10;      transform: scale(1.05);&#10;      border-color: #444;&#10;    }&#10;&#10;    .thumbnail.selected {&#10;      outline: 2px solid #050505;&#10;      border: 2px solid transparent;&#10;      outline-offset: -2px;&#10;      box-shadow: 0 0 8px rgba(49, 49, 49, 0.5);&#10;    }&#10;&#10;    .thumbnail img {&#10;      max-width: 90%;&#10;      max-height: 90%;&#10;      opacity: 1;&#10;    }&#10;&#10;    .thumbnail-caption {&#10;      font-size: 15px;&#10;      color: #555;&#10;      margin-top: 6px;&#10;      font-weight: 500;&#10;      opacity: 1;&#10;    }&#10;&#10;    #overview-icons img {&#10;      width: 80px;&#10;      height: 80px;&#10;      border-radius: 8px;&#10;      border: 1px solid #ddd;&#10;      object-fit: contain;&#10;      opacity: 1;&#10;    }&#10;&#10;    #config-overview h4 {&#10;      font-size: 20px;&#10;      font-weight: 600;&#10;      margin-bottom: 18px;&#10;    }&#10;&#10;    #overview-details .detail-item {&#10;      font-size: 16px;&#10;      margin: 8px 0;&#10;    }&#10;&#10;    #overview-total-price {&#10;      font-size: 22px;&#10;    }&#10;&#10;    #overview-icons {&#10;      gap: 16px;&#10;      margin-bottom: 20px;&#10;      padding-bottom: 20px;&#10;    }&#10;&#10;    #summary {&#10;      margin-top: auto;&#10;      padding-top: 15px;&#10;      border-top: 1px solid #ffffff;&#10;    }&#10;&#10;    #back-to-models-container {&#10;      display: flex;&#10;      align-items: center;&#10;      margin-bottom: 18px;&#10;      justify-content: flex-start;&#10;    }&#10;&#10;    .back-to-model-btn {&#10;      position: relative;&#10;      width: 80px;&#10;      height: 80px;&#10;      border: 1.5px solid #bbb;&#10;      border-radius: 12px;&#10;      background: #fff;&#10;      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      cursor: pointer;&#10;      margin-right: 10px;&#10;      transition: box-shadow 0.2s;&#10;    }&#10;&#10;    .back-to-model-btn:hover {&#10;      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);&#10;    }&#10;&#10;    .back-to-model-btn img {&#10;      width: 60px;&#10;      height: 60px;&#10;      object-fit: contain;&#10;      display: block;&#10;    }&#10;&#10;    .back-to-model-btn .close-x {&#10;      position: absolute;&#10;      top: 4px;&#10;      right: 6px;&#10;      background: #fff;&#10;      border: none;&#10;      font-size: 20px;&#10;      color: #333;&#10;      cursor: pointer;&#10;      border-radius: 50%;&#10;      width: 24px;&#10;      height: 24px;&#10;      line-height: 20px;&#10;      padding: 0;&#10;      box-shadow: 0 1px 4px #0001;&#10;      transition: background 0.2s;&#10;    }&#10;&#10;    .back-to-model-btn .close-x:hover {&#10;      background: #eee;&#10;    }&#10;&#10;    #camera-debug-panel {&#10;      position: fixed;&#10;      top: 20px;&#10;      right: 20px;&#10;      z-index: 1000;&#10;      background: #fff;&#10;      border: 1px solid #ccc;&#10;      padding: 16px;&#10;      border-radius: 8px;&#10;      box-shadow: 0 2px 8px #0002;&#10;    }&#10;&#10;    #camera-debug-panel label {&#10;      display: block;&#10;      margin: 8px 0 4px;&#10;      font-size: 14px;&#10;    }&#10;&#10;    #camera-debug-panel input {&#10;      width: 100%;&#10;      margin-bottom: 8px;&#10;    }&#10;&#10;    #camera-debug-panel button {&#10;      width: 100%;&#10;      padding: 8px;&#10;      background: #007bff;&#10;      color: #fff;&#10;      border: none;&#10;      border-radius: 4px;&#10;      cursor: pointer;&#10;      transition: background 0.2s;&#10;    }&#10;&#10;    #camera-debug-panel button:hover {&#10;      background: #0056b3;&#10;    }&#10;&#10;    body {&#10;      background: #ededed;&#10;      /* lub Twój kolor tła */&#10;    }&#10;&#10;    #buy-button {&#10;      width: 100%;&#10;      padding: 14px 0;&#10;      background: #111;&#10;      color: #fff;&#10;      border: none;&#10;      border-radius: 8px;&#10;      font-size: 18px;&#10;      font-weight: 600;&#10;      margin-top: 18px;&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      gap: 10px;&#10;      cursor: pointer;&#10;      transition: background 0.2s;&#10;    }&#10;&#10;    #buy-button:hover {&#10;      background: #333;&#10;    }&#10;&#10;    #buy-button .cart-icon {&#10;      width: 22px;&#10;      height: 22px;&#10;      display: inline-block;&#10;    }&#10;&#10;    #sidebar .model-image {&#10;      width: 100%;&#10;      max-width: 100%;&#10;      height: 110px;&#10;      object-fit: contain;&#10;      display: block;&#10;      margin: 0 auto 10px auto;&#10;      background: #fff;&#10;      border-radius: 10px;&#10;      border: 1px solid #eee;&#10;    }&#10;&#10;&#10;&#10;    .modal {&#10;      position: fixed;&#10;      top: 0;&#10;      left: 0;&#10;      right: 0;&#10;      bottom: 0;&#10;      background: rgba(0, 0, 0, 0.5);&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      z-index: 1000;&#10;    }&#10;&#10;    .modal.hidden {&#10;      display: none;&#10;    }&#10;&#10;    .modal-content {&#10;      position: fixed;&#10;      top: 50%;&#10;      left: 50%;&#10;      transform: translate(-50%, -50%);&#10;      width: 320px;&#10;      background: #fff;&#10;      padding: 24px 28px;&#10;      border-radius: 16px;&#10;      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);&#10;      font-family: &quot;Poppins&quot;, &quot;Segoe UI&quot;, Tahoma, Geneva, Verdana, sans-serif;&#10;      color: #222;&#10;    }&#10;&#10;&#10;    .close-button {&#10;      position: absolute;&#10;      top: 12px;&#10;      right: 16px;&#10;      cursor: pointer;&#10;      font-size: 26px;&#10;      font-weight: 700;&#10;      color: #888;&#10;      transition: color 0.2s ease;&#10;    }&#10;&#10;    .close-button:hover {&#10;      color: #444;&#10;    }&#10;&#10;    .modal-content h2 {&#10;      margin-top: 0;&#10;      margin-bottom: 16px;&#10;      font-weight: 700;&#10;      font-size: 20px;&#10;      text-align: center;&#10;    }&#10;&#10;    .modal-content label {&#10;      display: block;&#10;      margin-bottom: 6px;&#10;      font-weight: 600;&#10;      font-size: 14px;&#10;    }&#10;&#10;    .modal-content input {&#10;      width: 100%;&#10;      padding: 10px 12px;&#10;      margin-bottom: 18px;&#10;      border: 1.5px solid #ddd;&#10;      border-radius: 12px;&#10;      font-size: 15px;&#10;      box-sizing: border-box;&#10;      transition: border-color 0.2s ease;&#10;    }&#10;&#10;    .modal-content input:focus {&#10;      border-color: #888;&#10;      outline: none;&#10;    }&#10;&#10;    .modal-content button[type=&quot;submit&quot;] {&#10;      width: 100%;&#10;      background: #000;&#10;      color: #fff;&#10;      font-weight: 700;&#10;      font-size: 16px;&#10;      padding: 12px 0;&#10;      border: none;&#10;      border-radius: 16px;&#10;      cursor: pointer;&#10;      transition: background-color 0.3s ease;&#10;    }&#10;&#10;    .modal-content button[type=&quot;submit&quot;]:hover {&#10;      background: #333;&#10;    }&#10;&#10;    /* Komunikat sukcesu */&#10;    #success-message {&#10;      position: fixed;&#10;      top: 50%;&#10;      left: 50%;&#10;      transform: translate(-100%, -50%);&#10;&#10;      background: #ffffff;&#10;      /* jasne zielone tło */&#10;      border: 1.5px solid #1f1f1f;&#10;      /* zielona ramka, spójna z tłem */&#10;      color: #000000;&#10;      /* ciemnozielony tekst */&#10;&#10;      font-weight: 700;&#10;      font-family: &quot;Poppins&quot;, &quot;Segoe UI&quot;, Tahoma, Geneva, Verdana, sans-serif;&#10;&#10;      padding: 20px 28px;&#10;      border-radius: 16px;&#10;      box-shadow: 0 8px 32px rgba(3, 3, 3, 0.15);&#10;&#10;      max-width: 320px;&#10;      width: 90%;&#10;      text-align: center;&#10;      z-index: 9999;&#10;    }&#10;&#10;&#10;    /* Ukrywanie i pokazywanie */&#10;    .hidden {&#10;      display: none;&#10;    }&#10;&#10;    .visible {&#10;      display: block;&#10;    }&#10;&#10;&#10;    #bottom-toolbar {&#10;      position: fixed;&#10;      /* &lt;- zmień z absolute */&#10;      bottom: 14px;&#10;      left: 50%;&#10;      transform: translateX(-100%);&#10;      background: #fff;&#10;      border: 1.5px solid #ccc;&#10;      border-radius: 12px;&#10;      padding: 8px 14px;&#10;      display: flex;&#10;      gap: 16px;&#10;      z-index: 2000;&#10;      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);&#10;      opacity: 0;&#10;      transition: opacity 0.4s ease;&#10;      justify-content: center;&#10;    }&#10;&#10;&#10;    #bottom-toolbar button {&#10;      background: #f0f0f0;&#10;      border: none;&#10;      border-radius: 8px;&#10;      padding: 8px 12px;&#10;      font-size: 14px;&#10;      cursor: pointer;&#10;      transition: background 0.2s ease;&#10;    }&#10;&#10;    #bottom-toolbar.visible {&#10;      opacity: 1;&#10;    }&#10;&#10;    #bottom-toolbar button:hover {&#10;      background: #e0e0e0;&#10;    }&#10;&#10;    #dimension-overlay {&#10;      position: absolute;&#10;      top: 0;&#10;      left: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      pointer-events: none;&#10;      z-index: 1000;&#10;    }&#10;&#10;    .dimension-line {&#10;      position: absolute;&#10;      background-color: #000;&#10;      height: 2px;&#10;    }&#10;&#10;    .axis-line {&#10;      position: absolute;&#10;      height: 2px;&#10;      background-color: #222;&#10;      opacity: 0.6;&#10;    }&#10;&#10;    .axis-line.x {&#10;      top: 50%;&#10;      left: 0;&#10;      width: 100%;&#10;      transform: translateY(-50%);&#10;    }&#10;&#10;    .axis-line.y {&#10;      left: 50%;&#10;      top: 0;&#10;      width: 2px;&#10;      height: 100%;&#10;      transform: translateX(-50%);&#10;    }&#10;&#10;    .axis-line.z {&#10;      top: 0;&#10;      left: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      border: 2px dashed #888;&#10;      box-sizing: border-box;&#10;      border-radius: 10px;&#10;    }&#10;&#10;    .dimension-label {&#10;      position: absolute;&#10;      background-color: rgba(255, 255, 255, 0.7);&#10;      padding: 5px;&#10;      border-radius: 3px;&#10;      font-size: 14px;&#10;      font-weight: bold;&#10;    }&#10;&#10;    .dimension-label:nth-child(4) {&#10;      top: 20px;&#10;    }&#10;&#10;    .dimension-label:nth-child(5) {&#10;      top: 50%;&#10;      transform: translate(-50%, -50%);&#10;    }&#10;&#10;    .dimension-label:nth-child(6) {&#10;      bottom: 20px;&#10;    }&#10;&#10;&#10;    #qr-close-btn {&#10;      background-color: #000;&#10;      color: #fff;&#10;      padding: 10px 16px;&#10;      border: none;&#10;      border-radius: 8px;&#10;      cursor: pointer;&#10;      font-size: 14px;&#10;      transition: background 0.2s ease;&#10;    }&#10;&#10;    #qr-close-btn:hover {&#10;      background-color: #333;&#10;    }&#10;&#10;    #qr-popup {&#10;      right: auto !important;&#10;      left: 20px !important;&#10;      transform: translate(175%, 0%) !important;&#10;      width: 320px;&#10;      background: #fff;&#10;      border: 2px solid rgb(0, 0, 0);&#10;      /* łatwiej zobaczyć granice */&#10;      z-index: 999;&#10;      padding: 24px;&#10;      border-radius: 16px;&#10;      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);&#10;      text-align: center;&#10;      box-sizing: border-box;&#10;    }&#10;&#10;    #qr-popup p {&#10;      font-size: 16px;&#10;      margin-bottom: 12px;&#10;      color: #000;&#10;    }&#10;&#10;    #qrcode {&#10;      margin: 0 auto 16px auto;&#10;      display: flex;&#10;      justify-content: center;&#10;    }&#10;&#10;    #collapse-btn {&#10;      font-size: 18px;&#10;      /* Zmniejszona z 22px */&#10;      font-weight: bold;&#10;      background: none;&#10;      border: none;&#10;      cursor: pointer;&#10;      color: #111;&#10;      margin-right: 8px;&#10;      padding: 0;&#10;      width: 24px;&#10;      /* Zmniejszona z 30px */&#10;      height: 24px;&#10;      /* Zmniejszona z 30px */&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      line-height: 1;&#10;      /* Dodane dla lepszego wycentrowania */&#10;    }&#10;&#10;    .overview-header h6 {&#10;      font-size: 18;&#10;      /* Dodane, aby zmniejszyć rozmiar nagłówka */&#10;      margin: 0;&#10;      /* Usunięcie domyślnych marginesów */&#10;    }&#10;&#10;    .overview-header {&#10;      display: flex;&#10;      align-items: center;&#10;      margin-bottom: 8px;&#10;      /* Zmniejszone z 12px */&#10;    }&#10;&#10;    #config-overview.hidden {&#10;      display: none;&#10;    }&#10;&#10;    .overview-title {&#10;      font-size: 16px;&#10;      /* lub inna preferowana wielkość */&#10;      font-weight: bold;&#10;      margin: 0;&#10;    }&#10;&#10;   /*  Tryb PIONOWY — ukryj aplikację, pokaż komunikat */&#10;@media (max-width: 820px) and (orientation: portrait) {&#10;  #app,&#10;  #bottom-toolbar,&#10;  #sidebar,&#10;  .dimension-panel,&#10;  .dimension-label,&#10;  #qr-button {&#10;    display: none !important;&#10;  }&#10;&#10;  #rotate-message {&#10;    display: flex !important;&#10;    justify-content: center;&#10;    align-items: center;&#10;    text-align: center;&#10;    padding: 40px;&#10;    font-size: 18px;&#10;    background: #000;&#10;    color: #fff;&#10;    position: fixed;&#10;    top: 0;&#10;    left: 0;&#10;    right: 0;&#10;    bottom: 0;&#10;    z-index: 2000;&#10;  }&#10;&#10;   #export-panel {&#10;    display: none !important;&#10;  }&#10;&#10;  /* Ukryj wyszukiwanie w trybie portrait */&#10;  #search-container {&#10;    display: none;&#10;  }&#10;}&#10;&#10;/*  Tryb POZIOMY — pokazujemy UI */&#10;@media (max-width: 820px) and (orientation: landscape) {&#10;  #rotate-message {&#10;    display: none !important;&#10;  }&#10;&#10;  canvas {&#10;  touch-action: manipulation;&#10;  -webkit-tap-highlight-color: transparent;&#10;  width: 100%;&#10;  height: 100vh;&#10;  display: block;&#10;}&#10;&#10; #sidebar {&#10;  width: 280px; /* stała szerokość panelu UI */&#10;  max-width: 280px;&#10;  min-width: 280px;&#10;  box-sizing: border-box;&#10;  overflow-y: auto;&#10;  padding: 8px;&#10;}&#10;&#10;  /* Responsywne style dla wyszukiwania na mobile */&#10;  #search-toggle {&#10;    width: 38px;&#10;    height: 38px;&#10;  }&#10;&#10;  #search-toggle svg {&#10;    width: 18px;&#10;    height: 18px;&#10;  }&#10;&#10;  #search-panel {&#10;    width: 240px;&#10;  }&#10;&#10;  #search-input {&#10;    padding: 10px 12px;&#10;    font-size: 14px;&#10;  }&#10;&#10;  #search-results {&#10;    max-height: 150px;&#10;  }&#10;&#10;  .search-result-item {&#10;    padding: 6px 10px;&#10;    font-size: 14px;&#10;  }&#10;&#10;#bottom-toolbar #qr-button {&#10;  display: none !important;&#10;}&#10;&#10;#part-tabs {&#10;  display: flex;&#10;  flex-wrap: nowrap; /*  nie zawijaj w nowe linie */&#10;  overflow-x: auto;  /*  pozwól na przesuwanie */&#10;  gap: 8px;&#10;  padding: 8px;&#10;  justify-content: flex-start;&#10;}&#10;&#10;/* Styl dla pojedynczej ikonki */&#10;#part-tabs button,&#10;#part-tabs .part-btn {&#10;  width: 56px;&#10;  height: 56px;&#10;  font-size: 11px;&#10;  padding: 6px;&#10;  flex: 0 0 auto; /*  stała szerokość */&#10;  border-radius: 6px;&#10;  box-sizing: border-box;&#10;}&#10;&#10;/* Jeśli ikonka ma obrazek */&#10;#part-tabs img {&#10;  width: 32px;&#10;  height: 32px;&#10;}&#10;&#10;&#10;#bottom-toolbar {&#10;  left: 50%;&#10;  transform: translateX(-125%);&#10;  bottom: 12px;&#10;  padding: 10px 16px;&#10;  display: flex;&#10;  justify-content: center;&#10;  flex-wrap: wrap;&#10;  gap: 8px; /* opcjonalny odstęp między przyciskami */&#10;}&#10;&#10;.dimension-panel {&#10;  position: fixed !important;&#10;  top: auto !important;       /* lub np. top: 80px */&#10;  bottom: 150px !important;   /* odległość od dołu */&#10;  left: 200px !important;      /* odległość od lewej krawędzi */&#10;  right: auto !important;     /* lub np. right: 20px */&#10;  transform: none !important;&#10;&#10;  font-size: 12px !important;&#10;  padding: 6px 8px !important;&#10;  width: auto !important;&#10;  max-width: 90% !important;&#10;  z-index: 2147483647 !important;&#10;  background: white !important;&#10;  border: 1px solid #ccc !important;&#10;  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2) !important;&#10;  border-radius: 6px !important;&#10;}&#10;&#10;#export-panel {&#10;    display: none !important;&#10;    visibility: hidden;&#10;    pointer-events: none;&#10;  }&#10;&#10;   #export-config,&#10;  .export-trigger,&#10;  .toolbar-btn[data-action=&quot;export&quot;] {&#10;    display: none !important;&#10;  }&#10;&#10;&#10;&#10;  .thumbnail,&#10;  #overview-icons img,&#10;  .back-to-model-btn {&#10;    width: 56px;&#10;    height: 56px;&#10;  }&#10;&#10;  .thumbnail-caption {&#10;    font-size: 13px;&#10;    margin-top: 4px;&#10;    text-align: center;&#10;  }&#10;&#10;  #buy-button {&#10;    font-size: 14px;&#10;    padding: 10px;&#10;    width: 100%;&#10;    margin-top: 12px;&#10;  }&#10;&#10;  #config-overview {&#10;  position: fixed;&#10;  top: 0;&#10;  bottom: 0;&#10;  left: 0;&#10;  width: 150px; /* szerokość bocznego panelu */&#10;  height: 100vh; /* pełna wysokość */&#10;  padding: 16px;&#10;  background: rgba(245, 245, 245, 0.95);&#10;  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);&#10;  border-radius: 0 8px 8px 0;&#10;  z-index: 999;&#10;  overflow-y: auto;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;&#10;&#10;  #config-overview h2 {&#10;    font-size: 6px !important;&#10;    line-height: 1 !important;&#10;    margin: 0 !important;&#10;    padding: 0 !important;&#10;  }&#10;&#10;  #config-overview h2::after {&#10;    content: &quot;+  Twoja konfiguracja&quot;;&#10;    font-size: 14px;&#10;    position: absolute;&#10;    right: 10px;&#10;    top: 50%;&#10;    transform: translateY(-50%);&#10;    color: #000;&#10;  }&#10;&#10;  #config-overview .overview-title {&#10;    display: none;&#10;  }&#10;}&#10;&#10;&#10;&#10;    .dimension-panel {&#10;      background-color: white;&#10;      border: 1px solid #ccc;&#10;      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);&#10;      padding: 10px;&#10;      border-radius: 5px;&#10;      font-size: 14px;&#10;      z-index: 1001;&#10;    }&#10;&#10;    #hdr-toggle {&#10;      position: relative;&#10;    }&#10;&#10;    #hdr-panel {&#10;      position: absolute;&#10;      bottom: 100%;&#10;      left: 50%;&#10;      transform: translateX(-50%) translateY(-8px);&#10;      background: #fff;&#10;      border-radius: 12px;&#10;      padding: 12px 16px;&#10;      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);&#10;      z-index: 9999;&#10;      min-width: 240px;&#10;      display: none;&#10;      padding-top: 30px;&#10;    }&#10;&#10;    #hdr-panel.hidden {&#10;      display: none;&#10;    }&#10;&#10;    #hdr-close {&#10;      position: absolute;&#10;      top: 5px;&#10;      right: 5px;&#10;      background: none;&#10;      border: none;&#10;      font-size: 20px;&#10;      cursor: pointer;&#10;      color: #111111;&#10;      z-index: 1000;&#10;    }&#10;&#10;    #hdr-options {&#10;      display: flex;&#10;      gap: 12px;&#10;      flex-wrap: wrap;&#10;      justify-content: center;&#10;      padding-top: 10px;&#10;    }&#10;&#10;    #hdr-options .thumbnail {&#10;      width: 72px;&#10;      height: 72px;&#10;    }&#10;&#10;    #hdr-options .thumbnail img {&#10;      max-width: 100%;&#10;      max-height: 100%;&#10;    }&#10;&#10;    .hdr-close-btn {&#10;      position: absolute;&#10;      top: 8px;&#10;      right: 10px;&#10;      background: none;&#10;      border: none;&#10;      font-size: 22px;&#10;      font-weight: bold;&#10;      cursor: pointer;&#10;      color: #555;&#10;      z-index: 10000;&#10;    }&#10;&#10;    .hdr-close-btn:hover {&#10;      color: #000;&#10;    }&#10;&#10;    #export-panel {&#10;      position: absolute;&#10;      bottom: 60px;&#10;      /* nad przyciskiem */&#10;      right: 62px;&#10;      /* &lt;- tu zwiększ wartość, żeby przesunąć panel bardziej w lewo */&#10;      background: #ffffff;&#10;      border: 1px solid #eeeeee;&#10;      border-radius: 8px;&#10;      padding: 8px;&#10;      display: flex;&#10;      flex-direction: column;&#10;      gap: 8px;&#10;      z-index: 100;&#10;      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);&#10;    }&#10;&#10;    #export-panel.hidden {&#10;      display: none;&#10;    }&#10;&#10;    .export-btn {&#10;      background-color: #444;&#10;      color: #222222;&#10;      padding: 6px 12px;&#10;      border: none;&#10;      border-radius: 6px;&#10;      cursor: pointer;&#10;      text-align: left;&#10;      white-space: nowrap;&#10;    }&#10;&#10;    .export-btn:hover {&#10;      background-color: #555;&#10;    }&#10;/*Ukrycie przyciku exportu*/&#10;#export-config {&#10;  display: none;&#10;}&#10;&#10;#export-panel {&#10;  display: none;&#10;}&#10;&#10;   .collection-icon {&#10;  width: 64px;&#10;  height: 64px;&#10;  object-fit: contain;&#10;  cursor: pointer;&#10;  border: 1px solid #ccc;&#10;  border-radius: 8px;&#10;  transition: transform 0.2s, border-color 0.2s;&#10;}&#10;&#10;.collection-icon:hover {&#10;  transform: scale(1.05);&#10;  border-color: #444;&#10;}&#10;&#10;.collection-icon.selected {&#10;  outline: 2px solid #000;&#10;  box-shadow: 0 0 8px rgba(0,0,0,0.2);&#10;}&#10;&#10;&#10;&#10;&#10;    @keyframes slideDown {&#10;      from {&#10;        opacity: 0;&#10;        transform: translateY(-5px);&#10;      }&#10;&#10;      to {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;      }&#10;    }&#10;&#10;    #material-options details summary {&#10;      cursor: pointer;&#10;      font-weight: bold;&#10;      background: #f7f7f7;&#10;      border-radius: 8px;&#10;      padding: 6px 10px;&#10;      margin-bottom: 6px;&#10;    }&#10;&#10;    .collection-icon {&#10;  width: 64px;&#10;  height: 64px;&#10;  object-fit: contain;&#10;  cursor: pointer;&#10;  border: 1px solid #ccc;&#10;  border-radius: 8px;&#10;  transition: transform 0.2s, border-color 0.2s;&#10;}&#10;&#10;.collection-icon:hover {&#10;  transform: scale(1.05);&#10;  border-color: #444;&#10;}&#10;&#10;.collection-icon.selected {&#10;  outline: 2px solid #000;&#10;  box-shadow: 0 0 8px rgba(0,0,0,0.2);&#10;}&#10;&#10;.collection-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 16px;&#10;  width: 88px;&#10;  align-items: center;&#10;}&#10;&#10;#custom-loader {&#10;  position: fixed;&#10;  top: 0; left: 0;&#10;  width: 100%; height: 100%;&#10;  background: #fff;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 9999;&#10;  font-family: 'Poppins', Arial, sans-serif;&#10;}&#10;&#10;#custom-loader.fade-out {&#10;  opacity: 0;&#10;  transition: opacity 0.5s ease;&#10;  pointer-events: none;&#10;}&#10;&#10;#model-loader {&#10;  position: fixed;&#10;  top: 0; left: 0;&#10;  width: 100%; height: 100%;&#10;  background: rgba(255, 255, 255, 0.97);&#10;  display: none;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 9999;&#10;  font-family: 'Poppins', Arial, sans-serif;&#10;  transition: opacity 0.5s ease-in-out;&#10;}&#10;&#10;#model-loader p {&#10;  font-size: 18px;&#10;  color: #333;&#10;  text-align: center;&#10;  margin: 10px 0 0 0;&#10;  font-weight: 500;&#10;  text-shadow: 1px 1px 2px rgba(0,0,0,0.1);&#10;}&#10;&#10;/* Model loader animations */&#10;@keyframes logoPulse {&#10;  0%, 100% { opacity: 0.9; transform: scale(1); }&#10;  50% { opacity: 1; transform: scale(1.05); }&#10;}&#10;&#10;@keyframes progressSlide {&#10;  0% { transform: translateX(-100%); }&#10;  50% { transform: translateX(0%); }&#10;  100% { transform: translateX(100%); }&#10;}&#10;&#10;/*  WELCOME SCREEN */&#10;#welcome-screen {&#10;  position: absolute;&#10;  top: 0; left: 0;&#10;  width: 100%;&#10;  height: 100%;&#10;  background: #fff;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 100;&#10;  font-family: 'Poppins', Arial, sans-serif;&#10;  text-align: center;&#10;  padding: 20px;&#10;  /* Ukrywa tylko canvas, nie UI */&#10;}&#10;&#10;#welcome-logo {&#10;  max-width: 200px;&#10;  height: auto;&#10;  margin-bottom: 30px;&#10;  animation: logoPulse 3s ease-in-out infinite;&#10;}&#10;&#10;#welcome-screen h1 {&#10;  font-size: 2.5em;&#10;  font-weight: 600;&#10;  color: #333;&#10;  margin: 0 0 20px 0;&#10;}&#10;&#10;#welcome-screen p {&#10;  font-size: 1.1em;&#10;  color: #666;&#10;  max-width: 500px;&#10;  line-height: 1.5;&#10;  margin: 0;&#10;}&#10;&#10;/* Welcome screen yellow accents */&#10;.title-with-accent {&#10;  position: relative;&#10;  margin-bottom: 25px;&#10;}&#10;&#10;.title-with-accent h1 {&#10;  margin-bottom: 15px !important;&#10;}&#10;&#10;.yellow-accent-line {&#10;  width: 120px;&#10;  height: 4px;&#10;  background: linear-gradient(90deg, #FFD700, #FFA500);&#10;  margin: 0 auto;&#10;  border-radius: 2px;&#10;  animation: accentGlow 2s ease-in-out infinite;&#10;}&#10;&#10;.promo-text {&#10;  font-size: 1em !important;&#10;  color: #555 !important;&#10;  font-style: normal;&#10;  margin-top: 20px !important;&#10;  opacity: 0.9;&#10;  animation: fadeInUp 1s ease-out 0.5s both;&#10;}&#10;&#10;@keyframes accentGlow {&#10;  0%, 100% { &#10;    transform: scaleX(1);&#10;    box-shadow: 0 0 5px rgba(255, 215, 0, 0.3);&#10;  }&#10;  50% { &#10;    transform: scaleX(1.1);&#10;    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6);&#10;  }&#10;}&#10;&#10;@keyframes fadeInUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(10px);&#10;  }&#10;  to {&#10;    opacity: 0.9;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;/*  ANIMATIONS */&#10;@keyframes logoPulse {&#10;  0% { transform: scale(1); opacity: 1; }&#10;  50% { transform: scale(1.05); opacity: 0.8; }&#10;  100% { transform: scale(1); opacity: 1; }&#10;}&#10;&#10;@keyframes spin {&#10;  0% { transform: rotate(0deg); }&#10;  100% { transform: rotate(360deg); }&#10;}&#10;&#10;@keyframes progressSlide {&#10;  0% { transform: translateX(-100%); }&#10;  50% { transform: translateX(0%); }&#10;  100% { transform: translateX(100%); }&#10;}&#10;&#10;.loader {&#10;  border: 8px solid #f3f3f3;&#10;  border-top: 8px solid #555;&#10;  &#10;  border-radius: 50%;&#10;  width: 48px;&#10;  height: 48px;&#10;  animation: spin 1s linear infinite;&#10;  display: inline-block;&#10;  margin-bottom: 12px;&#10;}&#10;#material-preloader {&#10;  display: none;&#10;  position: fixed;&#10;  z-index: 10000;&#10;  left: 0; top: 0; right: 0; bottom: 0;&#10;  width: 100vw; height: 100vh;&#10;  background: rgba(255,255,255,0.85);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;#material-preloader .preloader-box {&#10;  text-align: center;&#10;  background: rgba(255,255,255,0.97);&#10;  border-radius: 12px;&#10;  padding: 20px 30px;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,0.15);&#10;}&#10;#material-preloader .loader {&#10;  border: 3px solid #f3f3f3;&#10;  border-top: 3px solid #555;&#10;  border-radius: 50%;&#10;  width: 24px;&#10;  height: 24px;&#10;  animation: spin 1s linear infinite;&#10;  display: inline-block;&#10;  margin-bottom: 12px;&#10;}&#10;@keyframes spin {&#10;  0% { transform: rotate(0deg);}&#10;  100% { transform: rotate(360deg);}&#10;}&#10;&#10;&#10;  &lt;/style&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--  ANIMATED LOADER z żółtym paskiem --&gt;&#10;    &lt;div id=&quot;custom-loader&quot;&gt;&#10;        &lt;div class=&quot;logo-container&quot; style=&quot;&#10;            position: relative;&#10;            margin-bottom: 40px;&#10;            animation: logoPulse 3s ease-in-out infinite;&#10;        &quot;&gt;&#10;            &lt;img src=&quot;icons/FK_logo.png&quot; alt=&quot;Fajne Krzesła&quot; style=&quot;&#10;                max-width: 200px; &#10;                height: auto;&#10;                border-radius: 10px;&#10;                opacity: 0.9;&#10;            &quot; /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;spinner&quot; style=&quot;&#10;            width: 40px;&#10;            height: 40px;&#10;            border: 3px solid #f0f0f0;&#10;            border-top: 3px solid #333;&#10;            border-radius: 50%;&#10;            animation: spin 1s linear infinite;&#10;            margin-bottom: 30px;&#10;        &quot;&gt;&lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;progress-container&quot; style=&quot;&#10;            width: 280px;&#10;            height: 3px;&#10;            background: #f0f0f0;&#10;            border-radius: 2px;&#10;            overflow: hidden;&#10;            margin-bottom: 25px;&#10;        &quot;&gt;&#10;            &lt;div class=&quot;progress-bar&quot; style=&quot;&#10;                width: 100%;&#10;                height: 100%;&#10;                background: #FFD700;&#10;                animation: progressSlide 2s ease-in-out infinite;&#10;            &quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;loading-text&quot; style=&quot;&#10;            font-size: 16px; &#10;            color: #333;&#10;            font-weight: 500;&#10;            text-align: center;&#10;            letter-spacing: 0.5px;&#10;        &quot;&gt;Inicjalizacja konfiguratora...&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!--  SPINNER podczas zmiany modelu --&gt;&#10;    &lt;div id=&quot;model-loader&quot;&gt;&#10;        &lt;div class=&quot;logo-container&quot; style=&quot;&#10;            position: relative;&#10;            margin-bottom: 30px;&#10;            animation: logoPulse 3s ease-in-out infinite;&#10;        &quot;&gt;&#10;            &lt;img src=&quot;icons/FK_logo.png&quot; alt=&quot;Fajne Krzesła&quot; style=&quot;&#10;                max-width: 150px; &#10;                height: auto;&#10;                border-radius: 10px;&#10;                opacity: 0.9;&#10;            &quot; /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;spinner&quot; style=&quot;&#10;            width: 35px;&#10;            height: 35px;&#10;            border: 3px solid #f0f0f0;&#10;            border-top: 3px solid #333;&#10;            border-radius: 50%;&#10;            animation: spin 1s linear infinite;&#10;            margin-bottom: 15px;&#10;        &quot;&gt;&lt;/div&gt;&#10;        &#10;        &lt;p&gt;Ładowanie modelu...&lt;/p&gt;&#10;        &#10;        &lt;div class=&quot;progress-container&quot; style=&quot;&#10;            width: 220px;&#10;            height: 3px;&#10;            background: #f0f0f0;&#10;            border-radius: 2px;&#10;            overflow: hidden;&#10;            margin-top: 15px;&#10;        &quot;&gt;&#10;            &lt;div class=&quot;progress-bar&quot; style=&quot;&#10;                width: 100%;&#10;                height: 100%;&#10;                background: #FFD700;&#10;                animation: progressSlide 2s ease-in-out infinite;&#10;            &quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;  &lt;div id=&quot;app&quot;&gt;&#10;&#10;&lt;div id=&quot;material-preloader&quot; style=&quot;display:none;&quot;&gt;&#10;  &lt;div class=&quot;preloader-box&quot;&gt;&#10;    &lt;span class=&quot;loader&quot;&gt;&lt;/span&gt;&#10;    &lt;div style=&quot;margin-top: 16px; font-size: 2em;&quot;&gt;Ładowanie materiału...&lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;    &lt;!-- CANVAS CONTAINER z WELCOME SCREEN --&gt;&#10;    &lt;div id=&quot;canvas-container&quot; style=&quot;flex: 1 1 0; position: relative; height: 100%; background: #ededed15;&quot;&gt;&#10;      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;&#10;      &#10;      &lt;!--  WELCOME SCREEN - tylko nad canvas --&gt;&#10;      &lt;div id=&quot;welcome-screen&quot;&gt;&#10;          &lt;img id=&quot;welcome-logo&quot; src=&quot;icons/FK_logo.png&quot; alt=&quot;Fajne Krzesła&quot;&gt;&#10;          &lt;div class=&quot;title-with-accent&quot;&gt;&#10;              &lt;h1&gt;Konfigurator Krzeseł&lt;/h1&gt;&#10;              &lt;div class=&quot;yellow-accent-line&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;p&gt;Wybierz kategorię oraz model krzesła z bocznego panelu, aby rozpocząć konfigurację w 3D&lt;/p&gt;&#10;          &lt;p class=&quot;promo-text&quot;&gt;Możesz również zapoznać się z naszymi promocjami i bestsellerami - najczęściej wybieranymi modelami krzeseł&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &#10;    &lt;div id=&quot;config-overview&quot; class=&quot;collapsed hidden&quot;&gt;&#10;      &lt;div class=&quot;overview-header&quot;&gt;&#10;        &lt;button id=&quot;collapse-btn&quot;&gt;+&lt;/button&gt;&#10;        &lt;span class=&quot;overview-title&quot;&gt;Twoja Konfiguracja&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;overview-content&quot;&gt;&#10;        &lt;!-- tu cała zawartość, która ma się zwijać --&gt;&#10;        &lt;div id=&quot;overview-icons&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;overview-details&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;overview-total&quot;&gt;&#10;          &lt;p&gt;Suma: &lt;strong id=&quot;overview-total-price&quot;&gt;0.00 PLN&lt;/strong&gt;&lt;/p&gt;&#10;          &lt;button id=&quot;buy-button&quot;&gt;Kupuję&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div id=&quot;sidebar&quot;&gt;&#10;      &lt;!-- Pole wyszukiwania w prawym górnym rogu sidebar'a --&gt;&#10;      &lt;div id=&quot;search-container&quot;&gt;&#10;        &lt;button id=&quot;search-toggle&quot; type=&quot;button&quot; aria-label=&quot;Szukaj&quot;&gt;&#10;          &lt;svg viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path d=&quot;M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z&quot;/&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/button&gt;&#10;        &#10;        &lt;div id=&quot;search-panel&quot;&gt;&#10;          &lt;input &#10;            type=&quot;text&quot; &#10;            id=&quot;search-input&quot; &#10;            placeholder=&quot;Szukaj modeli, materiałów, kolekcji...&quot;&#10;            autocomplete=&quot;off&quot;&#10;          /&gt;&#10;          &lt;div id=&quot;search-results&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Modal wyboru akcji po wyszukiwaniu --&gt;&#10;      &lt;div id=&quot;search-choice-modal&quot;&gt;&#10;        &lt;div class=&quot;search-choice-content&quot;&gt;&#10;          &lt;div class=&quot;search-choice-title&quot;&gt;Co chcesz zrobić?&lt;/div&gt;&#10;          &lt;div class=&quot;search-choice-item&quot;&gt;&#10;            &lt;img id=&quot;search-choice-item-img&quot; src=&quot;&quot; alt=&quot;&quot; onerror=&quot;this.style.display='none'&quot;&gt;&#10;            &lt;div class=&quot;search-choice-item-info&quot;&gt;&#10;              &lt;div class=&quot;search-choice-item-name&quot; id=&quot;search-choice-item-name&quot;&gt;&lt;/div&gt;&#10;              &lt;div class=&quot;search-choice-item-category&quot; id=&quot;search-choice-item-category&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;search-choice-buttons&quot;&gt;&#10;            &lt;button class=&quot;search-choice-btn secondary&quot; id=&quot;search-choice-view-options&quot;&gt;Wyniki wyszukiwania&lt;/button&gt;&#10;            &lt;button class=&quot;search-choice-btn primary&quot; id=&quot;search-choice-go-to-chair&quot;&gt;Przejdź do krzesła&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;&#10;      &#10;      &lt;!-- Wskaźnik aktywnego filtra wyszukiwania --&gt;&#10;      &lt;div id=&quot;search-filter-indicator&quot; style=&quot;display: none; margin-bottom: 15px; padding: 8px 12px; background: rgba(245, 200, 66, 0.1); border: 1px solid #F5C842; border-radius: 8px; font-size: 14px;&quot;&gt;&#10;        &lt;span style=&quot;font-weight: 600;&quot;&gt; Filtr aktywny:&lt;/span&gt; &#10;        &lt;span id=&quot;search-filter-text&quot;&gt;&lt;/span&gt;&#10;        &lt;button id=&quot;clear-search-filter&quot; style=&quot;float: right; background: none; border: none; color: #666; cursor: pointer; font-size: 16px; padding: 0;&quot; title=&quot;Wyczyść filtr&quot;&gt;×&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;hr /&gt;&#10;      &#10;      &lt;!-- Przyciski kategorii --&gt;&#10;      &lt;div id=&quot;category-buttons&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&#10;        &lt;h3 style=&quot;margin-bottom: 10px; font-size: 16px; color: #555;&quot;&gt;Kategorie:&lt;/h3&gt;&#10;        &lt;div id=&quot;category-buttons-container&quot; style=&quot;display: flex; flex-wrap: wrap; gap: 8px;&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div id=&quot;model-section&quot;&gt;&#10;        &lt;div class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Wybierz model:&lt;/h3&gt;&#10;          &lt;div id=&quot;model-thumbnails&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div id=&quot;config-section&quot; style=&quot;display:none;&quot;&gt;&#10;        &lt;div id=&quot;back-to-models-container&quot; style=&quot;margin-bottom: 15px;&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;legs-section&quot; class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Nogi:&lt;/h3&gt;&#10;          &lt;div id=&quot;legs-thumbnails&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;parts-section&quot; class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Wybierz element:&lt;/h3&gt;&#10;          &lt;div id=&quot;part-tabs&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;materials-section&quot; class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Wybierz materiał:&lt;/h3&gt;&#10;          &lt;div id=&quot;material-options&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;!-- PANEL KOLEKCJI + MATERIAŁY --&gt;&#10;&lt;div id=&quot;collection-container&quot; style=&quot;display: flex; gap: 24px; margin-top: 20px;&quot;&gt;&#10;  &lt;div id=&quot;collection-icons&quot; style=&quot;display: flex; flex-direction: column; gap: 14px; width: 88px;&quot;&gt;&lt;/div&gt;&#10;  &lt;div id=&quot;material-panel-viewer&quot; class=&quot;options-grid&quot; style=&quot;flex-grow: 1;&quot;&gt;&lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&#10;&#10;&#10;      &lt;/div&gt;&#10;      &lt;div id=&quot;summary&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;!-- FORMULARZ EMAIL - POPUP --&gt;&#10;  &lt;div id=&quot;emailModal&quot; class=&quot;modal hidden&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;span class=&quot;close-button&quot;&gt;&amp;times;&lt;/span&gt;&#10;      &lt;h2&gt;Wyślij swoją konfigurację&lt;/h2&gt;&#10;      &lt;form id=&quot;emailForm&quot;&gt;&#10;        &lt;label for=&quot;name&quot;&gt;Imię i nazwisko:&lt;/label&gt;&#10;        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; required&gt;&#10;&#10;        &lt;label for=&quot;email&quot;&gt;Adres e-mail:&lt;/label&gt;&#10;        &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#10;&#10;        &lt;label for=&quot;phone&quot;&gt;Numer telefonu:&lt;/label&gt;&#10;        &lt;input type=&quot;tel&quot; id=&quot;phone&quot; name=&quot;phone&quot;&gt;&#10;&#10;        &lt;!-- Ukryte pola na dane konfiguracji --&gt;&#10;        &lt;input type=&quot;hidden&quot; id=&quot;model&quot; name=&quot;model&quot;&gt;&#10;        &lt;input type=&quot;hidden&quot; id=&quot;price&quot; name=&quot;price&quot;&gt;&#10;        &lt;input type=&quot;hidden&quot; id=&quot;total&quot; name=&quot;total&quot;&gt;&#10;&#10;        &lt;button type=&quot;submit&quot;&gt;Wyślij&lt;/button&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&#10;  &#10;&#10;&#10;&#10;  &lt;!-- KOMUNIKAT obrotu --&gt;&#10;  &lt;div id=&quot;rotate-message&quot; style=&quot;display: none;&quot;&gt;&#10;   Obróć urządzenie poziomo&#10;&lt;/div&gt;&#10;&#10;&#10;&#10;  &lt;!-- KOMUNIKAT SUKCESU --&gt;&#10;  &lt;div id=&quot;success-message&quot; class=&quot;hidden&quot;&gt;✅ Dziękujemy! Formularz został wysłany.&lt;/div&gt;&#10;&#10;&#10;&#10;  &lt;!-- Dolny panel UI --&gt;&#10;  &lt;div id=&quot;bottom-toolbar&quot; style=&quot;display: none;&quot;&gt;&#10;&#10;    &lt;!-- Przycisk HDR --&gt;&#10;    &lt;button id=&quot;hdr-toggle&quot; title=&quot;Zmień HDR&quot;&gt;&#10;      &lt;img src=&quot;icons/bulb_icon.png&quot; alt=&quot;HDR&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;    &lt;div id=&quot;hdr-panel&quot; class=&quot;hidden&quot;&gt;&#10;      &lt;button id=&quot;hdr-close&quot; class=&quot;hdr-close-btn&quot;&gt;×&lt;/button&gt;&#10;      &lt;div id=&quot;hdr-options&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    &lt;button id=&quot;ar-button&quot; title=&quot;AR&quot;&gt;&#10;      &lt;img src=&quot;icons/AR_icon.png&quot; alt=&quot;AR&quot; style=&quot;width: 30px; height: 30px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;    &lt;button id=&quot;dimensions-show&quot; title=&quot;Wymiary modelu&quot;&gt;&#10;      &lt;img src=&quot;icons/dimmension_icon.png&quot; alt=&quot;Wymiary&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;&#10;    &lt;button id=&quot;export-config&quot; title=&quot;Pobierz konfigurację&quot;&gt;&#10;      &lt;img src=&quot;icons/export_icon.png&quot; alt=&quot;Eksport&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;      &lt;div id=&quot;export-panel&quot; class=&quot;hidden&quot;&gt;&#10;      &lt;button class=&quot;export-btn&quot; data-format=&quot;fbx&quot;&gt;FBX&lt;/button&gt;&#10;      &lt;button class=&quot;export-btn&quot; data-format=&quot;dae&quot;&gt;DAE&lt;/button&gt;&#10;      &lt;button class=&quot;export-btn&quot; data-format=&quot;obj&quot;&gt;OBJ&lt;/button&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;button id=&quot;qr-button&quot; title=&quot;Zobacz na telefonie&quot;&gt;&#10;      &lt;img src=&quot;icons/qr_icon.png&quot; alt=&quot;QR&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;  &lt;/div&gt;&#10;&#10;&#10;  &lt;div id=&quot;dimension-overlay&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;&#10;&#10;  &lt;link rel=&quot;manifest&quot; href=&quot;manifest.json?v=2025080201&quot; /&gt;&#10;  &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;icons/favicon.png&quot;&gt;&#10;  &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;&#10;  &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot;&quot;&gt;&#10;&#10;&#10;  &lt;div id=&quot;ar-popup&quot; style=&quot;&#10;  position: fixed;&#10;  top: 50%;&#10;  left: 50%;&#10;  transform: translate(-100%, -50%);&#10;  background: white;&#10;  padding: 20px 30px;&#10;  border-radius: 12px;&#10;  box-shadow: 0 4px 24px rgba(0,0,0,0.2);&#10;  display: none;&#10;  z-index: 9999;&#10;  text-align: center;&#10;  max-width: 300px;&#10;&quot;&gt;&#10;    &lt;img src=&quot;icons/AR_icon.png&quot; alt=&quot;AR Ikona&quot; style=&quot;width: 60px; margin-bottom: 10px;&quot; /&gt;&#10;    &lt;div style=&quot;font-size: 18px; font-weight: bold;&quot;&gt;Dostępne wkrótce&lt;/div&gt;&#10;    &lt;div style=&quot;margin-top: 6px; font-size: 14px;&quot;&gt;Tryb AR zostanie wkrótce uruchomiony.&lt;/div&gt;&#10;    &lt;button onclick=&quot;document.getElementById('ar-popup').style.display='none'&quot; style=&quot;&#10;    margin-top: 12px;&#10;    background: #141414;&#10;    color: white;&#10;    border: none;&#10;    padding: 6px 12px;&#10;    border-radius: 6px;&#10;    cursor: pointer;&#10;  &quot;&gt;Zamknij&lt;/button&gt;&#10;  &lt;/div&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  &lt;div id=&quot;qr-popup&quot;&#10;    style=&quot;display:none; position:fixed; top:20%; left:50%; transform:translateX(-50%); background:white; padding:20px; border-radius:12px; box-shadow:0 0 20px rgba(0,0,0,0.2); z-index:3000;&quot;&gt;&#10;    &lt;p style=&quot;margin-bottom:10px;&quot;&gt;Zeskanuj kod QR telefonem:&lt;/p&gt;&#10;    &lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;&#10;    &lt;button id=&quot;qr-close-btn&quot;&gt;Zamknij&lt;/button&gt;&#10;&#10;  &lt;/div&gt;&#10;&#10;&#10;  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js&quot;&gt;&lt;/script&gt;&#10;  &lt;script&gt;&#10;    function showQR() {&#10;      const url = window.location.href;&#10;      document.getElementById('qr-popup').style.display = 'block';&#10;      document.getElementById('qrcode').innerHTML = ''; // czyść stare&#10;      document.getElementById('qr-close-btn').addEventListener('click', () =&gt; {&#10;        document.getElementById('qr-popup').style.display = 'none';&#10;      });&#10;&#10;      new QRCode(document.getElementById(&quot;qrcode&quot;), {&#10;        text: url,&#10;        width: 200,&#10;        height: 200,&#10;      });&#10;    }&#10;  &lt;/script&gt;&#10;&#10;&#10;  &lt;script src=&quot;https://cdn.emailjs.com/dist/email.min.js&quot;&gt;&lt;/script&gt;&#10;  &lt;script&gt;&#10;    emailjs.init('tjw0wCwxn3xsnfNV5');&#10;&#10;    function generateSummaryText() {&#10;      let text = &quot;&quot;;&#10;      let totalPrice = 0;&#10;&#10;      if (window.selectedChair) {&#10;        const price = parseFloat(window.selectedChair.Cena) || 0;&#10;        totalPrice += price;&#10;        text += `Model: ${window.selectedChair.Nazwa} (${price.toFixed(2)} PLN)\n`;&#10;      }&#10;&#10;      if (window.selectedLeg) {&#10;        const price = parseFloat(window.selectedLeg.Cena) || 0;&#10;        totalPrice += price;&#10;        text += `Wariant nóg: ${window.selectedLeg.Nazwa} (${price.toFixed(2)} PLN)\n`;&#10;      }&#10;&#10;      const partOrder = ['seat', 'backseat_inside', 'backseat_outside', 'legs_material', 'backseat'];&#10;      partOrder.forEach(part =&gt; {&#10;        const mat = window.selectedMaterials?.[part];&#10;        if (mat) {&#10;          const price = parseFloat(mat.Cena) || 0;&#10;          totalPrice += price;&#10;          text += `${part.replace(/_/g, ' ')}: ${mat.Nazwa} (${price.toFixed(2)} PLN)\n`;&#10;        }&#10;      });&#10;&#10;      text += `\nSuma konfiguracji: ${totalPrice.toFixed(2)} PLN`;&#10;      return { text, totalPrice };&#10;    }&#10;&#10;&#10;&#10;    emailForm.addEventListener('submit', (e) =&gt; {&#10;      e.preventDefault();&#10;&#10;      const summary = generateSummaryText();&#10;&#10;      document.getElementById('model').value = window.selectedChair?.Nazwa || 'Brak modelu';&#10;      document.getElementById('price').value = parseFloat(window.selectedChair?.Cena || 0).toFixed(2);&#10;      document.getElementById('total').value = summary.totalPrice.toFixed(2);&#10;&#10;      let configTextInput = document.getElementById('configText');&#10;      if (!configTextInput) {&#10;        configTextInput = document.createElement('textarea');&#10;        configTextInput.name = 'configText';&#10;        configTextInput.id = 'configText';&#10;        configTextInput.hidden = true;&#10;        emailForm.appendChild(configTextInput);&#10;      }&#10;      configTextInput.value = summary.text;&#10;&#10;      emailjs.sendForm('service_iqzcwli', 'template_qgq7htg', emailForm)&#10;        .then(() =&gt; {&#10;          document.getElementById('emailModal')?.classList.add('hidden');&#10;&#10;          const successMessage = document.getElementById('success-message');&#10;          successMessage.classList.remove('hidden');&#10;          successMessage.classList.add('visible');&#10;&#10;          setTimeout(() =&gt; {&#10;            successMessage.classList.remove('visible');&#10;            successMessage.classList.add('hidden');&#10;          }, 3500);&#10;&#10;          emailForm.reset();&#10;        })&#10;        .catch((error) =&gt; {&#10;          alert('❌ Coś poszło nie tak. Spróbuj ponownie.');&#10;          console.error('EmailJS error:', error);&#10;        });&#10;    });&#10;  &lt;/script&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  &lt;script type=&quot;module&quot;&gt;&#10;    // Główna biblioteka Three.js (z importmap)&#10;    import * as THREE from 'three'; // opcjonalne, jeśli używasz tylko konkretnych importów&#10;&#10;    // Konkretnie z Three.js (potrzebne do wymiarów i geometrii)&#10;    import {&#10;      Group,&#10;      Box3,&#10;      Vector3,&#10;      ArrowHelper,&#10;      Sprite,&#10;      SpriteMaterial,&#10;      CanvasTexture,&#10;      Color,&#10;      TextureLoader&#10;    } from 'three';&#10;&#10;    // ThreePipe core – viewer i pluginy&#10;    import {&#10;      ThreeViewer,&#10;      LoadingScreenPlugin,&#10;      GBufferPlugin,&#10;      SSAAPlugin,&#10;    } from 'threepipe';&#10;&#10;    // Pluginy z WebGI (ThreePipe)&#10;    import {&#10;      SSReflectionPlugin,&#10;      BloomPlugin&#10;    } from '@threepipe/webgi-plugins';&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    const CAMERA_FOV = 12;&#10;    const CAMERA_NEAR = 0.1;&#10;    const CAMERA_FAR = 100;&#10;    const CAMERA_POSITION = { x: -4.5, y: 0.76, z: 3.9 };&#10;    const CAMERA_TARGET = { x: 0.79, y: -1.09, z: -0.22 };&#10;&#10;    const MIN_ZOOM_DISTANCE = 1; // minimalna odległość kamery od modelu (przybliżenie)&#10;    const MAX_ZOOM_DISTANCE = 8; // maksymalna odległość kamery od modelu (oddalenie)&#10;    const VERTICAL_OFFSET = 0;&#10;&#10;    let viewer, currentModelContainer, currentLegModel;&#10;    let allData = [];&#10;    let selectedChair, selectedLeg, selectedMaterials = {};&#10;    let globalCameraTargetPosition;&#10;    let userInteracted = false;&#10;    let dimensionHelpers = [];&#10;    let currentModel = null;&#10;    let selectedLegVariant = null;&#10;    let lastOpenedCollection = null;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    const ELEMENT_ICONS = {&#10;      seat: 'icons/m_seat_icon.png',&#10;      backseat_inside: 'icons/m_backseat_in_icon.png',&#10;      backseat_outside: 'icons/m_backseat_out_icon.png',&#10;      backseat: 'icons/m_backseat_icon.png',&#10;      legs: 'icons/m_legs_icon.png'&#10;    };&#10;&#10;    function showScreen(screenName) {&#10;      const welcomeScreen = document.getElementById('welcome-screen');&#10;      &#10;      // Ukryj welcome screen przy przejściu do jakiegokolwiek ekranu&#10;      if (welcomeScreen &amp;&amp; screenName !== 'search-results') {&#10;        welcomeScreen.style.display = 'none';&#10;      }&#10;      &#10;      document.getElementById('model-section').style.display = (screenName === 'models' || screenName === 'search-results') ? 'block' : 'none';&#10;      document.getElementById('config-section').style.display = screenName === 'config' ? 'block' : 'none';&#10;    }&#10;&#10;&#10;    async function loadCameraTarget() {&#10;      try {&#10;        const targetsContainer = await viewer.load('camera_target.glb');&#10;        if (targetsContainer) {&#10;          // Szukaj obiektu o nazwie &quot;camera_target&quot; (lub zmień na nazwę empty z Blender)&#10;          const targetObject = targetsContainer.getObjectByName('camera_target');&#10;          if (targetObject) {&#10;            globalCameraTargetPosition = targetObject.getWorldPosition(new Vector3());&#10;          } else {&#10;            // Jeśli nie znajdzie, użyj środka sceny&#10;            globalCameraTargetPosition = new Vector3(0, 0, 0);&#10;          }&#10;          viewer.scene.remove(targetsContainer); // nie pokazuj empty w scenie&#10;        }&#10;      } catch (e) {&#10;        console.warn(&quot;Nie udało się załadować 'camera_target.glb'. Używam domyślnych ustawień.&quot;);&#10;        globalCameraTargetPosition = new Vector3(0, 0, 0);&#10;      }&#10;    }&#10;&#10;    async function loadModelWithFreshness(path, viewer, options = {}) {&#10;      try {&#10;        // Wykonaj zapytanie HEAD, aby pobrać Last-Modified z serwera&#10;        const res = await fetch(path, { method: 'HEAD' });&#10;        const lastModified = res.headers.get('Last-Modified');&#10;&#10;        // Jeśli data jest dostępna, użyj jej jako wersji cache-bustera&#10;        const version = lastModified ? new Date(lastModified).getTime() : Date.now();&#10;        const pathWithVersion = `${path}?v=${version}`;&#10;&#10;        // Załaduj model z cache-busterem&#10;        const modelContainer = await viewer.load(pathWithVersion, options);&#10;        return modelContainer;&#10;      } catch (e) {&#10;        console.error(`Nie udało się załadować modelu: ${path}`, e);&#10;        throw e;&#10;      }&#10;    }&#10;&#10;&#10;&#10;    async function init() {&#10;      const canvas = document.getElementById(&quot;canvas&quot;);&#10;&#10;      viewer = new ThreeViewer({&#10;        canvas: canvas,&#10;        plugins: [ GBufferPlugin, SSAAPlugin, SSReflectionPlugin, BloomPlugin],&#10;        rendererSettings: { antialias: true }&#10;      });&#10;      if (viewer.controls) {&#10;        viewer.controls.minDistance = MIN_ZOOM_DISTANCE;&#10;        viewer.controls.maxDistance = MAX_ZOOM_DISTANCE;&#10;        viewer.controls.dampingFactor = 0.1;&#10;        viewer.controls.enableDamping = true;&#10;        // Dodaj nasłuchiwanie TUTAJ, po utworzeniu viewer i controls:&#10;        viewer.controls.addEventListener('change', clampCameraDistance);&#10;      }&#10;&#10;      const collapseBtn = document.getElementById('collapse-btn');&#10;      const overviewPanel = document.getElementById('config-overview');&#10;&#10;      collapseBtn.onclick = () =&gt; {&#10;        overviewPanel.classList.toggle('collapsed');&#10;        collapseBtn.textContent = overviewPanel.classList.contains('collapsed') ? '+' : '−';&#10;      };&#10;&#10;&#10;      document.getElementById('buy-button').innerHTML = '&lt;span class=&quot;cart-icon&quot;&gt;&lt;/span&gt;Zapytaj o produkt';&#10;&#10;      document.getElementById('buy-button').onclick = () =&gt; {&#10;        const summary = generateSummaryText();&#10;        const emailAddress = 'mrpeter@o2.pl'; // adres docelowy&#10;&#10;        const subject = `Zapytanie o wycenę: ${selectedChair.Nazwa}`;&#10;        const body = `Dzień dobry,\n\nProszę o wycenę poniższej konfiguracji:\n\n${summary.text}\n-------------------\nSuma: ${summary.totalPrice.toFixed(2)} PLN\n\nPozdrawiam,\n[Imię i nazwisko]`;&#10;&#10;        console.log(&quot;Symulowana wysyłka wiadomości:&quot;);&#10;        console.log(&quot;Temat:&quot;, subject);&#10;        console.log(&quot;Treść:&quot;, body);&#10;&#10;        // Zamknij modal jeśli otwarty&#10;        const modal = document.getElementById('emailModal');&#10;        if (modal) modal.classList.add('hidden');&#10;&#10;        // Pokaż komunikat sukcesu (dodaj klasę visible i usuń hidden)&#10;        const successMessage = document.getElementById('success-message');&#10;        if (successMessage) {&#10;          successMessage.classList.add('visible');&#10;          successMessage.classList.remove('hidden');&#10;&#10;          // Po 0.5s otwórz mailto, by dać czas na pokazanie komunikatu&#10;          &#10;&#10;          // Ukryj komunikat po 3 sekundach&#10;          setTimeout(() =&gt; {&#10;            successMessage.classList.remove('visible');&#10;            successMessage.classList.add('hidden');&#10;          }, 3500);&#10;        } else {&#10;          // Jeżeli brak komunikatu, to od razu wywołaj mailto&#10;          window.location.href = `mailto:${emailAddress}?subject=${encodeURIComponent(subject)}&amp;body=${encodeURIComponent(body)}`;&#10;        }&#10;      };&#10;&#10;&#10;&#10;&#10;      try {&#10;        await viewer.setEnvironmentMap(&quot;hdr/hamburg_hbf_1k.hdr&quot;, { isHDR: true });&#10;      } catch (e) { console.error(&quot;Błąd ładowania HDR:&quot;, e); }&#10;&#10;      await loadCameraTarget();&#10;      window.addEventListener(&quot;resize&quot;, resizeCanvas);&#10;      resizeCanvas();&#10;      await loadDataFromSheet();&#10;      &#10;      // Pokaż welcome screen jako domyślny ekran&#10;      const welcomeScreen = document.getElementById('welcome-screen');&#10;      if (welcomeScreen) {&#10;        welcomeScreen.style.display = 'flex';&#10;      }&#10;      &#10;      // Ukryj toolbar na welcome screen&#10;      const toolbar = document.getElementById('bottom-toolbar');&#10;      if (toolbar) {&#10;        toolbar.classList.remove('visible');&#10;        toolbar.style.display = 'none';&#10;      }&#10;      &#10;      // Ukryj panel konfiguracji na welcome screen&#10;      const configOverview = document.getElementById('config-overview');&#10;      if (configOverview) {&#10;        configOverview.style.display = 'none';&#10;        configOverview.classList.add('hidden');&#10;      }&#10;    }&#10;&#10;    function setCameraView(targetPosition) {&#10;      const camera = viewer.scene.activeCamera;&#10;      camera.fov = CAMERA_FOV;&#10;      camera.near = CAMERA_NEAR;&#10;      camera.far = CAMERA_FAR;&#10;      camera.position.set(CAMERA_POSITION.x, CAMERA_POSITION.y, CAMERA_POSITION.z);&#10;&#10;      // Ustaw target na wybraną pozycję (np. globalCameraTargetPosition)&#10;      let center = globalCameraTargetPosition || new Vector3(0, 0, 0);&#10;      camera.lookAt(center);&#10;      camera.updateProjectionMatrix();&#10;&#10;      // Całkowicie wyłącz kontrolki pozycjonowania&#10;      if (viewer.controls) {&#10;        viewer.controls.target.copy(center);&#10;        viewer.controls.enableRotate = true;&#10;        viewer.controls.enablePan = false;&#10;        viewer.controls.screenSpacePanning = false;&#10;        viewer.controls.enableZoom = false;&#10;        viewer.controls.enabled = true; // to blokuje WSZYSTKIE interakcje&#10;        viewer.controls.update();&#10;      }&#10;    }&#10;&#10;    function resizeCanvas() {&#10;      const sidebar = document.getElementById(&quot;sidebar&quot;);&#10;      const sidebarWidth = sidebar ? sidebar.offsetWidth : 0;&#10;      const canvas = document.getElementById(&quot;canvas&quot;);&#10;      const width = window.innerWidth - sidebarWidth;&#10;      const height = window.innerHeight;&#10;      // Ustaw rozmiar CSS&#10;      canvas.style.width = width + &quot;px&quot;;&#10;      canvas.style.height = height + &quot;px&quot;;&#10;      // Ustaw rozmiar atrybutów (dla WebGL)&#10;      canvas.width = width;&#10;      canvas.height = height;&#10;      if (viewer &amp;&amp; viewer.renderer &amp;&amp; viewer.scene &amp;&amp; viewer.scene.activeCamera) {&#10;        viewer.renderer.setSize(width, height, false);&#10;        viewer.scene.activeCamera.aspect = width / height;&#10;        viewer.scene.activeCamera.updateProjectionMatrix();&#10;      }&#10;    }&#10;&#10;    async function silentLoadModel(variant) {&#10;      if (currentModelContainer) viewer.scene.remove(currentModelContainer);&#10;      currentModelContainer = await loadModelWithFreshness(`chairs/${variant.Nazwa}.glb`, viewer, { autoCenter: true });&#10;&#10;      console.log(&quot;Meshe w modelu:&quot;, currentModelContainer.children.map(obj =&gt; obj.name)); // &lt;-- DODAJ TO TUTAJ&#10;      //selectedChair = variant; // &lt;-- DODAJ TO!&#10;&#10;      &#10;      // Wyśrodkuj kamerę na modelu&#10;      const box = new Box3().setFromObject(currentModelContainer);&#10;      const center = box.getCenter(new Vector3());&#10;      setCameraView(center);&#10;      currentModelContainer.position.sub(center);&#10;      updateSummary();&#10;      renderPartButtons();&#10;    }&#10;&#10;    async function loadModel(variant) {&#10;  // Ukryj welcome screen przy wyborze krzesła&#10;  const welcomeScreen = document.getElementById('welcome-screen');&#10;  if (welcomeScreen) {&#10;    welcomeScreen.style.display = 'none';&#10;  }&#10;  &#10;  if (currentModelContainer) {&#10;    viewer.scene.remove(currentModelContainer);&#10;    if (typeof currentModelContainer.dispose === 'function') currentModelContainer.dispose();&#10;  }&#10;  if (currentLegModel) {&#10;    viewer.scene.remove(currentLegModel);&#10;    if (typeof currentLegModel.dispose === 'function') currentLegModel.dispose();&#10;  }&#10;  currentModelContainer = null;&#10;  currentLegModel = null;&#10;  selectedLeg = null;&#10;  selectedMaterials = {};&#10;&#10;  document.getElementById('model-loader').style.display = 'flex';&#10;&#10;  try {&#10;    const modelPath = `chairs/${variant.Nazwa}.glb`;&#10;    selectedChair = variant;&#10;&#10;    // Załaduj kubełek&#10;    currentModelContainer = await loadModelWithFreshness(modelPath, viewer, { autoCenter: true });&#10;&#10;    // Jeśli kubełek, to ewentualnie załaduj domyślne nogi&#10;    if (selectedChair.Grupa &amp;&amp; selectedChair.Grupa.toLowerCase() === 'kubełek') {&#10;      const chairBounds = new Box3().setFromObject(currentModelContainer);&#10;      currentModelContainer.position.y -= chairBounds.min.y;&#10;&#10;      const legsVariants = allData.filter(d =&gt; d.Grupa.toLowerCase() === 'nogi');&#10;      const defaultLeg = legsVariants.find(l =&gt; l.Nazwa.toLowerCase().includes('regularne')) || legsVariants[0];&#10;&#10;      if (defaultLeg) {&#10;        await setLegModel(defaultLeg);&#10;      }&#10;&#10;      document.getElementById('legs-section').style.display = 'block';&#10;      activateLegsTabAndShowMaterials();&#10;    } else {&#10;      document.getElementById('legs-section').style.display = 'none';&#10;      if (currentLegModel) {&#10;        viewer.scene.remove(currentLegModel);&#10;        currentLegModel = null;&#10;        selectedLeg = null;&#10;      }&#10;    }&#10;&#10;    // ✅ Dopiero teraz chowamy loader&#10;    // ✅ Eleganckie ukrycie z fade-out&#10;document.getElementById('model-loader').classList.add('fade-out');&#10;setTimeout(() =&gt; {&#10;  document.getElementById('model-loader').style.display = 'none';&#10;  document.getElementById('model-loader').classList.remove('fade-out');&#10;}, 500);&#10;&#10;&#10;    // Pokaż dolny pasek narzędzi&#10;    const toolbar = document.getElementById('bottom-toolbar');&#10;    toolbar.classList.add('visible');&#10;    toolbar.style.display = 'flex';&#10;&#10;    // Pokaż panel konfiguracji&#10;    const configOverview = document.getElementById('config-overview');&#10;    if (configOverview) {&#10;      configOverview.style.display = 'block';&#10;      configOverview.classList.remove('hidden');&#10;    }&#10;&#10;    renderPartButtons();&#10;    userInteracted = true;&#10;    hideDimensions();&#10;&#10;    // Pokaż sekcję materiałów nóg&#10;    document.getElementById('materials-section').style.display = 'block';&#10;&#10;    // Wyrenderuj kafelki materiałów nóg&#10;    const legsMaterials = allData.filter(d =&gt; d.Grupa.toLowerCase() === 'nogi');&#10;    renderOptions('materials-thumbnails', legsMaterials, (item) =&gt; {&#10;      setLegMaterial(item);&#10;    });&#10;&#10;    setCameraView(globalCameraTargetPosition);&#10;    enforceZoomLimits();&#10;    updateUI();&#10;    showScreen('config');&#10;&#10;  } catch (e) {&#10;    console.error(`BŁĄD ładowania modelu: ${e.message}`, e);&#10;    // Ukryj loader nawet przy błędzie&#10;    document.getElementById('model-loader').style.display = 'none';&#10;  }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    function createLegMaterial(legData) {&#10;      const metalness = isNaN(parseFloat(legData.metalness)) ? 1 : parseFloat(legData.metalness);&#10;      const roughness = isNaN(parseFloat(legData.roughness)) ? 0.1 : parseFloat(legData.roughness);&#10;      const color = legData.color || '#FFFFFF';&#10;&#10;      return new THREE.MeshStandardMaterial({&#10;        color: new THREE.Color(color),&#10;        metalness: metalness,&#10;        roughness: roughness,&#10;      });&#10;    }&#10;    &#10;    function czyNogaPasujeDoKubełka(nogaVariant, kubelekNazwa) {&#10;  const zgodneKubełki = (nogaVariant.DlaKubełka || '')&#10;    .toLowerCase()&#10;    .split(',')&#10;    .map(k =&gt; k.trim());&#10;  return zgodneKubełki.includes(kubelekNazwa.toLowerCase());&#10;}&#10;&#10;&#10;    async function setLegModel(variant) {&#10;  userInteracted = true;&#10;  console.log(&quot;Wywołanie setLegModel dla wariantu:&quot;, variant);&#10;&#10;  // ✅ Sprawdzenie zgodności kubełka z wariantem nóg&#10;  if (selectedChair &amp;&amp; selectedChair.Grupa.toLowerCase() === 'kubełek') {&#10;    const zgodneKubełki = (variant.DlaKubełka || '').toLowerCase().split(',').map(k =&gt; k.trim());&#10;    const nazwaKubełka = selectedChair.Nazwa?.toLowerCase();&#10;    if (!zgodneKubełki.includes(nazwaKubełka)) {&#10;      console.warn(`❌ Wariant nóg &quot;${variant.Nazwa}&quot; nie pasuje do kubełka &quot;${selectedChair.Nazwa}&quot;`);&#10;      return;&#10;    }&#10;  }&#10;&#10;  // Pokaż loader podczas ładowania nóg&#10;  showModelLoader('Ładowanie nóg...');&#10;&#10;      console.log(&quot;Wywołanie setLegModel dla wariantu:&quot;, variant);&#10;      const oldLegs = currentLegModel;&#10;      try {&#10;        const modelPath = `legs/${variant.Nazwa}.glb`;&#10;        console.log(&quot;Ładuję model nóg z ścieżki:&quot;, modelPath);&#10;        const newLegs = await loadModelWithFreshness(modelPath, viewer, { autoCenter: false });&#10;&#10;&#10;        const legBounds = new Box3().setFromObject(newLegs);&#10;        const legHeight = legBounds.max.y - legBounds.min.y;&#10;&#10;        if (currentModelContainer &amp;&amp; selectedChair) {&#10;          if (selectedChair.Grupa.toLowerCase() === 'kubełek') {&#10;            let height = parseFloat(variant.height) || legHeight;&#10;            newLegs.position.y = -height;&#10;            currentModelContainer.position.y = 0;&#10;          } else {&#10;            currentModelContainer.position.y = legHeight + VERTICAL_OFFSET;&#10;            newLegs.position.y = 0;&#10;          }&#10;        }&#10;&#10;        if (oldLegs) {&#10;          viewer.scene.remove(oldLegs);&#10;          if (typeof oldLegs.dispose === 'function') oldLegs.dispose();&#10;        }&#10;        viewer.scene.add(newLegs);&#10;        currentLegModel = newLegs;&#10;        selectedLeg = variant;&#10;        renderFilteredMaterialOptions('legs'); // ⬅️ to odświeża widok kafelków materiałów nóg&#10;        updateMaterialTiles(); // ⬅️ MUSI być tutaj!&#10;&#10;&#10;        // Odśwież listę nóg, żeby podświetlić wybrany wariant&#10;        const legs = allData&#10;  .filter(d =&gt; d.Grupa.toLowerCase() === 'nogi')&#10;  .filter(noga =&gt; {&#10;    if (!selectedChair || selectedChair.Grupa.toLowerCase() !== 'kubełek') return true;&#10;    return czyNogaPasujeDoKubełka(noga, selectedChair.Nazwa);&#10;  });&#10;&#10;&#10;&#10;// Ustaw pierwszą nogę jeśli jeszcze żadna nie została wybrana&#10;if (!selectedLeg &amp;&amp; legs.length &gt; 0) {&#10;  setLegModel(legs[0]); // automatycznie ustawia pierwszą pasującą nogę&#10;}&#10;    renderOptions('legs-thumbnails', legs, item =&gt; {&#10;  setLegModel(item);&#10;});    &#10;&#10;&#10;&#10;        updateSummary();&#10;&#10;        // Wymuszenie odświeżenia sceny&#10;        if (viewer.render) viewer.render();&#10;        &#10;        // Ukryj loader po udanym załadowaniu&#10;        hideModelLoader();&#10;      } catch (e) {&#10;        console.error(`BŁĄD ładowania nóg: ${e.message}`, e);&#10;        // Ukryj loader również przy błędzie&#10;        hideModelLoader();&#10;      }&#10;    }&#10;&#10;&#10;&#10;    let forceRenderInterval;&#10;&#10;    function triggerSceneRefresh() {&#10;      if (viewer?.camera) {&#10;        viewer.camera.position.x += 0.00001;&#10;        viewer.camera.zoom += 0.0001; // ⬅️ mikroskopijny zoom&#10;        viewer.camera.updateProjectionMatrix();&#10;      }&#10;      if (viewer?.renderer?.info) {&#10;        viewer.renderer.info.reset();&#10;      }&#10;      if (viewer?.render) viewer.render();&#10;    }&#10;&#10;&#10;    function startForceRender(duration = 2000) {&#10;      clearInterval(forceRenderInterval);&#10;      forceRenderInterval = setInterval(() =&gt; {&#10;        triggerSceneRefresh();&#10;      }, 100);&#10;&#10;      setTimeout(() =&gt; {&#10;        clearInterval(forceRenderInterval);&#10;        console.log(&quot; Zakończono wymuszone odświeżanie&quot;);&#10;      }, duration);&#10;    }&#10;&#10;&#10;&#10;    const textureLoader = new TextureLoader();&#10;&#10;    &#10;&#10;    if (&#10;      selectedChair?.Grupa?.toLowerCase() === 'kubełek' &amp;&amp;&#10;      variant.TargetMeshOrModel?.toLowerCase().includes('legs') &amp;&amp;&#10;      variant.WariantModelu&#10;    ) {&#10;      //  dla kubełków z podmianą nóg — zmień model nóg&#10;      setLegModel(variant);&#10;    } else if (&#10;      selectedChair &amp;&amp;&#10;      (selectedChair.Grupa.toLowerCase() !== 'kubełek' || !variant.WariantModelu)&#10;    ) {&#10;      //  dla pozostałych krzeseł bez wariantów nóg — wyświetl materiały nóg do wyboru&#10;      showLegMaterialsForSimpleChairs(selectedChair);&#10;    }&#10;&#10;    // Funkcje preloadera – używamy tego samego model-loader co dla modeli i nóg&#10;function showPreloader() {&#10;  showModelLoader('Ładowanie materiału...');&#10;}&#10;function hidePreloader() {&#10;  hideModelLoader();&#10;}&#10;&#10;// Uniwersalne funkcje loadera z zmiennym tekstem&#10;function showModelLoader(text = 'Ładowanie modelu...') {&#10;  const el = document.getElementById('model-loader');&#10;  if (el) {&#10;    const textEl = el.querySelector('p');&#10;    if (textEl) textEl.textContent = text;&#10;    el.style.display = 'flex';&#10;  }&#10;}&#10;&#10;function hideModelLoader() {&#10;  const el = document.getElementById('model-loader');&#10;  if (el) {&#10;    el.classList.add('fade-out');&#10;    setTimeout(() =&gt; {&#10;      el.style.display = 'none';&#10;      el.classList.remove('fade-out');&#10;      // Przywróć oryginalny tekst&#10;      const textEl = el.querySelector('p');&#10;      if (textEl) textEl.textContent = 'Ładowanie modelu...';&#10;    }, 500);&#10;  }&#10;}&#10;&#10;// Funkcje loadera materiałów&#10;function showMaterialLoader(text = 'Ładowanie materiału...') {&#10;  const el = document.getElementById('material-preloader');&#10;  if (el) {&#10;    const textEl = el.querySelector('div');&#10;    if (textEl) textEl.textContent = text;&#10;    el.style.display = 'flex';&#10;  }&#10;}&#10;&#10;function hideMaterialLoader() {&#10;  const el = document.getElementById('material-preloader');&#10;  if (el) {&#10;    el.style.display = 'none';&#10;  }&#10;}&#10;&#10;    function applyMaterialToMesh(variant, forcedMeshName) {&#10;      const clone = { ...variant };&#10;      clone.TargetMeshOrModel = forcedMeshName;&#10;      console.log(` Przypisano '${clone.Nazwa}' tylko do mesh '${forcedMeshName}'`);&#10;      applyMaterial(clone);&#10;    }&#10;&#10;    // Funkcja, która wyświetla kafelki materiałów nóg dla prostych krzeseł&#10;    function showLegMaterialsForSimpleChairs(chair) {&#10;      const legsMaterialsContainer = document.getElementById('legs-thumbnails');&#10;      // Usuń tylko kafelki materiałów (pozostaw warianty nóg)&#10;      legsMaterialsContainer.querySelectorAll('.material-tile').forEach(tile =&gt; tile.remove());&#10;&#10;&#10;      // Pobierz materiały nóg dla danego krzesła (przykład, wymaga dostosowania)&#10;      const materials = getMaterialsForLegs(chair.defaultLegsId || 'default');&#10;&#10;      materials.forEach(mat =&gt; {&#10;        const tile = document.createElement('div');&#10;        tile.className = 'material-tile';&#10;        tile.textContent = mat.Nazwa;&#10;        tile.style.backgroundImage = `url(${mat.Obrazek || 'fallback.png'})`;&#10;        tile.onclick = () =&gt; {&#10;          onLegVariantClick(mat.DlaModeliNóg || mat.Nazwa);&#10;          applyLegMaterial(mat);&#10;        };&#10;&#10;        legsMaterialsContainer.appendChild(tile);&#10;      });&#10;    }&#10;&#10;&#10;    &#10;&#10;&#10;&#10;// DOBRE PROGRESYWNE ŁADOWANIE MATERIAŁÓW!!!&#10;&#10;async function applyMaterial(variant) {&#10;  showMaterialLoader('Ładowanie materiału...');&#10;  try {&#10;    console.log(' variant:', variant);&#10;&#10;    if (!currentModelContainer) {&#10;      console.warn('currentModelContainer jest null lub undefined');&#10;      hideMaterialLoader();&#10;      return;&#10;    }&#10;&#10;    if (!variant.TargetMeshOrModel) {&#10;      console.warn('Brak TargetMeshOrModel w wariancie');&#10;      hideMaterialLoader();&#10;      return;&#10;    }&#10;&#10;    const targetNames = variant.TargetMeshOrModel.split(',').map(name =&gt; name.trim());&#10;    const isHex = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(variant.Color || variant.Wartość);&#10;    const folderPath = (!isHex &amp;&amp; variant.Wartość.startsWith('textures/')) ? variant.Wartość : `textures/${variant.Wartość}`;&#10;&#10;    // Progresywna obsługa wielu meshów - loader znika dopiero po wszystkich meshach&#10;    const meshPromises = targetNames.map(async (targetName) =&gt; {&#10;      let container;&#10;      if (targetName.toLowerCase() === 'legs') {&#10;        if (selectedChair?.Grupa?.toLowerCase() === 'krzesło' || !currentLegModel) {&#10;          container = currentModelContainer;&#10;        } else {&#10;          container = currentLegModel;&#10;        }&#10;      } else {&#10;        container = currentModelContainer;&#10;      }&#10;&#10;      let targetObject = null;&#10;      container?.traverse(obj =&gt; {&#10;        if (&#10;          obj.isMesh &amp;&amp;&#10;          obj.name &amp;&amp;&#10;          obj.name.toLowerCase().trim() === targetName.toLowerCase().trim()&#10;        ) {&#10;          targetObject = obj;&#10;        }&#10;      });&#10;&#10;      if (!targetObject) {&#10;        console.warn(`❌ Mesh '${targetName}' nie znaleziony w modelu`);&#10;        return;&#10;      }&#10;&#10;      if (!targetObject.material) {&#10;        console.warn(`⚠️ Mesh '${targetName}' nie ma materiału.`);&#10;        return;&#10;      }&#10;&#10;      // Funkcja do bezpiecznego ładowania tekstury (zwraca null, jeśli nie uda się załadować)&#10;      async function loadTextureSafe(url) {&#10;        try {&#10;          const tex = await textureLoader.loadAsync(url);&#10;          tex.magFilter = THREE.LinearFilter;&#10;          tex.minFilter = THREE.LinearMipMapLinearFilter;&#10;          tex.anisotropy = viewer?.renderer?.capabilities?.getMaxAnisotropy?.() || 4;&#10;          tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;          tex.encoding = THREE.sRGBEncoding;&#10;          tex.offset.set(0, 0);&#10;          tex.repeat.set(1, 1);&#10;          tex.needsUpdate = true;&#10;          return tex;&#10;        } catch {&#10;          return null;&#10;        }&#10;      }&#10;&#10;      if (isHex) {&#10;        // Jeśli kolor HEX – podmień od razu (nie ma tekstur)&#10;        const material = targetObject.material.clone();&#10;        material.color.set(variant.Color || variant.Wartość);&#10;        material.map = null;&#10;        material.normalMap = null;&#10;        material.roughnessMap = null;&#10;        material.metalnessMap = null;&#10;        material.needsUpdate = true;&#10;        targetObject.material = material;&#10;        viewer.render?.();&#10;      } else if (folderPath &amp;&amp; !/\.(jpg|jpeg|png|gif)$/i.test(folderPath)) {&#10;        // --- PROGRESYWNE ŁADOWANIE ---&#10;&#10;        // 1. Najpierw załaduj basecolor&#10;        let baseColorTex = null;&#10;        try {&#10;          baseColorTex = await loadTextureSafe(`${folderPath}/baseColor.jpg`);&#10;        } catch (err) {&#10;          console.warn(&quot;Błąd ładowania baseColor:&quot;, err);&#10;        }&#10;&#10;        // 2. Skopiuj materiał i podepnij basecolor (lub null)&#10;        const material = targetObject.material.clone();&#10;        material.map = baseColorTex || null;&#10;        material.color.set(0xffffff);&#10;        material.normalMap = null;&#10;        material.roughnessMap = null;&#10;        material.metalnessMap = null;&#10;        material.needsUpdate = true;&#10;&#10;        // 3. Metalness i roughness z wariantu&#10;        function parseValue(val, fallback) {&#10;          const raw = (val || '')&#10;            .toString()&#10;            .trim()&#10;            .replace(/['&quot;]/g, '')&#10;            .replace(',', '.');&#10;          const parsed = parseFloat(raw);&#10;          return !isNaN(parsed) ? parsed : fallback;&#10;        }&#10;        material.metalness = parseValue(variant.Metalness, 0);&#10;        material.roughness = parseValue(variant.Roughness, 0.814);&#10;&#10;        // 4. Podmień materiał dopiero teraz (dopiero po basecolor)&#10;        targetObject.material = material;&#10;        if (targetObject.geometry?.computeVertexNormals) {&#10;          targetObject.geometry.computeVertexNormals();&#10;        }&#10;        viewer.render?.();&#10;&#10;        // 6. Progresywnie doładowuj pozostałe mapy i podmieniaj &quot;w locie&quot;&#10;        loadTextureSafe(`${folderPath}/normal.jpg`).then(tex =&gt; {&#10;          if (tex) {&#10;            tex.encoding = THREE.LinearEncoding;&#10;            tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;            tex.offset.set(0, 0);&#10;            tex.repeat.set(1.001, 1.001);&#10;            material.normalMap = tex;&#10;            material.needsUpdate = true;&#10;            targetObject.material = material;&#10;            viewer.render?.();&#10;          }&#10;        });&#10;&#10;        loadTextureSafe(`${folderPath}/roughness.jpg`).then(tex =&gt; {&#10;          if (tex) {&#10;            tex.encoding = THREE.LinearEncoding;&#10;            tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;            tex.offset.set(0, 0);&#10;            tex.repeat.set(1.001, 1.001);&#10;            material.roughnessMap = tex;&#10;            material.needsUpdate = true;&#10;            targetObject.material = material;&#10;            viewer.render?.();&#10;          }&#10;        });&#10;&#10;        loadTextureSafe(`${folderPath}/metallic.jpg`).then(tex =&gt; {&#10;          if (tex) {&#10;            tex.encoding = THREE.LinearEncoding;&#10;            tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;            tex.offset.set(0, 0);&#10;            tex.repeat.set(1.001, 1.001);&#10;            material.metalnessMap = tex;&#10;            material.needsUpdate = true;&#10;            targetObject.material = material;&#10;            viewer.render?.();&#10;          }&#10;        });&#10;&#10;        console.log(`✅ Progresywne ładowanie tekstur na '${targetName}'`);&#10;        console.log(` Metalness=${material.metalness}, Roughness=${material.roughness}`);&#10;      }&#10;&#10;      // Zapamiętanie wyboru i odświeżenie sceny&#10;      selectedMaterials[targetName] = variant;&#10;      if (targetName === 'legs' || targetName === 'legs_material') {&#10;        selectedMaterials['legs_material'] = variant;&#10;      }&#10;    });&#10;&#10;    await Promise.all(meshPromises); // czekaj aż wszystkie meshe ogarną materiał&#10;hideMaterialLoader();&#10;    // ️ Automatycznie przypisz Folder do eksportu&#10;    Object.entries(selectedMaterials).forEach(([key, mat]) =&gt; {&#10;      if (!mat.Folder &amp;&amp; typeof mat.Wartość === 'string') {&#10;        const parts = mat.Wartość.split('/');&#10;        const last = parts[parts.length - 1];&#10;        if (last &amp;&amp; texturesFilesByFolder?.[last]) {&#10;          mat.Folder = last;&#10;          console.log(` Dodano Folder='${last}' do '${key}'`);&#10;        }&#10;      }&#10;    });&#10;&#10;    viewer.scene.traverse(obj =&gt; {&#10;      if (obj.isMesh &amp;&amp; obj.material) {&#10;        obj.material.needsUpdate = true;&#10;      }&#10;    });&#10;&#10;    if (viewer?.camera) {&#10;      viewer.camera.position.x += 0.00001;&#10;      viewer.camera.updateProjectionMatrix();&#10;    }&#10;&#10;    if (viewer?.render) viewer.render();&#10;&#10;    updateSummary();&#10;  } catch (e) {&#10;    hideMaterialLoader();&#10;    console.error(&quot;Błąd w applyMaterial:&quot;, e);&#10;  }&#10;}&#10;&#10;function applyMaterialToSpecificMesh(variant, meshKey) {&#10;  const clone = { ...variant };&#10;  clone.TargetMeshOrModel = meshKey;&#10;  console.log(` Przypisano '${variant.Nazwa}' tylko do mesh '${meshKey}'`);&#10;  applyMaterial(clone);&#10;}&#10;&#10;// DOBRE PROGRESYWNE ŁADOWANIE MATERIAŁÓW!!!&#10;&#10;&#10;&#10;&#10;&#10;      function renderOptions(containerId, items, onSelect, isInteractive = true) {&#10;        const container = document.getElementById(containerId);&#10;        if (!container) return;&#10;        container.innerHTML = '';&#10;        &#10;        // Zastosuj filtr wyszukiwania jeśli jest aktywny&#10;        const filteredItems = currentSearchFilter &#10;          ? items.filter(matchesSearchFilter)&#10;          : items;&#10;          &#10;        console.log(` Rendering ${filteredItems.length}/${items.length} items in ${containerId} with filter: &quot;${currentSearchFilter}&quot;`);&#10;        &#10;        filteredItems.forEach((item, index) =&gt; {&#10;          const wrapper = document.createElement('div');&#10;          wrapper.className = 'thumbnail-wrapper';&#10;          const button = document.createElement('div');&#10;          button.className = 'thumbnail';&#10;          button.title = item.Nazwa;&#10;&#10;          // PODŚWIETLENIE WYBRANEGO&#10;          let isSelected = false;&#10;          if (containerId === 'material-options') {&#10;            if (item.Grupa &amp;&amp; item.Grupa.toLowerCase() === 'materiały_nóg') {&#10;              isSelected = selectedMaterials['legs_material'] &amp;&amp; selectedMaterials['legs_material'].Nazwa === item.Nazwa;&#10;            } else if (item.TargetMeshOrModel) {&#10;              const targets = item.TargetMeshOrModel.split(',').map(t =&gt; t.trim());&#10;              isSelected = targets.some(t =&gt; selectedMaterials[t] &amp;&amp; selectedMaterials[t].Nazwa === item.Nazwa);&#10;            }&#10;          } else if (containerId === 'legs-thumbnails') {&#10;            isSelected = selectedLeg &amp;&amp; selectedLeg.Nazwa === item.Nazwa;&#10;          }&#10;          if (isSelected) button.classList.add('selected');&#10;&#10;          if (isInteractive) {&#10;            button.addEventListener('click', () =&gt; {&#10;              onSelect(item);&#10;              container.querySelectorAll('.thumbnail').forEach(t =&gt; t.classList.remove('selected'));&#10;              button.classList.add('selected');&#10;            });&#10;          }&#10;          const img = document.createElement('img');&#10;          img.src = item.Obrazek &amp;&amp; item.Obrazek.length &gt; 4 ? item.Obrazek : 'icons/placeholder.svg';&#10;          img.alt = item.Nazwa;&#10;          button.appendChild(img);&#10;          const caption = document.createElement('div');&#10;          caption.className = 'thumbnail-caption';&#10;          caption.textContent = item.Nazwa;&#10;          wrapper.appendChild(button);&#10;          wrapper.appendChild(caption);&#10;          container.appendChild(wrapper);&#10;        });&#10;      }&#10;&#10;&#10;&#10;&#10;&#10;      function renderFilteredMaterialOptions(targetMesh) {&#10;  if (!selectedChair || !selectedChair.Grupa) return;&#10;&#10;  const grupa = selectedChair.Grupa.toLowerCase();&#10;&#10;  function isAllowedForGroup(entryGroupDocelowa) {&#10;    if (!entryGroupDocelowa) return false;&#10;    const values = entryGroupDocelowa.toLowerCase().split(',').map(s =&gt; s.trim());&#10;    return values.includes('wszystkie') || values.includes(grupa) || values.includes('kubełek, krzesło');&#10;  }&#10;&#10;  let materialOptions = [];&#10;&#10;  const isLegs = targetMesh === 'legs' || targetMesh === 'legs_material';&#10;&#10;  if (isLegs) {&#10;    materialOptions = allData.filter(d =&gt;&#10;      d.Grupa?.toLowerCase() === 'materiały_nóg' &amp;&amp;&#10;      isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;      d.Visible?.toLowerCase() !== 'false'&#10;    );&#10;&#10;    if (selectedLeg &amp;&amp; selectedLeg.Typ) {&#10;      materialOptions = materialOptions.filter(mat =&gt;&#10;        !mat.Typ || mat.Typ.toLowerCase().trim() === selectedLeg.Typ.toLowerCase().trim()&#10;      );&#10;    }&#10;&#10;    if (selectedLeg &amp;&amp; selectedLeg.Nazwa) {&#10;      const currentLegName = selectedLeg.Nazwa.toLowerCase().trim();&#10;      materialOptions = materialOptions.filter(mat =&gt; {&#10;        const allowedLegs = mat.DlaModeluNóg&#10;          ? mat.DlaModeluNóg.split(',').map(s =&gt; s.trim().toLowerCase())&#10;          : [];&#10;        return allowedLegs.length === 0 || allowedLegs.includes(currentLegName);&#10;      });&#10;    }&#10;&#10;    if (selectedChair &amp;&amp; selectedChair.Nazwa) {&#10;  const currentChairName = selectedChair.Nazwa.toLowerCase().trim();&#10;  materialOptions = materialOptions.filter(mat =&gt; {&#10;    // ⛔️ Jeśli pole DlaKrzesła jest puste → odrzucamy&#10;    if (!mat.DlaKrzesła || mat.DlaKrzesła.trim().length === 0) return false;&#10;&#10;    const allowedChairs = mat.DlaKrzesła&#10;      .split(',')&#10;      .map(s =&gt; s.trim().toLowerCase());&#10;&#10;    return allowedChairs.includes(currentChairName);&#10;  });&#10;}&#10;&#10;&#10;&#10;    const groupedByCollection = {};&#10;    materialOptions.forEach(mat =&gt; {&#10;      const key = mat.Kolekcja?.trim() || 'Inne';&#10;      if (!groupedByCollection[key]) groupedByCollection[key] = [];&#10;      groupedByCollection[key].push(mat);&#10;    });&#10;&#10;    renderCollectionsAndMaterials(groupedByCollection, 'legs');&#10;    return;&#10;  }&#10;&#10;  //  TKANINY (siedzisko, oparcie itd.)&#10;  materialOptions = allData.filter(d =&gt;&#10;    d.Grupa?.toLowerCase() === 'tkanina' &amp;&amp;&#10;    d.TargetMeshOrModel &amp;&amp;&#10;    d.TargetMeshOrModel.split(',').map(t =&gt; t.trim()).includes(targetMesh) &amp;&amp;&#10;    isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;    d.Visible?.toLowerCase() !== 'false'&#10;  );&#10;&#10;  // Zastosuj filtr wyszukiwania do materiałów nóg&#10;  if (currentSearchFilter &amp;&amp; isLegs) {&#10;    materialOptions = allData.filter(d =&gt;&#10;      d.Grupa?.toLowerCase() === 'materiały_nóg' &amp;&amp;&#10;      isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;      d.Visible?.toLowerCase() !== 'false'&#10;    ).filter(matchesSearchFilter);&#10;    &#10;    console.log(` Filtered leg materials to ${materialOptions.length} for filter: &quot;${currentSearchFilter}&quot;`);&#10;    &#10;    // Zastosuj pozostałe filtry nóg&#10;    if (selectedLeg &amp;&amp; selectedLeg.Typ) {&#10;      materialOptions = materialOptions.filter(mat =&gt;&#10;        !mat.Typ || mat.Typ.toLowerCase().trim() === selectedLeg.Typ.toLowerCase().trim()&#10;      );&#10;    }&#10;&#10;    if (selectedLeg &amp;&amp; selectedLeg.Nazwa) {&#10;      const currentLegName = selectedLeg.Nazwa.toLowerCase().trim();&#10;      materialOptions = materialOptions.filter(mat =&gt; {&#10;        const allowedLegs = mat.DlaModeluNóg&#10;          ? mat.DlaModeluNóg.split(',').map(s =&gt; s.trim().toLowerCase())&#10;          : [];&#10;        return allowedLegs.length === 0 || allowedLegs.includes(currentLegName);&#10;      });&#10;    }&#10;&#10;    if (selectedChair &amp;&amp; selectedChair.Nazwa) {&#10;      const currentChairName = selectedChair.Nazwa.toLowerCase().trim();&#10;      materialOptions = materialOptions.filter(mat =&gt; {&#10;        if (!mat.DlaKrzesła || mat.DlaKrzesła.trim().length === 0) return false;&#10;        const allowedChairs = mat.DlaKrzesła.split(',').map(s =&gt; s.trim().toLowerCase());&#10;        return allowedChairs.includes(currentChairName);&#10;      });&#10;    }&#10;&#10;    const groupedByCollection = {};&#10;    materialOptions.forEach(mat =&gt; {&#10;      const key = mat.Kolekcja?.trim() || 'Inne';&#10;      if (!groupedByCollection[key]) groupedByCollection[key] = [];&#10;      groupedByCollection[key].push(mat);&#10;    });&#10;&#10;    renderCollectionsAndMaterials(groupedByCollection, 'legs');&#10;    return;&#10;  }&#10;&#10;  //  TKANINY (siedzisko, oparcie itd.)&#10;  materialOptions = allData.filter(d =&gt;&#10;    d.Grupa?.toLowerCase() === 'tkanina' &amp;&amp;&#10;    d.TargetMeshOrModel &amp;&amp;&#10;    d.TargetMeshOrModel.split(',').map(t =&gt; t.trim()).includes(targetMesh) &amp;&amp;&#10;    isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;    d.Visible?.toLowerCase() !== 'false'&#10;  );&#10;&#10;  // Zastosuj filtr wyszukiwania jeśli jest aktywny&#10;  if (currentSearchFilter) {&#10;    materialOptions = materialOptions.filter(matchesSearchFilter);&#10;    console.log(` Filtered materials from ${allData.length} to ${materialOptions.length} for filter: &quot;${currentSearchFilter}&quot;`);&#10;  }&#10;&#10;  const groupedByCollection = {};&#10;  materialOptions.forEach(mat =&gt; {&#10;    const key = mat.Kolekcja?.trim() || 'Inne';&#10;    if (!groupedByCollection[key]) groupedByCollection[key] = [];&#10;    groupedByCollection[key].push(mat);&#10;  });&#10;&#10;  renderCollectionsAndMaterials(groupedByCollection, targetMesh);&#10;}&#10;&#10;     &#10;&#10;&#10;&#10;&#10;// ✅ Po wygenerowaniu — otwórz ostatnio klikniętą kolekcję&#10;if (lastOpenedCollection) {&#10;  const toOpen = container.querySelector(`details[data-kolekcja=&quot;${lastOpenedCollection}&quot;]`);&#10;  if (toOpen) toOpen.open = true;&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      function activateLegsTabAndShowMaterials() {&#10;        // Podświetl zakładkę &quot;Nogi&quot; po data-key&#10;        const partTabs = document.querySelectorAll('#part-tabs .thumbnail');&#10;        partTabs.forEach(tab =&gt; tab.classList.remove('selected'));&#10;        partTabs.forEach(tab =&gt; {&#10;          if (tab.dataset.key === 'legs') {&#10;            tab.classList.add('selected');&#10;          }&#10;        });&#10;&#10;        // Pokaż sekcję materiałów i wyświetl wszystkie materiały nóg&#10;        document.getElementById('materials-section').style.display = 'block';&#10;        renderFilteredMaterialOptions('legs');&#10;&#10;      }&#10;&#10;      function renderPartTabs() {&#10;        const container = document.getElementById('part-tabs');&#10;        container.innerHTML = '';&#10;        // Pobierz unikalne elementy do wyboru&#10;        const allTargets = allData.filter(d =&gt; d.TargetMeshOrModel)&#10;          .flatMap(d =&gt; d.TargetMeshOrModel.split(',').map(t =&gt; t.trim()));&#10;        const uniqueTargets = [...new Set(allTargets)];&#10;        if (uniqueTargets.length === 0) {&#10;          document.getElementById('parts-section').style.display = 'none';&#10;          return;&#10;        }&#10;        document.getElementById('parts-section').style.display = 'block';&#10;&#10;        // Mapowanie nazw technicznych na polskie&#10;        const POLISH_LABELS = {&#10;          seat: 'Siedzisko',&#10;          backseat_inside: 'Oparcie wew.',&#10;          backseat_outside: 'Oparcie zew.',&#10;          backseat: 'Siedzisko/Oparcie',&#10;          legs: 'Nogi'&#10;        };&#10;&#10;        renderOptions('part-tabs', uniqueTargets.map(name =&gt; {&#10;          const key = name.trim().toLowerCase();&#10;          return {&#10;            Nazwa: POLISH_LABELS[key] || name.trim(),&#10;            Obrazek: ELEMENT_ICONS[key] || 'icons/placeholder.svg',&#10;            _technicalKey: key&#10;          };&#10;        }), (item) =&gt; {&#10;          if (item._technicalKey === 'legs') {&#10;            activateLegsTabAndShowMaterials();&#10;          } else {&#10;            // Podświetl klikniętą zakładkę&#10;            const partTabs = document.querySelectorAll('#part-tabs .thumbnail');&#10;            partTabs.forEach(tab =&gt; tab.classList.remove('selected'));&#10;            partTabs.forEach(tab =&gt; {&#10;              if (tab.title &amp;&amp; tab.title.toLowerCase().includes(item.Nazwa.toLowerCase())) {&#10;                tab.classList.add('selected');&#10;              }&#10;            });&#10;            document.getElementById('materials-section').style.display = 'block';&#10;            renderFilteredMaterialOptions(item._technicalKey);&#10;          }&#10;        });&#10;      }&#10;&#10;      function updateUI() {&#10;        const backContainer = document.getElementById('back-to-models-container');&#10;        backContainer.innerHTML = '';&#10;        if (selectedChair &amp;&amp; (selectedChair.Obrazek || selectedChair.Image)) {&#10;          // Stwórz ramkę z ikonką i X&#10;          const btn = document.createElement('div');&#10;          btn.className = 'back-to-model-btn';&#10;          btn.title = 'Wróć do wyboru modelu';&#10;&#10;          // Ikonka modelu&#10;          const img = document.createElement('img');&#10;          img.src = selectedChair.Obrazek || selectedChair.Image;&#10;          img.alt = selectedChair.Nazwa;&#10;          btn.appendChild(img);&#10;&#10;          // Przycisk X w rogu&#10;          const xBtn = document.createElement('button');&#10;          xBtn.className = 'close-x';&#10;          xBtn.innerHTML = '&amp;times;';&#10;          xBtn.title = 'Wróć do wyboru modelu';&#10;          xBtn.onclick = (e) =&gt; {&#10;            e.stopPropagation();&#10;            showScreen('models');&#10;          };&#10;          btn.appendChild(xBtn);&#10;&#10;          // Kliknięcie w całą ramkę też wraca do wyboru modelu&#10;          btn.onclick = () =&gt; showScreen('models');&#10;&#10;          backContainer.appendChild(btn);&#10;        }&#10;&#10;        const legs = allData.filter(d =&gt; {&#10;  if (d.Grupa.toLowerCase() !== 'nogi') return false;&#10;  if (!selectedChair || selectedChair.Grupa.toLowerCase() !== 'kubełek') return true;&#10;  return czyNogaPasujeDoKubełka(d, selectedChair.Nazwa);&#10;});&#10;&#10;&#10;        renderOptions('legs-thumbnails', legs, item =&gt; {&#10;  setLegModel(item);&#10;});&#10;&#10;&#10;&#10;        // Sekcja nóg i materiały nóg – nogi tylko dla kubełków, materiały dla kubełków i krzeseł&#10;    if (selectedChair &amp;&amp; selectedChair.Grupa) {    &#10;          const grupa = selectedChair.Grupa.toLowerCase();&#10;&#10;          if (grupa === 'kubełek') {&#10;            console.log(&quot;Pokazuję nogi i materiały nóg dla kubełka&quot;);&#10;            document.getElementById('legs-section').style.display = 'block';&#10;            &#10;&#10;            // Ustaw pierwszą nogę jeśli jeszcze żadna nie została wybrana&#10;if (!selectedLeg &amp;&amp; legs.length &gt; 0) {&#10;  setLegModel(legs[0]); // automatycznie ustawia pierwszą pasującą nogę&#10;}&#10;&#10;renderOptions('legs-thumbnails', legs, item =&gt; {&#10;              setLegModel(item);&#10;            });&#10;&#10;            // Ukryj sekcję materiałów, pokaże się po kliknięciu w zakładkę&#10;            document.getElementById('materials-section').style.display = 'none';&#10;          } else if (grupa === 'krzesło') {&#10;            console.log(&quot;Ukrywam sekcję nóg dla krzesła&quot;);&#10;            document.getElementById('legs-section').style.display = 'none';&#10;&#10;            // Ukryj sekcję materiałów, pokaże się po kliknięciu w zakładkę&#10;            document.getElementById('materials-section').style.display = 'none';&#10;          } else {&#10;            console.log(&quot;Ukrywam sekcje nóg i materiałów&quot;);&#10;            document.getElementById('legs-section').style.display = 'none';&#10;            document.getElementById('materials-section').style.display = 'none';&#10;          }&#10;        } else {&#10;          console.log(&quot;Brak wybranego elementu lub grupy&quot;);&#10;          document.getElementById('legs-section').style.display = 'none';&#10;          document.getElementById('materials-section').style.display = 'none';&#10;        }&#10;&#10;        updateSummary();&#10;      }&#10;&#10;      const visibleData = allData.filter(d =&gt;&#10;        d.Visible?.toString().trim().length &gt; 0&#10;      );&#10;&#10;&#10;      async function loadDataFromSheet() {&#10;        const sheetId = '1lZMJ-4Qd0nDY-7Hl9iV-pJnZSTVzYiA-A3rDq_bC16U';&#10;        const sheetURL = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&amp;sheet=Baza Danych&amp;v=${new Date().getTime()}`;&#10;        try {&#10;          const response = await fetch(sheetURL + '?nocache=' + Date.now(), { cache: 'no-store' });&#10;&#10;          const csvText = await response.text();&#10;          const rows = csvText.trim().split('\n');&#10;          const headers = rows.shift().split(',').map(h =&gt; h.trim().replace(/&quot;/g, ''));&#10;          allData = rows.map(row =&gt; {&#10;            const values = row.match(/(&quot;.*?&quot;|[^&quot;,]+)(?=\s*,|\s*$)/g) || [];&#10;            const obj = {};&#10;            headers.forEach((header, index) =&gt; obj[header] = values[index]?.trim().replace(/&quot;/g, '') || '');&#10;            return obj;&#10;          }).filter(item =&gt; item.Visible?.toLowerCase() !== 'false');&#10;&#10;          // Renderuj przyciski kategorii&#10;          renderCategoryButtons();&#10;          &#10;          // Renderuj promocje na starcie&#10;          renderPromotions();&#10;          &#10;          showScreen('models');&#10;&#10;          const hdrEntries = allData.filter(d =&gt; d.HDR &amp;&amp; d.HDRIcon);&#10;          renderHDROptions(hdrEntries);&#10;&#10;&#10;&#10;&#10;&#10;          // Pokaż loader&#10;document.getElementById('custom-loader').style.display = 'flex';&#10;document.getElementById('app').style.visibility = 'hidden';&#10;&#10;// Usuń poprzedni model&#10;if (currentModelContainer) {&#10;  viewer.scene.remove(currentModelContainer);&#10;  if (typeof currentModelContainer.dispose === 'function') currentModelContainer.dispose();&#10;}&#10;&#10;// Załaduj nowy model&#10;currentModelContainer = await viewer.load('chairs/Ava.glb', { autoCenter: true });&#10;setCameraView(new Vector3(0, 0, 0));&#10;&#10;// Resetuj wybory&#10;selectedChair = null;&#10;selectedLeg = null;&#10;selectedMaterials = {};&#10;userInteracted = false;&#10;&#10;// Zaktualizuj podsumowanie&#10;updateSummary();&#10;&#10;// Pokaż scenę i ukryj loader&#10;document.getElementById('custom-loader').classList.add('fade-out');&#10;setTimeout(() =&gt; {&#10;  document.getElementById('custom-loader').style.display = 'none';&#10;  document.getElementById('app').style.visibility = 'visible';&#10;}, 500);&#10;&#10;// Pokaż toolbar&#10;const toolbar = document.getElementById('bottom-toolbar');&#10;if (toolbar) {&#10;  toolbar.style.display = 'flex';&#10;  toolbar.classList.add('visible');&#10;}&#10;&#10;&#10;        } catch (e) { console.error(&quot;Błąd ładowania danych:&quot;, e); document.body.innerHTML = `Błąd ładowania danych: ${e.message}`; }&#10;      }&#10;&#10;      document.getElementById('hdr-toggle')?.addEventListener('click', (e) =&gt; {&#10;        e.stopPropagation();&#10;        const panel = document.getElementById('hdr-panel');&#10;        panel.classList.toggle('hidden');&#10;        document.getElementById('hdr-panel').style.display = 'block';&#10;&#10;      });&#10;&#10;&#10;setDefaultMaterialsFromSheet();&#10;updateSummary();&#10;&#10;&#10;&#10;&#10;      function updateSummary() {&#10;        const overviewPanel = document.getElementById('config-overview');&#10;        const overviewIconsDiv = document.getElementById(&quot;overview-icons&quot;);&#10;        const overviewDetailsDiv = document.getElementById(&quot;overview-details&quot;);&#10;        const overviewTotalPriceSpan = document.getElementById(&quot;overview-total-price&quot;);&#10;&#10;        overviewIconsDiv.innerHTML = '';&#10;        overviewDetailsDiv.innerHTML = '';&#10;        overviewTotalPriceSpan.textContent = `0.00 PLN`;&#10;&#10;        // Jeśli nie było interakcji, nie pokazuj szczegółów&#10;        if (!userInteracted) {&#10;          overviewPanel.style.display = 'block';&#10;          return;&#10;        }&#10;&#10;        // Kolejność elementów do podsumowania&#10;        const partOrder = ['seat', 'backseat_inside', 'backseat_outside', 'legs_material', 'backseat'];&#10;        const partLabels = ['Siedzisko', 'Oparcie wew.', 'Oparcie zew.', 'Nogi', 'Siedzisko/Oparcie'];&#10;&#10;        // Ikonka modelu&#10;        if (userInteracted &amp;&amp; selectedChair &amp;&amp; (selectedChair.Obrazek || selectedChair.Image)) {&#10;          const icon = document.createElement('img');&#10;          icon.src = selectedChair.Obrazek || selectedChair.Image;&#10;          icon.title = selectedChair.Nazwa;&#10;          icon.className = 'model-image'; // &lt;-- dodaj tę klasę!&#10;          overviewIconsDiv.appendChild(icon);&#10;        }&#10;        &#10;&#10;        // Ikonki materiałów dla każdego elementu&#10;        partOrder.forEach((partKey, idx) =&gt; {&#10;          const mats = selectedMaterials[partKey];&#10;if (Array.isArray(mats)) {&#10;  mats.forEach(mat =&gt; {&#10;    if (mat &amp;&amp; (mat.Obrazek || mat.Image)) {&#10;      const icon = document.createElement('img');&#10;      icon.src = mat.Obrazek || mat.Image;&#10;      icon.title = mat.Nazwa;&#10;      overviewIconsDiv.appendChild(icon);&#10;    }&#10;  });&#10;} else if (mats &amp;&amp; (mats.Obrazek || mats.Image)) {&#10;  // Obsługa starego trybu (pojedynczy materiał)&#10;  const icon = document.createElement('img');&#10;  icon.src = mats.Obrazek || mats.Image;&#10;  icon.title = mats.Nazwa;&#10;  overviewIconsDiv.appendChild(icon);&#10;}&#10;&#10;        });&#10;&#10;        // Ikonka wybranego wariantu nóg (jeśli jest)&#10;        if (selectedLeg &amp;&amp; (selectedLeg.Obrazek || selectedLeg.Image)) {&#10;          const icon = document.createElement('img');&#10;          icon.src = selectedLeg.Obrazek || selectedLeg.Image;&#10;          icon.title = selectedLeg.Nazwa;&#10;          overviewIconsDiv.appendChild(icon);&#10;        }&#10;&#10;        // Szczegóły i ceny&#10;        let totalPrice = 0;&#10;        if (selectedChair &amp;&amp; selectedChair.Cena) {&#10;          const price = parseFloat(selectedChair.Cena) || 0;&#10;          totalPrice += price;&#10;          const detailLine = document.createElement('div');&#10;          detailLine.className = 'detail-item';&#10;          const label = (selectedChair.Grupa &amp;&amp; selectedChair.Grupa.toLowerCase() === 'krzesło') ? 'Krzesło' : 'Model';&#10;          detailLine.innerHTML = `&lt;span&gt;${label}: ${selectedChair.Nazwa}&lt;/span&gt;&lt;strong&gt;: ${price.toFixed(2)} PLN&lt;/strong&gt;`;&#10;          overviewDetailsDiv.appendChild(detailLine);&#10;        }&#10;        partOrder.forEach((partKey, idx) =&gt; {&#10;          const mat = selectedMaterials[partKey];&#10;          if (mat) {&#10;            const price = parseFloat(mat.Cena) || 0;&#10;            totalPrice += price;&#10;            const detailLine = document.createElement('div');&#10;            detailLine.className = 'detail-item';&#10;            detailLine.innerHTML = `&lt;span&gt;${partLabels[idx]}: ${mat.Nazwa}&lt;/span&gt;&lt;strong&gt;: ${price.toFixed(2)} PLN&lt;/strong&gt;`;&#10;            overviewDetailsDiv.appendChild(detailLine);&#10;          }&#10;        });&#10;        // Dodano szczegóły wariantu nóg&#10;        if (selectedLeg) {&#10;          const price = parseFloat(selectedLeg.Cena) || 0;&#10;          const detailLine = document.createElement('div');&#10;          detailLine.className = 'detail-item';&#10;          detailLine.innerHTML = `&lt;span&gt;Wariant nóg: ${selectedLeg.Nazwa}&lt;/span&gt;&lt;strong&gt;: ${price.toFixed(2)} PLN&lt;/strong&gt;`;&#10;          overviewDetailsDiv.appendChild(detailLine);&#10;        }&#10;        if (selectedLeg) {&#10;          const price = parseFloat(selectedLeg.Cena) || 0;&#10;          totalPrice += price;&#10;        }&#10;&#10;        const hr = document.createElement('hr');&#10;        overviewDetailsDiv.appendChild(hr);&#10;&#10;        overviewTotalPriceSpan.textContent = `${totalPrice.toFixed(2)} PLN`;&#10;&#10;        window.selectedChair = selectedChair;&#10;        window.selectedLeg = selectedLeg;&#10;        window.selectedMaterials = selectedMaterials;&#10;&#10;      }&#10;     &#10;&#10;&#10;      function enforceZoomLimits() {&#10;        if (viewer &amp;&amp; viewer.controls) {&#10;          viewer.controls.minDistance = MIN_ZOOM_DISTANCE;&#10;          viewer.controls.maxDistance = MAX_ZOOM_DISTANCE;&#10;          viewer.controls.enableDamping = true;&#10;          viewer.controls.dampingFactor = 0.1;&#10;          viewer.controls.update();&#10;        }&#10;      }&#10;&#10;      function clampCameraDistance() {&#10;        if (!viewer || !viewer.scene || !viewer.scene.activeCamera || !viewer.controls) return;&#10;        const camera = viewer.scene.activeCamera;&#10;        const target = viewer.controls.target;&#10;        const pos = camera.position;&#10;        const dist = pos.distanceTo(target);&#10;&#10;        if (dist &lt; MIN_ZOOM_DISTANCE) {&#10;          // Przesuń kamerę na sferę o promieniu MIN_ZOOM_DISTANCE od targetu&#10;          const dir = pos.clone().sub(target).normalize();&#10;          camera.position.copy(target.clone().add(dir.multiplyScalar(MIN_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          viewer.controls.update();&#10;        }&#10;        if (dist &gt; MAX_ZOOM_DISTANCE) {&#10;          // Przesuń kamerę na sferę o promieniu MAX_ZOOM_DISTANCE od targetu&#10;          const dir = pos.clone().sub(target).normalize();&#10;          camera.position.copy(target.clone().add(dir.multiplyScalar(MAX_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          viewer.controls.update();&#10;        }&#10;      }&#10;&#10;&#10;      // Nowa funkcja do ograniczeń zoomu w obrębie bańki&#10;      function forceBubbleZoomLimitsEachFrame() {&#10;        if (!viewer || !viewer.scene || !viewer.scene.activeCamera) return;&#10;        const camera = viewer.scene.activeCamera;&#10;        // Środek bańki – możesz zmienić na inny punkt jeśli trzeba&#10;        const bubbleCenter = new Vector3(0, 0, 0);&#10;        const pos = camera.position;&#10;        const dist = pos.distanceTo(bubbleCenter);&#10;&#10;        if (dist &lt; MIN_ZOOM_DISTANCE) {&#10;          const dir = pos.clone().sub(bubbleCenter).normalize();&#10;          camera.position.copy(bubbleCenter.clone().add(dir.multiplyScalar(MIN_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          if (viewer.controls) viewer.controls.update();&#10;        }&#10;        if (dist &gt; MAX_ZOOM_DISTANCE) {&#10;          const dir = pos.clone().sub(bubbleCenter).normalize();&#10;          camera.position.copy(bubbleCenter.clone().add(dir.multiplyScalar(MAX_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          if (viewer.controls) viewer.controls.update();&#10;        }&#10;      }&#10;&#10;      // Uruchom sprawdzanie w każdej klatce&#10;      function animateBubbleZoomLimit() {&#10;        forceBubbleZoomLimitsEachFrame();&#10;        requestAnimationFrame(animateBubbleZoomLimit);&#10;      }&#10;      animateBubbleZoomLimit();&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      const exportButton = document.getElementById(&quot;export-config&quot;);&#10;      const exportPanel = document.getElementById(&quot;export-panel&quot;);&#10;&#10;      exportButton.addEventListener(&quot;click&quot;, () =&gt; {&#10;        exportPanel.classList.toggle(&quot;hidden&quot;);&#10;      });&#10;&#10;      // Opcjonalnie – ukrywanie po kliknięciu poza panelem&#10;      document.addEventListener(&quot;click&quot;, (e) =&gt; {&#10;        if (!exportPanel.contains(e.target) &amp;&amp; !exportButton.contains(e.target)) {&#10;          exportPanel.classList.add(&quot;hidden&quot;);&#10;        }&#10;      });&#10;&#10;      // Obsługa kliknięć eksportu (przykładowo)&#10;      document.querySelectorAll(&quot;.export-btn&quot;).forEach(btn =&gt; {&#10;        btn.addEventListener(&quot;click&quot;, () =&gt; {&#10;          const format = btn.dataset.format;&#10;          alert(`Eksport jako: ${format.toUpperCase()}`);&#10;          exportPanel.classList.add(&quot;hidden&quot;);&#10;        });&#10;      });&#10;&#10;&#10;&#10;&#10;      // — Obsługa dolnego paska narzędziowego HDR&#10;&#10;      function renderHDROptions(entries) {&#10;        const container = document.getElementById('hdr-options');&#10;        if (!container) return;&#10;        container.innerHTML = '';&#10;&#10;        entries.forEach(entry =&gt; {&#10;          const img = document.createElement('img');&#10;          img.src = entry.HDRIcon;&#10;          img.alt = entry.Nazwa || entry.HDR;&#10;          img.onerror = () =&gt; {&#10;            img.src = 'icons/placeholder.svg';&#10;          };&#10;&#10;          const thumb = document.createElement('div');&#10;          thumb.className = 'thumbnail';&#10;&#10;&#10;          thumb.title = entry.Nazwa || entry.HDR;&#10;          thumb.appendChild(img);&#10;          thumb.onclick = () =&gt; {&#10;            viewer.setEnvironmentMap(entry.HDR, { isHDR: true });&#10;            document.getElementById('hdr-panel')?.classList.add('hidden');&#10;          };&#10;&#10;          const caption = document.createElement('div');&#10;          caption.className = 'thumbnail-caption';&#10;          caption.textContent = entry.Nazwa || entry.HDR;&#10;&#10;          const wrapper = document.createElement('div');&#10;          wrapper.className = 'thumbnail-wrapper';&#10;          wrapper.appendChild(thumb);&#10;          //wrapper.appendChild(caption);&#10;&#10;          container.appendChild(wrapper);&#10;        });&#10;      }&#10;&#10;&#10;&#10;      // Sterowanie widocznością panelu&#10;&#10;      // Sterowanie widocznością panelu&#10;      window.addEventListener('DOMContentLoaded', () =&gt; {&#10;        const hdrToggle = document.getElementById('hdr-toggle');&#10;        const hdrPanel = document.getElementById('hdr-panel');&#10;        const hdrClose = document.getElementById('hdr-close');&#10;&#10;        function toggleHDRPanel() {&#10;          hdrPanel.classList.toggle('hidden');&#10;          hdrPanel.style.display = hdrPanel.classList.contains('hidden') ? 'none' : 'block';&#10;        }&#10;&#10;        hdrToggle?.addEventListener('click', (e) =&gt; {&#10;          e.stopPropagation();&#10;          toggleHDRPanel();&#10;        });&#10;&#10;        hdrPanel?.addEventListener('click', (e) =&gt; {&#10;          e.stopPropagation();&#10;        });&#10;&#10;        document.addEventListener('click', () =&gt; {&#10;          hdrPanel?.classList.add('hidden');&#10;          hdrPanel.style.display = 'none';&#10;        });&#10;&#10;        hdrClose?.addEventListener('click', (e) =&gt; {&#10;          e.stopPropagation();&#10;          hdrPanel?.classList.add('hidden');&#10;          hdrPanel.style.display = 'none';&#10;        });&#10;      });&#10;&#10;      // Modyfikacja istniejącego kodu obsługi przycisku HDR&#10;      document.getElementById('hdr-toggle')?.addEventListener('click', (e) =&gt; {&#10;        e.stopPropagation();&#10;        const panel = document.getElementById('hdr-panel');&#10;        panel.classList.toggle('hidden');&#10;        panel.style.display = panel.classList.contains('hidden') ? 'none' : 'block';&#10;      });&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      // Panel wymiarów&#10;      document.getElementById('dimensions-show')?.addEventListener('click', (e) =&gt; {&#10;        e.stopPropagation();&#10;        console.log(&quot; Kliknięto przycisk wymiarów&quot;);&#10;        showDimensions();&#10;      });&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      //  Ukrywanie panelu&#10;      document.getElementById('dimensions-show')?.addEventListener('click', () =&gt; {&#10;        const overlay = document.getElementById('dimension-overlay');&#10;        const labels = overlay.querySelectorAll('.dimension-label');&#10;&#10;        //  Pobierz z arkusza&#10;        const item = allData.find(i =&gt; {&#10;          const g = (i.Grupa || '').toLowerCase();&#10;          return (g === 'krzesło' || g === 'kubełek') &amp;&amp; i.Wymiary;&#10;        });&#10;&#10;        const dims = item?.Wymiary?.match(/x\s*=\s*(\d+[\.,]?\d*)\s*cm.*?y\s*=\s*(\d+[\.,]?\d*)\s*cm.*?z\s*=\s*(\d+[\.,]?\d*)\s*cm/i);&#10;&#10;        if (dims) {&#10;          labels[0].textContent = `x = ${dims[1]} cm`;&#10;          labels[1].textContent = `y = ${dims[2]} cm`;&#10;          labels[2].textContent = `z = ${dims[3]} cm`;&#10;        }&#10;&#10;        overlay.style.display = 'block';&#10;&#10;        // ⏱ Opcjonalnie ukryj po 6 sek.&#10;        setTimeout(() =&gt; overlay.style.display = 'none', 6000);&#10;      });&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      window.addEventListener('load', () =&gt; {&#10;        const showQRBtn = document.getElementById('qr-button').addEventListener('click', showQR);&#10;&#10;&#10;        if (!showQRBtn) return;&#10;&#10;        // Pokaż przycisk po załadowaniu strony i UI&#10;        showQRBtn.style.display = 'flex';&#10;&#10;        // Podłącz event do wyświetlenia kodu QR&#10;        showQRBtn.addEventListener('click', () =&gt; {&#10;          const qrPopup = document.getElementById('qr-popup');&#10;          const qrContainer = document.getElementById('qrcode');&#10;          if (!qrPopup || !qrContainer) return;&#10;&#10;          qrPopup.style.display = 'block';&#10;          qrContainer.innerHTML = '';&#10;&#10;          new QRCode(qrContainer, {&#10;            text: window.location.href,&#10;            width: 200,&#10;            height: 200,&#10;          });&#10;        });&#10;      });&#10;&#10;      function showConfigOverview() {&#10;        const overviewPanel = document.getElementById('config-overview');&#10;        overviewPanel.classList.remove('hidden');&#10;      }&#10;&#10;      // Wywołaj tę funkcję w odpowiednim momencie, np. po załadowaniu modelu&#10;&#10;&#10;      document.addEventListener('click', () =&gt; {&#10;        hdrPanel.classList.add('hidden');&#10;      });&#10;&#10;&#10;&#10;      function showDimensions() {&#10;        const dimensionOverlay = document.getElementById('dimension-overlay');&#10;        dimensionOverlay.style.display = 'block';&#10;        dimensionOverlay.innerHTML = ''; // Wyczyść poprzednie wymiary&#10;&#10;        if (!selectedChair) return;&#10;&#10;        // Parsowanie wymiarów z kolumny Wymiary&#10;        const dimensionsString = selectedChair.Wymiary || '';&#10;        const dimensionsParsed = {};&#10;        dimensionsString.split(',').forEach(dim =&gt; {&#10;          const [key, value] = dim.split('=').map(s =&gt; s.trim());&#10;          if (key &amp;&amp; value) {&#10;            dimensionsParsed[key.toLowerCase()] = parseFloat(value);&#10;          }&#10;        });&#10;&#10;        const dimensions = [&#10;          { label: 'Szerokość', value: dimensionsParsed.x },&#10;          { label: 'Głębokość', value: dimensionsParsed.y },&#10;          { label: 'Wysokość', value: dimensionsParsed.z }&#10;        ];&#10;&#10;        const panel = document.createElement('div');&#10;        panel.className = 'dimension-panel';&#10;        panel.style.cssText = `&#10;  position: fixed;&#10;  top: 85%;&#10;  transform: translate(-150%, -50%);&#10;  left: 50%;&#10;  background-color: rgba(255, 255, 255, 0.8);&#10;  padding: 10px;&#10;  border-radius: 5px;&#10;  font-size: 14px;&#10;  font-weight: bold;&#10;  z-index: 1001;&#10;`;&#10;&#10;&#10;        dimensions.forEach(dim =&gt; {&#10;          if (dim.value !== undefined) {&#10;            const dimElement = document.createElement('div');&#10;            dimElement.textContent = `${dim.label}: ${dim.value} cm`;&#10;            dimElement.style.marginBottom = '5px';&#10;            panel.appendChild(dimElement);&#10;          }&#10;        });&#10;&#10;        dimensionOverlay.appendChild(panel);&#10;      }&#10;&#10;      function hideDimensions() {&#10;        const dimensionOverlay = document.getElementById('dimension-overlay');&#10;        dimensionOverlay.style.display = 'none';&#10;      }&#10;&#10;&#10;&#10;      //  Ładowanie JSZip&#10;      async function loadJSZip() {&#10;        if (!window.JSZip) {&#10;          await import('https://cdn.jsdelivr.net/npm/jszip@3.10.0/dist/jszip.min.js');&#10;        }&#10;      }&#10;&#10;      //  Załaduj listę plików tekstur z files.json&#10;      let texturesFilesByFolder = {};&#10;      async function loadTexturesFilesList() {&#10;        try {&#10;          const res = await fetch('textures/files.json');&#10;          texturesFilesByFolder = await res.json();&#10;        } catch (e) {&#10;          console.error('Błąd ładowania files.json:', e);&#10;          texturesFilesByFolder = {};&#10;        }&#10;      }&#10;&#10;      //  Obsługiwane formaty eksportu&#10;      const modelFormats = ['fbx', 'obj', 'dae'];&#10;&#10;      // ️ Główna funkcja eksportu ZIP&#10;      async function handleExport(format) {&#10;        if (!window.JSZip) {&#10;          alert('JSZip niezaładowany!');&#10;          return;&#10;        }&#10;&#10;        if (!modelFormats.includes(format)) {&#10;          alert(`Nieobsługiwany format eksportu: ${format}`);&#10;          return;&#10;        }&#10;&#10;        const zip = new JSZip();&#10;&#10;        //  Eksport głównego modelu krzesła&#10;        const chairModel = window.selectedChair?.Nazwa || 'BrakModelu';&#10;        const chairPath = `export/${chairModel}.${format}`;&#10;&#10;        try {&#10;          const res = await fetch(chairPath);&#10;          if (!res.ok) throw new Error(`Nie znaleziono modelu krzesła: ${chairPath}`);&#10;          const blob = await res.blob();&#10;          zip.file(`${chairModel}.${format}`, blob);&#10;        } catch (e) {&#10;          alert(e.message);&#10;          return;&#10;        }&#10;&#10;        //  Eksport nóg (jeśli wybrano)&#10;        const legModel = window.selectedLeg?.Nazwa;&#10;        if (legModel) {&#10;          const legPath = `export/${legModel}.${format}`;&#10;          try {&#10;            const res = await fetch(legPath);&#10;            if (res.ok) {&#10;              const blob = await res.blob();&#10;              zip.file(`${legModel}.${format}`, blob);&#10;            } else {&#10;              console.warn(`Nie znaleziono modelu nóg: ${legPath}`);&#10;            }&#10;          } catch (e) {&#10;            console.warn(`Błąd pobierania nóg: ${e.message}`);&#10;          }&#10;        }&#10;&#10;        //  Eksport materiałów / tekstur z kolekcją i bez&#10;        const textureFolderInZip = zip.folder('textures');&#10;        const materials = Object.values(window.selectedMaterials || {});&#10;        const collection = window.selectedChair?.Kolekcja?.trim() || '';&#10;&#10;        for (const mat of materials) {&#10;          const folder = mat.Folder || mat.Wartość;&#10;          const textureFiles = texturesFilesByFolder[folder] || [];&#10;&#10;          for (const texFile of textureFiles) {&#10;            const candidatePaths = [&#10;              collection ? `textures/${collection}/${folder}/${texFile}` : null,&#10;              `textures/${folder}/${texFile}`&#10;            ].filter(Boolean);&#10;&#10;            let found = false;&#10;&#10;            for (const path of candidatePaths) {&#10;              try {&#10;                const res = await fetch(path);&#10;                if (res.ok) {&#10;                  const blob = await res.blob();&#10;                  textureFolderInZip.file(`${folder}/${texFile}`, blob);&#10;                  found = true;&#10;                  break;&#10;                }&#10;              } catch (e) {&#10;                console.warn(`❌ Błąd pobierania: ${path}`, e);&#10;              }&#10;            }&#10;&#10;            if (!found) {&#10;              console.warn(`⚠️ Nie znaleziono tekstury: ${folder}/${texFile}`);&#10;            }&#10;          }&#10;        }&#10;&#10;        //  Finalny zapis ZIP&#10;        const blob = await zip.generateAsync({ type: 'blob' });&#10;        const a = document.createElement('a');&#10;        a.href = URL.createObjectURL(blob);&#10;        a.download = `export_${chairModel}_${format}.zip`;&#10;        document.body.appendChild(a);&#10;        a.click();&#10;        a.remove();&#10;        URL.revokeObjectURL(a.href);&#10;      }&#10;&#10;      //  Inicjalizacja tekstur na starcie&#10;      await loadTexturesFilesList();&#10;&#10;      // ️ Obsługa kliknięcia eksportu&#10;      document.querySelectorAll('.export-btn').forEach(button =&gt; {&#10;        button.addEventListener('click', async () =&gt; {&#10;          await loadJSZip();&#10;          const format = button.getAttribute('data-format');&#10;          await handleExport(format);&#10;        });&#10;      });&#10;&#10;&#10;&#10;      function updateMaterialTiles() {&#10;        const legsMaterialsContainer = document.getElementById('legs-thumbnails');&#10;        if (!legsMaterialsContainer || !selectedChair || !selectedLeg) return;&#10;&#10;        //  Czyść tylko kafelki materiałów nóg&#10;        legsMaterialsContainer.querySelectorAll('.material-tile')?.forEach(tile =&gt; tile.remove());&#10;&#10;        const allEntries = allData;&#10;&#10;        const chairType = selectedChair.Grupa?.trim().toLowerCase();       // 'krzesło' lub 'kubełek'&#10;        const legVariant = selectedLeg.Nazwa?.trim().toLowerCase();       // np. 'regularne'&#10;&#10;        const filteredMaterials = allEntries.filter(mat =&gt; {&#10;          // ✅ tylko materiały nóg&#10;          if (mat.Grupa?.trim().toLowerCase() !== 'materiały_nóg') return false;&#10;&#10;          // ✅ czy materiał pasuje do typu krzesła (GrupaDocelowa)&#10;          const grupaDocelowa = mat.GrupaDocelowa?.toLowerCase() || '';&#10;          const grupy = grupaDocelowa.split(',').map(g =&gt; g.trim());&#10;          if (!grupy.includes(chairType)) return false;&#10;&#10;          // ✅ jeśli krzesło → ignorujemy DlaModeluNóg&#10;          if (chairType === 'krzesło') return true;&#10;&#10;          // ✅ jeśli kubełek → DlaModeluNóg musi zawierać aktualny wariant nóg&#10;          const dlaModelu = mat.DlaModeluNóg?.toLowerCase().trim();&#10;          if (!dlaModelu || dlaModelu.length === 0) return false;&#10;&#10;          const allowedVariants = dlaModelu.split(',').map(v =&gt; v.trim());&#10;          return allowedVariants.includes(legVariant);&#10;        });&#10;&#10;        filteredMaterials.forEach(mat =&gt; {&#10;          const tile = document.createElement('div');&#10;          tile.className = 'material-tile';&#10;          tile.textContent = mat.Nazwa;&#10;          tile.style.backgroundImage = `url(${mat.Obrazek || 'fallback.png'})`;&#10;          tile.onclick = () =&gt; applyLegMaterial(mat);&#10;          legsMaterialsContainer.appendChild(tile);&#10;        });&#10;&#10;        console.log(`✅ Pokazano ${filteredMaterials.length} materiałów nóg dla '${chairType}', wariant nóg '${selectedLeg.Nazwa}'`);&#10;      }&#10;&#10;&#10;&#10;&#10;&#10;      //UKRYWANIE PRZYCISKÓW ELEMENTÓW KRZESŁA&#10;&#10;      // kolejność części i ich powiązane nazwy meshów/obiektów&#10;      const partOrder = ['seat', 'backseat_inside', 'backseat_outside', 'backseat', 'legs_material'];&#10;&#10;      // funkcja tworząca i wyświetlająca przyciski części krzesła na podstawie danych wybranego krzesła&#10;      function renderPartButtons() {&#10;        const partTabs = document.getElementById('part-tabs');&#10;        partTabs.innerHTML = ''; // czyścimy zawartość&#10;&#10;        if (!selectedChair) {&#10;          console.warn('renderPartButtons: brak wybranego krzesła');&#10;          return;&#10;        }&#10;&#10;        const availableElementsRaw = selectedChair['DostępneElementy'] || '';&#10;        if (!availableElementsRaw.trim()) {&#10;          console.log('renderPartButtons: brak dostępnych elementów — nie pokazuję nic.');&#10;          return;&#10;        }&#10;&#10;        const availableParts = availableElementsRaw&#10;          .split(',')&#10;          .map(el =&gt; el.trim().toLowerCase())&#10;          .filter(Boolean);&#10;&#10;        const partNames = {&#10;          seat: 'Siedzisko',&#10;          backseat_inside: 'Oparcie wew.',&#10;          backseat_outside: 'Oparcie zew.',&#10;          backseat: 'Siedzisko/Oparcie',&#10;&#10;          legs: 'Nogi'&#10;        };&#10;&#10;        Object.keys(ELEMENT_ICONS).forEach(part =&gt; {&#10;          if (availableParts.includes(part)) {&#10;&#10;            const wrapper = document.createElement('div');&#10;            wrapper.className = 'thumbnail-wrapper';&#10;&#10;            const thumb = document.createElement('div');&#10;            thumb.className = 'thumbnail';&#10;            thumb.title = part;&#10;            thumb.dataset.key = part; // ✅ TO jest potrzebne dla dalszego UI&#10;&#10;            thumb.onclick = () =&gt; {&#10;              document.querySelectorAll('#part-tabs .thumbnail').forEach(tab =&gt; tab.classList.remove('selected'));&#10;              thumb.classList.add('selected');&#10;              document.getElementById('materials-section').style.display = 'block';&#10;&#10;              // Pokazuje odpowiednie materiały do klikniętej części&#10;              renderFilteredMaterialOptions(part);&#10;            };&#10;&#10;            const img = document.createElement('img');&#10;            img.src = ELEMENT_ICONS[part];&#10;            img.alt = part;&#10;&#10;            thumb.appendChild(img);&#10;            wrapper.appendChild(thumb);&#10;&#10;            const caption = document.createElement('div');&#10;            caption.className = 'thumbnail-caption';&#10;            caption.textContent = partNames[part] || part;&#10;            wrapper.appendChild(caption);&#10;&#10;            partTabs.appendChild(wrapper);&#10;          }&#10;        });&#10;      }&#10;&#10;&#10;&#10;&#10;      // Przykładowo: gdy zmieniasz krzesło, wywołujesz:&#10;      renderPartButtons();&#10;&#10;&#10;&#10;&#10;      const arButton = document.getElementById('ar-button');&#10;      if (arButton) {&#10;        arButton.addEventListener('click', () =&gt; {&#10;          const popup = document.getElementById('ar-popup');&#10;          if (popup) popup.style.display = 'block';&#10;        });&#10;      }&#10;&#10;&#10;const activeCollectionsByMesh = {};&#10;const materialsByMeshAndCollection = {};&#10;&#10;function renderCollectionsAndMaterials(groupedByCollection, targetMesh) {&#10;  // ⏱️ Zapisz dane materiałów dla danego elementu&#10;  materialsByMeshAndCollection[targetMesh] = groupedByCollection;&#10;&#10;  const iconPanel = document.getElementById('collection-icons');&#10;  const materialPanel = document.getElementById('material-panel-viewer');&#10;  if (!iconPanel || !materialPanel) return;&#10;&#10;  iconPanel.innerHTML = '';&#10;  materialPanel.innerHTML = '';&#10;&#10;  Object.entries(groupedByCollection).forEach(([kolekcja, materiały]) =&gt; {&#10;    const icon = document.createElement('img');&#10;&#10;    //  Ikony specjalne dla 'legs' i 'backseat'&#10;    let iconFileName = kolekcja.trim().toLowerCase().replace(/\s+/g, '_');&#10;&#10;const basePath = `icons/${iconFileName}.png`;&#10;&#10;fetch(basePath, { method: 'HEAD' })&#10;  .then(res =&gt; {&#10;    icon.src = res.ok ? basePath : 'icons/default.png';&#10;  })&#10;  .catch(() =&gt; {&#10;    icon.src = 'icons/default.png';&#10;  });&#10;&#10;&#10;&#10;&#10;    icon.alt = kolekcja;&#10;    icon.className = 'collection-icon';&#10;&#10;    icon.onclick = () =&gt; {&#10;      const isActive = activeCollectionsByMesh[targetMesh] === kolekcja;&#10;      iconPanel.querySelectorAll('.collection-icon').forEach(i =&gt; i.classList.remove('selected'));&#10;&#10;      if (isActive) {&#10;        activeCollectionsByMesh[targetMesh] = null;&#10;        materialPanel.innerHTML = '';&#10;        return;&#10;      }&#10;&#10;      activeCollectionsByMesh[targetMesh] = kolekcja;&#10;      icon.classList.add('selected');&#10;      materialPanel.innerHTML = '';&#10;      renderMaterialsInPanel(materiały, targetMesh);&#10;    };&#10;&#10;    iconPanel.appendChild(icon);&#10;  });&#10;&#10;  // ✅ Automatyczne otwarcie zapamiętanej kolekcji&#10;  const rememberedCollection = activeCollectionsByMesh[targetMesh];&#10;  const rememberedGroup = materialsByMeshAndCollection[targetMesh] || {};&#10;  const rememberedMaterials = rememberedGroup[rememberedCollection];&#10;&#10;  if (rememberedCollection &amp;&amp; rememberedMaterials?.length) {&#10;    const rememberedIcon = [...iconPanel.querySelectorAll('.collection-icon')].find(&#10;      i =&gt; i.alt === rememberedCollection&#10;    );&#10;    if (rememberedIcon) {&#10;      rememberedIcon.classList.add('selected');&#10;      renderMaterialsInPanel(rememberedMaterials, targetMesh);&#10;    }&#10;  }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;function renderMaterialsInPanel(materiały, targetMesh) {&#10;  const viewer = document.getElementById('material-panel-viewer');&#10;  if (!viewer) return;&#10;  viewer.innerHTML = '';&#10;&#10;  materiały.forEach(mat =&gt; {&#10;    const wrapper = document.createElement('div');&#10;    wrapper.className = 'thumbnail-wrapper';&#10;&#10;    const button = document.createElement('div');&#10;    button.className = 'thumbnail';&#10;    button.title = mat.Nazwa;&#10;&#10;    const img = document.createElement('img');&#10;    img.src = mat.Obrazek || 'icons/placeholder.svg';&#10;    img.alt = mat.Nazwa;&#10;    button.appendChild(img);&#10;&#10;    const caption = document.createElement('div');&#10;    caption.className = 'thumbnail-caption';&#10;    caption.textContent = mat.Nazwa;&#10;&#10;    wrapper.appendChild(button);&#10;    wrapper.appendChild(caption);&#10;    viewer.appendChild(wrapper);&#10;&#10;    button.onclick = () =&gt; {&#10;      applyMaterialToSpecificMesh(mat, targetMesh);&#10;      viewer.querySelectorAll('.thumbnail').forEach(t =&gt; t.classList.remove('selected'));&#10;      button.classList.add('selected');&#10;    };&#10;  });&#10;}&#10;&#10;&#10;&#10; window.addEventListener('orientationchange', () =&gt; {&#10;    const rotateMsg = document.getElementById('rotate-message');&#10;    if (!rotateMsg) return;&#10;&#10;    // ✅ Jeśli poziomo — chowaj komunikat&#10;    if (window.innerWidth &gt; window.innerHeight) {&#10;      rotateMsg.style.display = 'none';&#10;    } else {&#10;      rotateMsg.style.display = 'flex';&#10;    }&#10;  });&#10;&#10;  // ✅ Dodatkowy test przy starcie — gdy strona ładuje się w pionie&#10;  window.addEventListener('load', () =&gt; {&#10;    const rotateMsg = document.getElementById('rotate-message');&#10;    if (!rotateMsg) return;&#10;&#10;    if (window.innerWidth &gt; window.innerHeight) {&#10;      rotateMsg.style.display = 'none';&#10;    } else {&#10;      rotateMsg.style.display = 'flex';&#10;    }&#10;  });&#10;&#10;&#10;function updateRotateMessage() {&#10;  const rotateMsg = document.getElementById('rotate-message');&#10;  if (!rotateMsg) return;&#10;&#10;  const isLandscape = window.innerWidth &gt; window.innerHeight;&#10;  rotateMsg.style.display = isLandscape ? 'none' : 'flex';&#10;}&#10;&#10;window.addEventListener('orientationchange', updateRotateMessage);&#10;window.addEventListener('resize', updateRotateMessage);&#10;window.addEventListener('load', updateRotateMessage);&#10;&#10;&#10;function checkOrientation() {&#10;  const rotateMsg = document.getElementById('rotate-message');&#10;  if (!rotateMsg) return;&#10;&#10;  const isLandscape = window.innerWidth &gt; window.innerHeight;&#10;  rotateMsg.style.display = isLandscape ? 'none' : 'flex';&#10;}&#10;window.addEventListener('load', checkOrientation);&#10;window.addEventListener('resize', checkOrientation);&#10;&#10;&#10;&#10;window.addEventListener('DOMContentLoaded', () =&gt; {&#10;  // przygotowanie canvas i kontenerów&#10;  &#10;});&#10;&#10;&#10;function setDefaultMaterialsFromSheet() {&#10;  if (!Array.isArray(allData) || !window.selectedChair || !selectedChair.Nazwa) return;&#10;&#10;  const modelName = selectedChair.Nazwa.trim().toLowerCase();&#10;  if (typeof window.selectedMaterials !== 'object') window.selectedMaterials = {};&#10;&#10;  allData.forEach(row =&gt; {&#10;    const modelMatch = row.Default?.trim().toLowerCase();&#10;    const targetRaw = row.TargetMeshOrObiect?.trim().toLowerCase();&#10;    const name = row.Nazwa?.trim();&#10;    const price = parseFloat(row.Cena) || 0;&#10;    const image = row.Obrazek || row.Image || '';&#10;&#10;    if (!modelMatch || modelMatch !== modelName || !name || !targetRaw) return;&#10;&#10;    if (!selectedMaterials[targetRaw]) selectedMaterials[targetRaw] = [];&#10;&#10;    selectedMaterials[targetRaw].push({&#10;      Nazwa: name,&#10;      Cena: price,&#10;      Obrazek: image&#10;    });&#10;  });&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      init();&#10;&#10;      // Globalna zmienna do filtrowania kafelków w sidebarze&#10;      let currentSearchFilter = '';&#10;&#10;      // Funkcja do ustawiania filtra wyszukiwania&#10;      function setSearchFilter(query) {&#10;        currentSearchFilter = query.toLowerCase().trim();&#10;        console.log(' Search filter set to:', currentSearchFilter);&#10;        &#10;        // Aktualizuj wskaźnik filtra&#10;        const indicator = document.getElementById('search-filter-indicator');&#10;        const filterText = document.getElementById('search-filter-text');&#10;        const clearButton = document.getElementById('clear-search-filter');&#10;        &#10;        if (currentSearchFilter) {&#10;          filterText.textContent = `&quot;${query}&quot;`;&#10;          indicator.style.display = 'block';&#10;        } else {&#10;          indicator.style.display = 'none';&#10;        }&#10;        &#10;        // Obsługa przycisku czyszczenia filtra&#10;        if (clearButton &amp;&amp; !clearButton.hasAttribute('data-listener')) {&#10;          clearButton.addEventListener('click', () =&gt; {&#10;            setSearchFilter('');&#10;            // Wyczyść także pole wyszukiwania jeśli jest otwarte&#10;            const searchInput = document.getElementById('search-input');&#10;            if (searchInput) searchInput.value = '';&#10;            const searchResults = document.getElementById('search-results');&#10;            if (searchResults) searchResults.innerHTML = '';&#10;          });&#10;          clearButton.setAttribute('data-listener', 'true');&#10;        }&#10;        &#10;        // Odśwież wszystkie sekcje kafelków&#10;        refreshAllTiles();&#10;      }&#10;&#10;      // Funkcja sprawdzająca czy element pasuje do filtra&#10;      function matchesSearchFilter(item) {&#10;        if (!currentSearchFilter) return true;&#10;        &#10;        const searchableFields = [&#10;          item.Nazwa,&#10;          item.Grupa,&#10;          item.Kategoria,&#10;          item.Kolekcja,&#10;          item.Typ,&#10;          item.Opis&#10;        ];&#10;        &#10;        // Jeśli filtr zawiera spacje, traktuj jako listę nazw do wyszukania&#10;        if (currentSearchFilter.includes(' ')) {&#10;          const searchTerms = currentSearchFilter.split(' ').filter(term =&gt; term.trim().length &gt; 0);&#10;          return searchTerms.some(term =&gt; &#10;            searchableFields.some(field =&gt; &#10;              field &amp;&amp; field.toLowerCase().includes(term.toLowerCase())&#10;            )&#10;          );&#10;        } else {&#10;          // Pojedynczy termin wyszukiwania&#10;          return searchableFields.some(field =&gt; &#10;            field &amp;&amp; field.toLowerCase().includes(currentSearchFilter)&#10;          );&#10;        }&#10;      }&#10;&#10;      // Funkcja licząca relevance dla elementu względem filtra&#10;      function getRelevance(item, filter) {&#10;        if (!filter) return 0;&#10;        let relevance = 0;&#10;        const searchTerm = filter.toLowerCase().trim();&#10;        const searchableFields = [&#10;          { field: item.Nazwa, weight: 10 },&#10;          { field: item.Grupa, weight: 8 },&#10;          { field: item.Kategoria, weight: 8 },&#10;          { field: item.Kolekcja, weight: 6 },&#10;          { field: item.Typ, weight: 4 },&#10;          { field: item.Opis, weight: 2 }&#10;        ];&#10;        searchableFields.forEach(({ field, weight }) =&gt; {&#10;          if (field &amp;&amp; field.toLowerCase().includes(searchTerm)) {&#10;            relevance += weight;&#10;            if (field.toLowerCase().startsWith(searchTerm)) {&#10;              relevance += weight;&#10;            }&#10;          }&#10;        });&#10;        return relevance;&#10;      }&#10;&#10;      // Funkcja renderująca przyciski kategorii&#10;      function renderCategoryButtons() {&#10;        if (!allData || !Array.isArray(allData)) return;&#10;        &#10;        const container = document.getElementById('category-buttons-container');&#10;        if (!container) return;&#10;        &#10;        container.innerHTML = '';&#10;        &#10;        // Znajdź wszystkie unikalne kategorie&#10;        const categories = [...new Set(allData&#10;          .filter(item =&gt; item.Kategoria &amp;&amp; item.Typ === 'model')&#10;          .map(item =&gt; item.Kategoria)&#10;        )];&#10;        &#10;        // Dodaj przycisk &quot;Wszystkie&quot;&#10;        const allButton = document.createElement('button');&#10;        allButton.className = 'category-button active';&#10;        allButton.textContent = 'Wszystkie';&#10;        allButton.onclick = () =&gt; {&#10;          document.querySelectorAll('.category-button').forEach(btn =&gt; btn.classList.remove('active'));&#10;          allButton.classList.add('active');&#10;          renderAllModels();&#10;        };&#10;        container.appendChild(allButton);&#10;        &#10;        // Dodaj przyciski dla każdej kategorii&#10;        categories.forEach(category =&gt; {&#10;          const button = document.createElement('button');&#10;          button.className = 'category-button';&#10;          button.textContent = category;&#10;          &#10;          // Sprawdź czy kategoria ma promocje&#10;          const hasPromotion = allData.some(item =&gt; &#10;            item.Kategoria === category &amp;&amp; &#10;            item.Typ === 'model' &amp;&amp; &#10;            item.Promocja &amp;&amp; &#10;            item.Promocja.trim() !== ''&#10;          );&#10;          &#10;          if (hasPromotion) {&#10;            button.classList.add('promotion');&#10;          }&#10;          &#10;          button.onclick = () =&gt; {&#10;            document.querySelectorAll('.category-button').forEach(btn =&gt; btn.classList.remove('active'));&#10;            button.classList.add('active');&#10;            renderModelsByCategory(category);&#10;          };&#10;          &#10;          container.appendChild(button);&#10;        });&#10;      }&#10;&#10;      // Funkcja renderująca wszystkie modele&#10;      function renderAllModels() {&#10;        const models = allData.filter(item =&gt; &#10;          item.Typ &amp;&amp; item.Typ.toLowerCase() === 'model' &amp;&amp;&#10;          item.Kategoria &amp;&amp; item.Kategoria.toLowerCase().includes('krzesła')&#10;        );&#10;        renderOptions('model-thumbnails', models, item =&gt; loadModel(item));&#10;      }&#10;&#10;      // Funkcja renderująca modele według kategorii&#10;      function renderModelsByCategory(category) {&#10;        const models = allData.filter(item =&gt; &#10;          item.Typ &amp;&amp; item.Typ.toLowerCase() === 'model' &amp;&amp;&#10;          item.Kategoria === category&#10;        );&#10;        renderOptions('model-thumbnails', models, item =&gt; loadModel(item));&#10;      }&#10;&#10;      // Funkcja renderująca promocje na starcie&#10;      function renderPromotions() {&#10;        const promotionalModels = allData.filter(item =&gt; &#10;          item.Typ &amp;&amp; item.Typ.toLowerCase() === 'model' &amp;&amp;&#10;          item.Promocja &amp;&amp; item.Promocja.trim() !== ''&#10;        );&#10;        &#10;        if (promotionalModels.length &gt; 0) {&#10;          renderOptions('model-thumbnails', promotionalModels, item =&gt; loadModel(item));&#10;          &#10;          // Aktywuj przycisk &quot;Wszystkie&quot; po wyświetleniu promocji&#10;          setTimeout(() =&gt; {&#10;            const allButton = document.querySelector('.category-button');&#10;            if (allButton) {&#10;              document.querySelectorAll('.category-button').forEach(btn =&gt; btn.classList.remove('active'));&#10;              allButton.classList.add('active');&#10;            }&#10;          }, 100);&#10;        }&#10;      }&#10;&#10;      // Funkcja odświeżająca wszystkie kafelki z filtrem&#10;      function refreshAllTiles() {&#10;        console.log(' Refreshing all tiles with filter:', currentSearchFilter);&#10;        &#10;                  // Odśwież modele główne (krzesła/kubełki)&#10;          if (allData &amp;&amp; Array.isArray(allData)) {&#10;            console.log(' Available groups:', [...new Set(allData.map(d =&gt; d.Grupa))]);&#10;            const filteredByGroup = allData.filter(d =&gt; &#10;              d.Kategoria &amp;&amp; &#10;              d.Kategoria.toLowerCase().includes('krzesła') &amp;&amp; &#10;              d.Typ &amp;&amp; &#10;              d.Typ.toLowerCase() === 'model'&#10;            );&#10;            console.log(' Filtered models before search filter:', filteredByGroup.map(d =&gt; ({ Nazwa: d.Nazwa, Grupa: d.Grupa, Kategoria: d.Kategoria, Typ: d.Typ })));&#10;            const mainModels = filteredByGroup.filter(matchesSearchFilter);&#10;            console.log(' After search filter:', mainModels.map(d =&gt; ({ Nazwa: d.Nazwa, Grupa: d.Grupa })));&#10;          if (currentSearchFilter) {&#10;            mainModels.sort((a, b) =&gt; getRelevance(b, currentSearchFilter) - getRelevance(a, currentSearchFilter));&#10;          }&#10;          console.log(' Rendering main models:', mainModels.length, 'with filter:', currentSearchFilter);&#10;          renderOptions('model-thumbnails', mainModels, item =&gt; loadModel(item));&#10;        }&#10;        &#10;        // Odśwież kafelki nóg jeśli są widoczne&#10;        const legsSection = document.getElementById('legs-section');&#10;        if (legsSection &amp;&amp; legsSection.style.display !== 'none' &amp;&amp; selectedChair) {&#10;          const legs = allData&#10;            .filter(d =&gt; d.Grupa.toLowerCase() === 'nogi')&#10;            .filter(d =&gt; !selectedChair || selectedChair.Grupa.toLowerCase() !== 'kubełek' || czyNogaPasujeDoKubełka(d, selectedChair.Nazwa))&#10;            .filter(matchesSearchFilter);&#10;          renderOptions('legs-thumbnails', legs, item =&gt; setLegModel(item));&#10;        }&#10;        &#10;        // Odśwież materiały jeśli są widoczne&#10;        const materialsSection = document.getElementById('materials-section');&#10;        if (materialsSection &amp;&amp; materialsSection.style.display !== 'none') {&#10;          // Znajdź aktywną zakładkę części&#10;          const activeTab = document.querySelector('#part-tabs .thumbnail.selected');&#10;          if (activeTab) {&#10;            const targetMesh = activeTab.dataset.key;&#10;            renderFilteredMaterialOptions(targetMesh);&#10;          }&#10;        }&#10;      }&#10;&#10;      // Funkcjonalność wyszukiwania&#10;      function initializeSearch() {&#10;        console.log(' Initializing search...');&#10;        console.log('DOM ready state:', document.readyState);&#10;        console.log('Available elements in DOM:', {&#10;          searchToggle: document.getElementById('search-toggle'),&#10;          searchPanel: document.getElementById('search-panel'),&#10;          searchInput: document.getElementById('search-input'),&#10;          searchResults: document.getElementById('search-results')&#10;        });&#10;        &#10;        const searchToggle = document.getElementById('search-toggle');&#10;        const searchPanel = document.getElementById('search-panel');&#10;        const searchInput = document.getElementById('search-input');&#10;        const searchResults = document.getElementById('search-results');&#10;        &#10;        console.log('Elements found:', {&#10;          toggle: !!searchToggle,&#10;          panel: !!searchPanel,&#10;          input: !!searchInput,&#10;          results: !!searchResults&#10;        });&#10;        &#10;        let isSearchOpen = false;&#10;&#10;        if (!searchToggle || !searchPanel) {&#10;          console.error('❌ Search elements not found');&#10;          console.log('HTML content around search:', document.getElementById('search-container')?.innerHTML);&#10;          return;&#10;        }&#10;&#10;        console.log('✅ Setting up search event listeners');&#10;        console.log('Initial panel styles:', {&#10;          position: window.getComputedStyle(searchPanel).position,&#10;          right: window.getComputedStyle(searchPanel).right,&#10;          opacity: window.getComputedStyle(searchPanel).opacity,&#10;          visibility: window.getComputedStyle(searchPanel).visibility,&#10;          zIndex: window.getComputedStyle(searchPanel).zIndex&#10;        });&#10;&#10;        // Toggle panel wyszukiwania&#10;        searchToggle.addEventListener('click', (e) =&gt; {&#10;          e.preventDefault();&#10;          e.stopPropagation();&#10;          console.log(' Search toggle clicked!', {&#10;            wasOpen: isSearchOpen,&#10;            willBeOpen: !isSearchOpen,&#10;            currentClasses: searchPanel.className&#10;          });&#10;          &#10;          isSearchOpen = !isSearchOpen;&#10;          &#10;          if (isSearchOpen) {&#10;            searchPanel.classList.add('active');&#10;            // Wymusz style bezpośrednio dla pewności&#10;            searchPanel.style.right = '20px';&#10;            searchPanel.style.opacity = '1';&#10;            searchPanel.style.visibility = 'visible';&#10;            console.log(' Panel opened');&#10;            setTimeout(() =&gt; searchInput &amp;&amp; searchInput.focus(), 200);&#10;          } else {&#10;            searchPanel.classList.remove('active');&#10;            searchPanel.style.right = '-320px';&#10;            searchPanel.style.opacity = '0';&#10;            searchPanel.style.visibility = 'hidden';&#10;            console.log(' Panel closed');&#10;            if (searchInput) searchInput.value = '';&#10;            if (searchResults) searchResults.innerHTML = '';&#10;            // Wyczyść filtr kafelków&#10;            setSearchFilter('');&#10;          }&#10;          &#10;          console.log('Panel state after toggle:', {&#10;            classes: searchPanel.className,&#10;            computedStyles: {&#10;              right: window.getComputedStyle(searchPanel).right,&#10;              opacity: window.getComputedStyle(searchPanel).opacity,&#10;              visibility: window.getComputedStyle(searchPanel).visibility&#10;            }&#10;          });&#10;        });&#10;&#10;        // Zamknij panel przy kliknięciu poza nim&#10;        document.addEventListener('click', (e) =&gt; {&#10;          if (!searchPanel.contains(e.target) &amp;&amp; !searchToggle.contains(e.target)) {&#10;            if (isSearchOpen) {&#10;              isSearchOpen = false;&#10;              searchPanel.classList.remove('active');&#10;              searchPanel.style.right = '-320px';&#10;              searchPanel.style.opacity = '0';&#10;              searchPanel.style.visibility = 'hidden';&#10;              if (searchInput) searchInput.value = '';&#10;              if (searchResults) searchResults.innerHTML = '';&#10;              // Wyczyść filtr kafelków&#10;              setSearchFilter('');&#10;            }&#10;          }&#10;        });&#10;&#10;        // Funkcja wyszukiwania&#10;        function performSearch(query) {&#10;          if (!query.trim() || !allData) return [];&#10;          &#10;          const searchTerm = query.toLowerCase().trim();&#10;          const results = [];&#10;&#10;          console.log(' Searching for:', searchTerm, 'in', allData.length, 'items');&#10;&#10;          // 1. Wyszukaj modele krzesła (Typ === 'model')&#10;          const modelItems = allData.filter(item =&gt; &#10;            item.Typ &amp;&amp; item.Typ.toLowerCase() === 'model'&#10;          );&#10;&#10;          console.log(' Found', modelItems.length, 'model items out of', allData.length, 'total items');&#10;&#10;          modelItems.forEach(item =&gt; {&#10;            let relevance = 0;&#10;            const searchableFields = [&#10;              { field: item.Nazwa, weight: 10 },&#10;              { field: item.Grupa, weight: 8 },&#10;              { field: item.Kolekcja, weight: 6 },&#10;              { field: item.Typ, weight: 4 },&#10;              { field: item.Opis, weight: 2 }&#10;            ];&#10;&#10;            searchableFields.forEach(({ field, weight }) =&gt; {&#10;              if (field &amp;&amp; field.toLowerCase().includes(searchTerm)) {&#10;                relevance += weight;&#10;                if (field.toLowerCase().startsWith(searchTerm)) {&#10;                  relevance += weight; // Bonus za dopasowanie od początku&#10;                }&#10;              }&#10;            });&#10;&#10;            if (relevance &gt; 0) {&#10;              console.log(' Found match:', item.Nazwa, 'Grupa:', item.Grupa, 'Kategoria:', item.Kategoria, 'relevance:', relevance);&#10;              // Dodaj informację o typie dla rozróżnienia w UI&#10;              item.searchType = 'chair';&#10;              results.push({ item, relevance });&#10;            }&#10;          });&#10;&#10;          console.log(' Total results:', results.length);&#10;          // 2. Wyszukaj materiały nóg (Grupa === 'materiały_nóg')&#10;          const legMaterials = allData.filter(item =&gt; &#10;            item.Grupa &amp;&amp; item.Grupa.toLowerCase() === 'materiały_nóg'&#10;          );&#10;&#10;          legMaterials.forEach(item =&gt; {&#10;            let relevance = 0;&#10;            const searchableFields = [&#10;              { field: item.Nazwa, weight: 10 },&#10;              { field: item.Grupa, weight: 8 },&#10;              { field: item.Kategoria, weight: 8 },&#10;              { field: item.Kolekcja, weight: 6 },&#10;              { field: item.Typ, weight: 4 },&#10;              { field: item.Opis, weight: 2 }&#10;            ];&#10;&#10;            searchableFields.forEach(({ field, weight }) =&gt; {&#10;              if (field &amp;&amp; field.toLowerCase().includes(searchTerm)) {&#10;                relevance += weight;&#10;                if (field.toLowerCase().startsWith(searchTerm)) {&#10;                  relevance += weight;&#10;                }&#10;              }&#10;            });&#10;&#10;            if (relevance &gt; 0) {&#10;              console.log(' Found leg material match:', item.Nazwa, 'Grupa:', item.Grupa, 'Kategoria:', item.Kategoria, 'relevance:', relevance);&#10;              // Dodaj informację o typie dla rozróżnienia w UI&#10;              item.searchType = 'leg-material';&#10;              results.push({ item, relevance });&#10;            }&#10;          });&#10;&#10;          // 3. Wyszukaj nogi (Grupa === 'nogi')&#10;          const legs = allData.filter(item =&gt; &#10;            item.Grupa &amp;&amp; item.Grupa.toLowerCase() === 'nogi'&#10;          );&#10;&#10;          legs.forEach(item =&gt; {&#10;            let relevance = 0;&#10;            const searchableFields = [&#10;              { field: item.Nazwa, weight: 10 },&#10;              { field: item.Grupa, weight: 8 },&#10;              { field: item.Kategoria, weight: 8 },&#10;              { field: item.Kolekcja, weight: 6 },&#10;              { field: item.Typ, weight: 4 },&#10;              { field: item.Opis, weight: 2 }&#10;            ];&#10;&#10;            searchableFields.forEach(({ field, weight }) =&gt; {&#10;              if (field &amp;&amp; field.toLowerCase().includes(searchTerm)) {&#10;                relevance += weight;&#10;                if (field.toLowerCase().startsWith(searchTerm)) {&#10;                  relevance += weight;&#10;                }&#10;              }&#10;            });&#10;&#10;            if (relevance &gt; 0) {&#10;              console.log(' Found leg match:', item.Nazwa, 'Grupa:', item.Grupa, 'Kategoria:', item.Kategoria, 'relevance:', relevance);&#10;              // Dodaj informację o typie dla rozróżnienia w UI&#10;              item.searchType = 'leg';&#10;              results.push({ item, relevance });&#10;            }&#10;          });&#10;&#10;          return results&#10;            .sort((a, b) =&gt; b.relevance - a.relevance)&#10;            .slice(0, 10)&#10;            .map(r =&gt; r.item);&#10;        }&#10;&#10;        // Handler wpisywania w pole wyszukiwania&#10;        searchInput.addEventListener('input', (e) =&gt; {&#10;          const query = e.target.value;&#10;          searchResults.innerHTML = '';&#10;&#10;          // Ustaw filtr dla kafelków w sidebarze&#10;          setSearchFilter(query);&#10;&#10;          if (query.trim().length &lt; 2) {&#10;            // Jeśli zapytanie za krótkie, wyczyść tylko wyniki popup'a ale zostaw filtr&#10;            return;&#10;          }&#10;&#10;          const results = performSearch(query);&#10;          &#10;          if (results.length === 0) {&#10;            const noResultsDiv = document.createElement('div');&#10;            noResultsDiv.className = 'search-result-item text-only';&#10;            noResultsDiv.innerHTML = '&lt;div class=&quot;result-name&quot;&gt;Brak wyników&lt;/div&gt;';&#10;            noResultsDiv.style.cursor = 'default';&#10;            noResultsDiv.style.opacity = '0.7';&#10;            searchResults.appendChild(noResultsDiv);&#10;            return;&#10;          }&#10;&#10;          results.forEach(item =&gt; {&#10;            const resultDiv = document.createElement('div');&#10;            resultDiv.className = 'search-result-item';&#10;            &#10;            const name = item.Nazwa || 'Bez nazwy';&#10;            const category = item.Kategoria || item.Grupa || '';&#10;            const image = item.Obrazek || item.Image;&#10;            &#10;            // Dodaj etykietę typu elementu&#10;            let typeLabel = '';&#10;            if (item.searchType === 'chair') {&#10;              typeLabel = 'Krzesło';&#10;            } else if (item.searchType === 'leg-material') {&#10;              typeLabel = 'Materiał nóg';&#10;            } else if (item.searchType === 'leg') {&#10;              typeLabel = 'Nogi';&#10;            }&#10;            &#10;            if (image) {&#10;              // Kafelek z obrazkiem&#10;              resultDiv.innerHTML = `&#10;                &lt;img src=&quot;${image}&quot; alt=&quot;${name}&quot; onerror=&quot;this.style.display='none'&quot;&gt;&#10;                &lt;div class=&quot;result-name&quot;&gt;${name}&lt;/div&gt;&#10;                &lt;div class=&quot;result-category&quot;&gt;${category}&lt;/div&gt;&#10;                ${typeLabel ? `&lt;div class=&quot;result-type&quot;&gt;${typeLabel}&lt;/div&gt;` : ''}&#10;              `;&#10;            } else {&#10;              // Fallback tekstowy dla elementów bez obrazków&#10;              resultDiv.className += ' text-only';&#10;              resultDiv.innerHTML = `&#10;                &lt;div class=&quot;result-name&quot;&gt;${name}&lt;/div&gt;&#10;                &lt;div class=&quot;result-category&quot;&gt;${category}&lt;/div&gt;&#10;                ${typeLabel ? `&lt;div class=&quot;result-type&quot;&gt;${typeLabel}&lt;/div&gt;` : ''}&#10;              `;&#10;            }&#10;&#10;            resultDiv.addEventListener('click', () =&gt; {&#10;              selectSearchResult(item, query);&#10;              isSearchOpen = false;&#10;              searchPanel.classList.remove('active');&#10;              searchPanel.style.right = '-320px';&#10;              searchPanel.style.opacity = '0';&#10;              searchPanel.style.visibility = 'hidden';&#10;              if (searchInput) searchInput.value = '';&#10;              if (searchResults) searchResults.innerHTML = '';&#10;              // Wyczyść filtr kafelków po wyborze wyniku&#10;              setSearchFilter('');&#10;            });&#10;&#10;            searchResults.appendChild(resultDiv);&#10;          });&#10;        });&#10;&#10;        // Obsługa Enter w polu wyszukiwania&#10;        searchInput.addEventListener('keydown', (e) =&gt; {&#10;          if (e.key === 'Enter') {&#10;            const firstResult = searchResults.querySelector('.search-result-item:not([style*=&quot;cursor: default&quot;])');&#10;            if (firstResult) {&#10;              firstResult.click();&#10;            }&#10;          }&#10;        });&#10;      }&#10;&#10;      // Funkcja obsługi wybranego wyniku wyszukiwania&#10;      function selectSearchResult(item, query) {&#10;        // Pokaż modal wyboru&#10;        showSearchChoiceModal(item, query);&#10;      }&#10;&#10;      // Funkcja pokazywania modala wyboru&#10;      function showSearchChoiceModal(item, query) {&#10;        const modal = document.getElementById('search-choice-modal');&#10;        const itemImg = document.getElementById('search-choice-item-img');&#10;        const itemName = document.getElementById('search-choice-item-name');&#10;        const itemCategory = document.getElementById('search-choice-item-category');&#10;        const viewOptionsBtn = document.getElementById('search-choice-view-options');&#10;        const goToChairBtn = document.getElementById('search-choice-go-to-chair');&#10;&#10;        // Ustaw dane elementu&#10;        const name = item.Nazwa || 'Bez nazwy';&#10;        const category = item.Kategoria || item.Grupa || '';&#10;        const image = item.Obrazek || item.Image;&#10;        &#10;        itemName.textContent = name;&#10;        itemCategory.textContent = category;&#10;        &#10;        if (image) {&#10;          itemImg.src = image;&#10;          itemImg.style.display = 'block';&#10;        } else {&#10;          itemImg.style.display = 'none';&#10;        }&#10;&#10;        // Pokaż modal&#10;        modal.classList.add('active');&#10;&#10;        // Dostosuj przyciski w zależności od typu elementu&#10;        if (item.searchType === 'chair') {&#10;          goToChairBtn.style.display = 'block';&#10;          goToChairBtn.textContent = 'Przejdź do krzesła';&#10;          viewOptionsBtn.style.flex = '';&#10;        } else if (item.searchType === 'leg-material') {&#10;          goToChairBtn.style.display = 'block';&#10;          goToChairBtn.textContent = 'Pokaż kompatybilne krzesła';&#10;          viewOptionsBtn.style.flex = '';&#10;        } else if (item.searchType === 'leg') {&#10;          goToChairBtn.style.display = 'block';&#10;          goToChairBtn.textContent = 'Pokaż kompatybilne krzesła';&#10;          viewOptionsBtn.style.flex = '';&#10;        } else {&#10;          // Fallback na starą logikę&#10;          const group = item.Grupa?.toLowerCase();&#10;          if (group === 'krzesło' || group === 'kubełek') {&#10;            goToChairBtn.style.display = 'block';&#10;            goToChairBtn.textContent = 'Przejdź do krzesła';&#10;            viewOptionsBtn.style.flex = '';&#10;          } else if (group === 'tkanina' || group === 'materiały_nóg') {&#10;            goToChairBtn.style.display = 'block';&#10;            goToChairBtn.textContent = 'Zastosuj materiał';&#10;            viewOptionsBtn.style.flex = '';&#10;          } else if (group === 'nogi') {&#10;            goToChairBtn.style.display = 'block';&#10;            goToChairBtn.textContent = 'Zastosuj nogi';&#10;            viewOptionsBtn.style.flex = '';&#10;          } else {&#10;            goToChairBtn.style.display = 'none';&#10;            viewOptionsBtn.style.flex = '1';&#10;          }&#10;        }&#10;&#10;        // Obsługa przycisku &quot;Wyniki wyszukiwania&quot;&#10;        viewOptionsBtn.onclick = () =&gt; {&#10;          modal.classList.remove('active');&#10;          document.removeEventListener('keydown', handleEscape);&#10;          // Pokaż welcome screen&#10;          const welcomeScreen = document.getElementById('welcome-screen');&#10;          if (welcomeScreen) {&#10;            welcomeScreen.style.display = 'flex';&#10;          }&#10;          // Przełącz na ekran modeli, żeby pokazać kafelki&#10;          showScreen('search-results');&#10;          // Ustaw filtr wyszukiwania na query (fraza z inputa)&#10;          setSearchFilter(query);&#10;          // Odśwież wszystkie kafelki z nowym filtrem&#10;          refreshAllTiles();&#10;          // Zamknij panel wyszukiwania&#10;          const searchPanel = document.getElementById('search-panel');&#10;          const searchInput = document.getElementById('search-input');&#10;          if (searchPanel) {&#10;            searchPanel.classList.remove('active');&#10;            searchPanel.style.right = '-320px';&#10;            searchPanel.style.opacity = '0';&#10;            searchPanel.style.visibility = 'hidden';&#10;          }&#10;          if (searchInput) searchInput.value = '';&#10;          // Wyczyść wyniki wyszukiwania w panelu&#10;          const searchResults = document.getElementById('search-results');&#10;          if (searchResults) searchResults.innerHTML = '';&#10;        };&#10;&#10;        // Obsługa przycisku &quot;Przejdź do krzesła&quot;&#10;        goToChairBtn.onclick = () =&gt; {&#10;          modal.classList.remove('active');&#10;          document.removeEventListener('keydown', handleEscape);&#10;          // Zamknij panel wyszukiwania&#10;          const searchPanel = document.getElementById('search-panel');&#10;          const searchInput = document.getElementById('search-input');&#10;          if (searchPanel) {&#10;            searchPanel.classList.remove('active');&#10;            searchPanel.style.right = '-320px';&#10;            searchPanel.style.opacity = '0';&#10;            searchPanel.style.visibility = 'hidden';&#10;          }&#10;          if (searchInput) searchInput.value = '';&#10;          // Wyczyść filtr wyszukiwania&#10;          setSearchFilter('');&#10;          // Wykonaj oryginalną logikę&#10;          executeSearchResultAction(item);&#10;          // Odśwież wszystkie kafelki bez filtra&#10;          refreshAllTiles();&#10;          // Ukryj welcome screen&#10;          const welcomeScreen = document.getElementById('welcome-screen');&#10;          if (welcomeScreen) {&#10;            welcomeScreen.style.display = 'none';&#10;          }&#10;        };&#10;&#10;        // Zamknij modal przy kliknięciu poza nim&#10;        modal.onclick = (e) =&gt; {&#10;          if (e.target === modal) {&#10;            modal.classList.remove('active');&#10;            document.removeEventListener('keydown', handleEscape);&#10;          }&#10;        };&#10;&#10;        // Zamknij modal przy naciśnięciu Escape&#10;        const handleEscape = (e) =&gt; {&#10;          if (e.key === 'Escape') {&#10;            modal.classList.remove('active');&#10;            document.removeEventListener('keydown', handleEscape);&#10;          }&#10;        };&#10;        document.addEventListener('keydown', handleEscape);&#10;      }&#10;&#10;      // Funkcja wykonująca akcję po wyborze w modalu&#10;      function executeSearchResultAction(item) {&#10;        // Sprawdź typ elementu na podstawie searchType&#10;        if (item.searchType === 'chair') {&#10;          // Wybierz model krzesła&#10;          loadModel(item);&#10;        } else if (item.searchType === 'leg-material') {&#10;          // Jeśli to materiał nóg, pokaż krzesła które mogą mieć ten materiał&#10;          showChairsWithMaterial(item);&#10;        } else if (item.searchType === 'leg') {&#10;          // Jeśli to nogi, pokaż krzesła które mogą mieć te nogi&#10;          showChairsWithLegs(item);&#10;        } else {&#10;          // Fallback na starą logikę&#10;          const group = item.Grupa?.toLowerCase();&#10;          &#10;          if (group === 'krzesło' || group === 'kubełek') {&#10;            loadModel(item);&#10;          } else if (group === 'tkanina' || group === 'materiały_nóg') {&#10;            if (selectedChair) {&#10;              if (item.TargetMeshOrModel) {&#10;                applyMaterial(item);&#10;              }&#10;              showScreen('config');&#10;            } else {&#10;              alert('Najpierw wybierz model krzesła');&#10;            }&#10;          } else if (group === 'nogi') {&#10;            if (selectedChair &amp;&amp; selectedChair.Grupa?.toLowerCase() === 'kubełek') {&#10;              setLegModel(item);&#10;              showScreen('config');&#10;            } else {&#10;              alert('Nogi można wybierać tylko dla kubełków');&#10;            }&#10;          }&#10;        }&#10;      }&#10;&#10;      // Funkcja pokazująca krzesła z określonym materiałem nóg&#10;      function showChairsWithMaterial(material) {&#10;        console.log(' Looking for chairs compatible with material:', material.Nazwa);&#10;        console.log(' Material data:', material);&#10;        &#10;        // Znajdź krzesła które mogą mieć ten materiał&#10;        const allChairs = allData.filter(item =&gt; &#10;          item.Typ &amp;&amp; item.Typ.toLowerCase() === 'model' &amp;&amp;&#10;          item.Kategoria &amp;&amp; item.Kategoria.toLowerCase().includes('krzesła')&#10;        );&#10;        &#10;        console.log(' All chairs found:', allChairs.map(c =&gt; ({ Nazwa: c.Nazwa, Grupa: c.Grupa })));&#10;        &#10;        const compatibleChairs = allChairs.filter(chair =&gt; {&#10;          // Sprawdź czy materiał jest kompatybilny z krzesłem&#10;          if (!material.DlaKrzesła) {&#10;            console.log(' No DlaKrzesła field for material:', material.Nazwa);&#10;            return false;&#10;          }&#10;          &#10;          const materialChairs = material.DlaKrzesła.toLowerCase().split(',').map(s =&gt; s.trim());&#10;          const chairName = chair.Nazwa.toLowerCase().trim();&#10;          &#10;          console.log(' Checking chair:', chairName, 'against material chairs:', materialChairs);&#10;          &#10;          return materialChairs.some(materialChair =&gt; &#10;            materialChair.includes(chairName) || chairName.includes(materialChair)&#10;          );&#10;        });&#10;&#10;        console.log(' Compatible chairs:', compatibleChairs.map(c =&gt; c.Nazwa));&#10;&#10;        if (compatibleChairs.length &gt; 0) {&#10;          // Pokaż welcome screen&#10;          const welcomeScreen = document.getElementById('welcome-screen');&#10;          if (welcomeScreen) {&#10;            welcomeScreen.style.display = 'flex';&#10;          }&#10;          showScreen('search-results');&#10;          &#10;          // Bezpośrednio wyświetl kompatybilne krzesła&#10;          console.log(' Directly rendering compatible chairs:', compatibleChairs.map(c =&gt; c.Nazwa));&#10;          // Wyczyść kontener i wyświetl kompatybilne krzesła&#10;          const container = document.getElementById('model-thumbnails');&#10;          if (container) {&#10;            container.innerHTML = '';&#10;            compatibleChairs.forEach(item =&gt; {&#10;              const wrapper = document.createElement('div');&#10;              wrapper.className = 'thumbnail-wrapper';&#10;              const button = document.createElement('div');&#10;              button.className = 'thumbnail';&#10;              button.title = item.Nazwa;&#10;              &#10;              const img = document.createElement('img');&#10;              img.src = item.Obrazek &amp;&amp; item.Obrazek.length &gt; 4 ? item.Obrazek : 'icons/placeholder.svg';&#10;              img.alt = item.Nazwa;&#10;              button.appendChild(img);&#10;              &#10;              const caption = document.createElement('div');&#10;              caption.className = 'thumbnail-caption';&#10;              caption.textContent = item.Nazwa;&#10;              &#10;              wrapper.appendChild(button);&#10;              wrapper.appendChild(caption);&#10;              container.appendChild(wrapper);&#10;              &#10;              button.addEventListener('click', () =&gt; loadModel(item));&#10;            });&#10;          }&#10;          &#10;          alert(`Znaleziono ${compatibleChairs.length} krzeseł kompatybilnych z materiałem &quot;${material.Nazwa}&quot;: ${compatibleChairs.map(c =&gt; c.Nazwa).join(', ')}`);&#10;        } else {&#10;          alert(`Nie znaleziono krzeseł kompatybilnych z materiałem &quot;${material.Nazwa}&quot;`);&#10;        }&#10;      }&#10;&#10;      // Funkcja pokazująca krzesła z określonymi nogami&#10;      function showChairsWithLegs(legs) {&#10;        console.log(' Looking for chairs compatible with legs:', legs.Nazwa);&#10;        console.log(' Legs data:', legs);&#10;        &#10;        // Znajdź krzesła które mogą mieć te nogi&#10;        const allChairs = allData.filter(item =&gt; &#10;          item.Typ &amp;&amp; item.Typ.toLowerCase() === 'model' &amp;&amp;&#10;          item.Kategoria &amp;&amp; item.Kategoria.toLowerCase().includes('krzesła')&#10;        );&#10;        &#10;        console.log(' All chairs found:', allChairs.map(c =&gt; ({ Nazwa: c.Nazwa, Grupa: c.Grupa })));&#10;        &#10;        const compatibleChairs = allChairs.filter(chair =&gt; {&#10;          // Sprawdź czy nogi są kompatybilne z krzesłem&#10;          if (!legs.DlaModeluNóg) {&#10;            console.log(' No DlaModeluNóg field for legs:', legs.Nazwa);&#10;            return false;&#10;          }&#10;          &#10;          const legChairs = legs.DlaModeluNóg.toLowerCase().split(',').map(s =&gt; s.trim());&#10;          const chairName = chair.Nazwa.toLowerCase().trim();&#10;          &#10;          console.log(' Checking chair:', chairName, 'against leg chairs:', legChairs);&#10;          &#10;          return legChairs.some(legChair =&gt; &#10;            legChair.includes(chairName) || chairName.includes(legChair)&#10;          );&#10;        });&#10;&#10;        console.log(' Compatible chairs:', compatibleChairs.map(c =&gt; c.Nazwa));&#10;&#10;        if (compatibleChairs.length &gt; 0) {&#10;          // Pokaż welcome screen&#10;          const welcomeScreen = document.getElementById('welcome-screen');&#10;          if (welcomeScreen) {&#10;            welcomeScreen.style.display = 'flex';&#10;          }&#10;          showScreen('search-results');&#10;          &#10;          // Bezpośrednio wyświetl kompatybilne krzesła&#10;          console.log(' Directly rendering compatible chairs:', compatibleChairs.map(c =&gt; c.Nazwa));&#10;          // Wyczyść kontener i wyświetl kompatybilne krzesła&#10;          const container = document.getElementById('model-thumbnails');&#10;          if (container) {&#10;            container.innerHTML = '';&#10;            compatibleChairs.forEach(item =&gt; {&#10;              const wrapper = document.createElement('div');&#10;              wrapper.className = 'thumbnail-wrapper';&#10;              const button = document.createElement('div');&#10;              button.className = 'thumbnail';&#10;              button.title = item.Nazwa;&#10;              &#10;              const img = document.createElement('img');&#10;              img.src = item.Obrazek &amp;&amp; item.Obrazek.length &gt; 4 ? item.Obrazek : 'icons/placeholder.svg';&#10;              img.alt = item.Nazwa;&#10;              button.appendChild(img);&#10;              &#10;              const caption = document.createElement('div');&#10;              caption.className = 'thumbnail-caption';&#10;              caption.textContent = item.Nazwa;&#10;              &#10;              wrapper.appendChild(button);&#10;              wrapper.appendChild(caption);&#10;              container.appendChild(wrapper);&#10;              &#10;              button.addEventListener('click', () =&gt; loadModel(item));&#10;            });&#10;          }&#10;          &#10;          alert(`Znaleziono ${compatibleChairs.length} krzeseł kompatybilnych z nogami &quot;${legs.Nazwa}&quot;: ${compatibleChairs.map(c =&gt; c.Nazwa).join(', ')}`);&#10;        } else {&#10;          alert(`Nie znaleziono krzeseł kompatybilnych z nogami &quot;${legs.Nazwa}&quot;`);&#10;        }&#10;      }&#10;&#10;      // Inicjalizuj wyszukiwanie po załadowaniu danych&#10;      window.addEventListener('load', () =&gt; {&#10;        setTimeout(initializeSearch, 500);&#10;      });&#10;&#10;      // Dodatkowa inicjalizacja po DOM&#10;      document.addEventListener('DOMContentLoaded', () =&gt; {&#10;        setTimeout(initializeSearch, 100);&#10;      });&#10;&#10;      // Jeszcze jedna inicjalizacja na wszelki wypadek&#10;      if (document.readyState === 'loading') {&#10;        document.addEventListener('DOMContentLoaded', () =&gt; initializeSearch());&#10;      } else {&#10;        // DOM już załadowany&#10;        setTimeout(initializeSearch, 50);&#10;      }&#10;&#10;    &#10;&#10;      // Sprawdzenie czy strona została załadowana z cache&#10;      window.addEventListener('load', function() {&#10;        // Sprawdź czy to było nawigacja z cache&#10;        const navigationEntries = performance.getEntriesByType('navigation');&#10;        if (navigationEntries.length &gt; 0) {&#10;          const nav = navigationEntries[0];&#10;          // Jeśli transferSize jest 0 lub bardzo mały, prawdopodobnie z cache&#10;          if (nav.transferSize &lt; 1000 &amp;&amp; nav.type === 'reload') {&#10;            console.log('Page loaded from cache, forcing hard reload...');&#10;            // Opóźnienie aby nie powodować pętli&#10;            setTimeout(() =&gt; {&#10;              window.location.reload(true);&#10;            }, 100);&#10;            return;&#10;          }&#10;        }&#10;      });&#10;&#10;      // Funkcja czyszczenia cache&#10;      function clearAllCaches() {&#10;        if ('caches' in window) {&#10;          caches.keys().then(cacheNames =&gt; {&#10;            cacheNames.forEach(cacheName =&gt; {&#10;              caches.delete(cacheName);&#10;              console.log('Cleared cache:', cacheName);&#10;            });&#10;          });&#10;        }&#10;      }&#10;&#10;      // Funkcja wymuszenia aktualizacji SW&#10;      function forceSwUpdate() {&#10;        if ('serviceWorker' in navigator) {&#10;          navigator.serviceWorker.getRegistrations().then(registrations =&gt; {&#10;            registrations.forEach(registration =&gt; {&#10;              registration.update();&#10;            });&#10;          });&#10;        }&#10;      }&#10;&#10;      // Sprawdzenie czy strona była odświeżona normalnie (nie hard refresh)&#10;      const perfEntries = performance.getEntriesByType('navigation');&#10;      if (perfEntries.length &gt; 0) {&#10;        const navType = perfEntries[0].type;&#10;        if (navType === 'reload' || navType === 'navigate') {&#10;          console.log('Clearing caches on normal reload...');&#10;          clearAllCaches();&#10;          forceSwUpdate();&#10;        }&#10;      }&#10;&#10;      // Rejestracja Service Workera z obsługą aktualizacji&#10;      if ('serviceWorker' in navigator) {&#10;        navigator.serviceWorker.register('service-worker.js')&#10;          .then(registration =&gt; {&#10;            console.log('Service Worker registered');&#10;            &#10;            // Sprawdź aktualizacje&#10;            registration.addEventListener('updatefound', () =&gt; {&#10;              const newWorker = registration.installing;&#10;              newWorker.addEventListener('statechange', () =&gt; {&#10;                if (newWorker.state === 'installed' &amp;&amp; navigator.serviceWorker.controller) {&#10;                  console.log('New SW available, reloading...');&#10;                  window.location.reload();&#10;                }&#10;              });&#10;            });&#10;          })&#10;          .catch(err =&gt; console.error('SW registration failed:', err));&#10;&#10;        // Słuchaj komunikatów od SW&#10;        navigator.serviceWorker.addEventListener('message', event =&gt; {&#10;          if (event.data.type === 'CACHE_UPDATED') {&#10;            console.log('Cache updated, reloading...');&#10;            window.location.reload();&#10;          }&#10;        });&#10;      }&#10;&#10;      // Pokaż/ukryj popup&#10;      const emailModal = document.getElementById('emailModal');&#10;      const closeBtn = emailModal.querySelector('.close-button');&#10;      const buyButton = document.getElementById('buy-button');&#10;      const emailForm = document.getElementById('emailForm');&#10;      const successMessage = document.getElementById('success-message');&#10;&#10;      buyButton.addEventListener('click', () =&gt; {&#10;        emailModal.classList.remove('hidden');&#10;        emailModal.classList.add('visible');&#10;        successMessage.classList.remove('visible'); // ukryj komunikat na otwarciu&#10;        successMessage.classList.add('hidden');&#10;      });&#10;&#10;      closeBtn.addEventListener('click', () =&gt; {&#10;        emailModal.classList.remove('visible');&#10;        emailModal.classList.add('hidden');&#10;      });&#10;&#10;      emailModal.addEventListener('click', (e) =&gt; {&#10;        if (e.target === emailModal) {&#10;          emailModal.classList.remove('visible');&#10;          emailModal.classList.add('hidden');&#10;        }&#10;      });&#10;&#10;      emailForm.addEventListener('submit', (e) =&gt; {&#10;        e.preventDefault();&#10;&#10;        // Tutaj wysyłka danych formularza (jeśli masz backend)&#10;        // Można dodać fetch lub EmailJS&#10;&#10;        // Po wysłaniu:&#10;        emailModal.classList.remove('visible');&#10;        emailModal.classList.add('hidden');&#10;&#10;        successMessage.classList.remove('hidden');&#10;        successMessage.classList.add('visible');&#10;&#10;        setTimeout(() =&gt; {&#10;          successMessage.classList.remove('visible');&#10;          successMessage.classList.add('hidden');&#10;        }, 3000);&#10;&#10;        emailForm.reset(); // wyczyść formularz&#10;      });&#10;&#10;&#10;      const btn = document.getElementById('dimensions-show');&#10;      if (btn) {&#10;        btn.onclick = (e) =&gt; {&#10;          e.preventDefault();&#10;          e.stopPropagation();&#10;          console.log(&quot; Kliknięto przycisk wymiarów&quot;);&#10;          toggleDimensions();&#10;        };&#10;      }&#10;&#10;&#10;      // Po inicjalizacji (czyli gdy masz już modele i przyciski):&#10;      document.querySelectorAll(&quot;.export-btn&quot;).forEach(button =&gt; {&#10;        button.addEventListener(&quot;click&quot;, () =&gt; {&#10;          const format = button.getAttribute(&quot;data-format&quot;);&#10;          handleExport(format);&#10;        });&#10;      });&#10;&#10;&#10;&#10;  &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pl&quot;&gt;&#10;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no&quot; /&gt;&#10;  &lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;&#10;  &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;&#10;  &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;&#10;  &lt;title&gt;Konfigurator krzeseł - Fajne Krzesła&lt;/title&gt;&#10;  &lt;link rel=&quot;icon&quot; href=&quot;icons/favicon.png&quot; type=&quot;image/jpeg&quot; /&gt;&#10;  &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache, no-store, must-revalidate&quot; /&gt;&#10;  &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot; /&gt;&#10;  &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot; /&gt;&#10;&#10;  &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&amp;display=swap&quot; rel=&quot;stylesheet&quot; /&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;threepipe&quot;: &quot;https://unpkg.com/threepipe@latest/dist/index.mjs&quot;,&#10;    &quot;@threepipe/webgi-plugins&quot;: &quot;https://unpkg.com/@threepipe/webgi-plugins@latest/dist/index.mjs&quot;,&#10;    &quot;three&quot;: &quot;https://unpkg.com/three@0.157.0/build/three.module.js&quot;&#10;    &#10;&#10;    &#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;  &lt;style&gt;&#10;    html,&#10;    body {&#10;      margin: 0;&#10;      padding: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      overflow: hidden;&#10;      font-family: 'Poppins', sans-serif;&#10;    }&#10;&#10;    #app {&#10;      display: flex;&#10;      height: 100vh;&#10;      width: 100vw;&#10;      position: relative;&#10;      visibility: hidden;&#10;    }&#10;&#10;    #app.visible {&#10;  visibility: visible;&#10;  opacity: 1;&#10;}&#10;&#10;    #canvas {&#10;      width: 100%;&#10;      height: 100%;&#10;      display: block;&#10;    }&#10;&#10;    body {&#10;      background: #ededed80;&#10;      /* przezroczyste tło, lepszy blur */&#10;    }&#10;&#10;    /* Panele UI: identyczna przezroczystość i blur obu paneli */&#10;    #sidebar,&#10;    #config-overview {&#10;      background: #fff;&#10;      border-radius: 16px;&#10;      box-shadow: 0 4px 32px rgba(0, 0, 0, 0.10);&#10;      border: 1px solid rgba(0, 0, 0, 0.08);&#10;    }&#10;&#10;    #sidebar {&#10;      flex: 0 0 460px;&#10;      min-width: 460px;&#10;      max-width: 540px;&#10;      padding: 32px 24px 24px 24px;&#10;      z-index: 1200;&#10;      display: flex;&#10;      flex-direction: column;&#10;      height: 100vh;&#10;      box-sizing: border-box;&#10;      overflow-y: auto;&#10;      overflow-x: visible;&#10;      position: relative;&#10;      /* NIE dodawaj background! */&#10;    }&#10;&#10;    #sidebar-content {&#10;      flex-grow: 1;&#10;      overflow-y: auto;&#10;    }&#10;&#10;    /* Pole wyszukiwania w lewym sidebar'ze po prawej stronie */&#10;    #search-container {&#10;      position: absolute;&#10;      top: 20px;&#10;      right: 20px;&#10;      z-index: 1300;&#10;    }&#10;&#10;    #search-toggle {&#10;      background: #F5C842;&#10;      border: none;&#10;      border-radius: 50%;&#10;      width: 44px;&#10;      height: 44px;&#10;      cursor: pointer;&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);&#10;      transition: all 0.3s ease;&#10;    }&#10;&#10;    #search-toggle:hover {&#10;      background: #E5B432;&#10;      transform: scale(1.05);&#10;    }&#10;&#10;    #search-toggle svg {&#10;      width: 20px;&#10;      height: 20px;&#10;      fill: #333;&#10;    }&#10;&#10;    #search-panel {&#10;      position: fixed !important;&#10;      top: 70px !important;&#10;      right: -320px !important;&#10;      width: 320px !important;&#10;      max-width: calc(100vw - 40px) !important;&#10;      background: rgba(255, 255, 255, 0.98) !important;&#10;      backdrop-filter: blur(15px) !important;&#10;      border-radius: 12px !important;&#10;      padding: 16px !important;&#10;      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2) !important;&#10;      opacity: 0 !important;&#10;      visibility: hidden !important;&#10;      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;&#10;      z-index: 1400 !important;&#10;      transform: translateX(0) !important;&#10;    }&#10;&#10;    #search-panel.active {&#10;      right: 20px !important;&#10;      opacity: 1 !important;&#10;      visibility: visible !important;&#10;      transform: translateX(0) !important;&#10;    }&#10;&#10;    #search-input {&#10;      width: 100%;&#10;      border: 2px solid #F5C842;&#10;      border-radius: 8px;&#10;      padding: 12px 16px;&#10;      font-size: 16px;&#10;      outline: none;&#10;      background: white;&#10;      box-sizing: border-box;&#10;    }&#10;&#10;    #search-input::placeholder {&#10;      color: #888;&#10;    }&#10;&#10;    #search-input:focus {&#10;      border-color: #E5B432;&#10;      box-shadow: 0 0 0 3px rgba(245, 200, 66, 0.2);&#10;    }&#10;&#10;    #search-results {&#10;      margin-top: 8px;&#10;      max-height: 300px;&#10;      overflow-y: auto;&#10;      display: grid;&#10;      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));&#10;      gap: 8px;&#10;    }&#10;&#10;    .search-result-item {&#10;      display: flex;&#10;      flex-direction: column;&#10;      align-items: center;&#10;      padding: 8px;&#10;      border-radius: 8px;&#10;      cursor: pointer;&#10;      transition: all 0.2s ease;&#10;      border: 2px solid transparent;&#10;      background: rgba(255, 255, 255, 0.9);&#10;      text-align: center;&#10;    }&#10;&#10;    .search-result-item:hover {&#10;      background: rgba(245, 200, 66, 0.15);&#10;      border-color: #F5C842;&#10;      transform: translateY(-2px);&#10;    }&#10;&#10;    .search-result-item img {&#10;      width: 50px;&#10;      height: 50px;&#10;      object-fit: cover;&#10;      border-radius: 6px;&#10;      margin-bottom: 4px;&#10;    }&#10;&#10;    .search-result-item .result-name {&#10;      font-size: 11px;&#10;      font-weight: 600;&#10;      color: #333;&#10;      margin-bottom: 2px;&#10;      line-height: 1.2;&#10;    }&#10;&#10;    .search-result-item .result-category {&#10;      font-size: 10px;&#10;      color: #666;&#10;      line-height: 1.1;&#10;    }&#10;&#10;    /* Fallback dla wyników bez obrazków */&#10;    .search-result-item.text-only {&#10;      grid-column: 1 / -1;&#10;      flex-direction: row;&#10;      justify-content: flex-start;&#10;      text-align: left;&#10;      padding: 8px 12px;&#10;    }&#10;&#10;    .search-result-item.text-only .result-name {&#10;      font-size: 14px;&#10;      margin-bottom: 0;&#10;      margin-right: 8px;&#10;    }&#10;&#10;    .search-result-item.text-only .result-category {&#10;      font-size: 12px;&#10;    }&#10;&#10;    .search-result-item .result-type {&#10;      font-size: 10px;&#10;      color: #F5C842;&#10;      font-weight: 600;&#10;      margin-top: 2px;&#10;      text-transform: uppercase;&#10;      letter-spacing: 0.5px;&#10;    }&#10;&#10;    /* Przyciski kategorii */&#10;    .category-button {&#10;      padding: 8px 16px;&#10;      border: 2px solid #F5C842;&#10;      background: white;&#10;      color: #333;&#10;      border-radius: 20px;&#10;      font-size: 14px;&#10;      font-weight: 600;&#10;      cursor: pointer;&#10;      transition: all 0.2s ease;&#10;      text-transform: capitalize;&#10;    }&#10;&#10;    .category-button:hover {&#10;      background: #F5C842;&#10;      color: white;&#10;      transform: translateY(-1px);&#10;    }&#10;&#10;    .category-button.active {&#10;      background: #F5C842;&#10;      color: white;&#10;    }&#10;&#10;    .category-button.promotion {&#10;      border-color: #FF6B6B;&#10;      color: #FF6B6B;&#10;    }&#10;&#10;    .category-button.promotion:hover,&#10;    .category-button.promotion.active {&#10;      background: #FF6B6B;&#10;      color: white;&#10;    }&#10;&#10;    /* Modal wyboru akcji po wyszukiwaniu */&#10;    #search-choice-modal {&#10;      position: fixed;&#10;      top: 0;&#10;      left: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      background: rgba(0, 0, 0, 0.5);&#10;      display: none;&#10;      justify-content: center;&#10;      align-items: center;&#10;      z-index: 2000;&#10;      backdrop-filter: blur(5px);&#10;    }&#10;&#10;    #search-choice-modal.active {&#10;      display: flex;&#10;    }&#10;&#10;    .search-choice-content {&#10;      background: white;&#10;      border-radius: 16px;&#10;      padding: 24px;&#10;      max-width: 400px;&#10;      width: 90%;&#10;      text-align: center;&#10;      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);&#10;      animation: modalSlideIn 0.3s ease;&#10;    }&#10;&#10;    @keyframes modalSlideIn {&#10;      from {&#10;        opacity: 0;&#10;        transform: translateY(-20px) scale(0.95);&#10;      }&#10;      to {&#10;        opacity: 1;&#10;        transform: translateY(0) scale(1);&#10;      }&#10;    }&#10;&#10;    .search-choice-title {&#10;      font-size: 18px;&#10;      font-weight: 600;&#10;      margin-bottom: 16px;&#10;      color: #333;&#10;    }&#10;&#10;    .search-choice-item {&#10;      display: flex;&#10;      align-items: center;&#10;      margin-bottom: 16px;&#10;      padding: 12px;&#10;      border-radius: 8px;&#10;      background: #f8f9fa;&#10;      border: 2px solid transparent;&#10;    }&#10;&#10;    .search-choice-item img {&#10;      width: 40px;&#10;      height: 40px;&#10;      object-fit: contain;&#10;      margin-right: 12px;&#10;      border-radius: 4px;&#10;    }&#10;&#10;    .search-choice-item-info {&#10;      flex: 1;&#10;      text-align: left;&#10;    }&#10;&#10;    .search-choice-item-name {&#10;      font-weight: 600;&#10;      font-size: 14px;&#10;      color: #333;&#10;      margin-bottom: 2px;&#10;    }&#10;&#10;    .search-choice-item-category {&#10;      font-size: 12px;&#10;      color: #666;&#10;    }&#10;&#10;    .search-choice-buttons {&#10;      display: flex;&#10;      gap: 12px;&#10;      margin-top: 20px;&#10;    }&#10;&#10;    .search-choice-btn {&#10;      flex: 1;&#10;      padding: 12px 16px;&#10;      border: none;&#10;      border-radius: 8px;&#10;      font-size: 14px;&#10;      font-weight: 600;&#10;      cursor: pointer;&#10;      transition: all 0.2s ease;&#10;    }&#10;&#10;    .search-choice-btn.primary {&#10;      background: #F5C842;&#10;      color: #333;&#10;    }&#10;&#10;    .search-choice-btn.primary:hover {&#10;      background: #E5B432;&#10;      transform: translateY(-1px);&#10;    }&#10;&#10;    .search-choice-btn.secondary {&#10;      background: #f8f9fa;&#10;      color: #666;&#10;      border: 2px solid #e9ecef;&#10;    }&#10;&#10;    .search-choice-btn.secondary:hover {&#10;      background: #e9ecef;&#10;      color: #333;&#10;    }&#10;&#10;&#10;&#10;    #config-overview {&#10;      position: absolute;&#10;      top: 20px;&#10;      left: 20px;&#10;      width: 300px;&#10;      padding: 12px 16px;&#10;      /* Zmniejszone padding */&#10;      z-index: 1300;&#10;      font-size: 15px;&#10;      max-height: 1000px;&#10;      opacity: 1;&#10;      transition: max-height 0.3s ease, opacity 0.3s ease, padding 0.3s ease;&#10;      overflow: hidden;&#10;      box-shadow: 0 4px 32px rgba(0, 0, 0, 0.10);&#10;      border-radius: 16px;&#10;      border: 1px solid rgba(0, 0, 0, 0.08);&#10;      background: #fff;&#10;      box-sizing: border-box;&#10;    }&#10;&#10;    #config-overview.collapsed {&#10;      max-height: 40px;&#10;      /* Zmniejszone z 60px */&#10;      opacity: 0.8;&#10;      padding: 8px 16px;&#10;      /* Zmniejszone padding w stanie zwiniętym */&#10;    }&#10;&#10;&#10;&#10;    #config-overview:hover {&#10;      opacity: 1;&#10;    }&#10;&#10;    .overview-content {&#10;      max-height: 1000px;&#10;      opacity: 1;&#10;      transition: max-height 0.3s ease, opacity 0.3s ease;&#10;      overflow: hidden;&#10;    }&#10;&#10;    #config-overview.collapsed .overview-content {&#10;      max-height: 0;&#10;      opacity: 0;&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    .selection-section h3 {&#10;      font-size: 16px;&#10;      margin-bottom: 10px;&#10;      color: #555;&#10;    }&#10;&#10;    .options-grid {&#10;      display: flex;&#10;      flex-wrap: wrap;&#10;      gap: 10px;&#10;    }&#10;&#10;    .thumbnail-wrapper {&#10;      text-align: center;&#10;      display: flex;&#10;      flex-direction: column;&#10;      align-items: center;&#10;    }&#10;&#10;    .thumbnail {&#10;      width: 80px;&#10;      height: 80px;&#10;      object-fit: contain;&#10;      cursor: pointer;&#10;      border: 1px solid #ccc;&#10;      border-radius: 8px;&#10;      transition: all 0.2s;&#10;      background-color: transparent;&#10;      display: flex;&#10;      flex-direction: column;&#10;      align-items: center;&#10;      justify-content: center;&#10;      padding: 4px;&#10;      box-sizing: border-box;&#10;      opacity: 1;&#10;      /* Ikonki w pełni widoczne */&#10;    }&#10;&#10;    .thumbnail:hover {&#10;      transform: scale(1.05);&#10;      border-color: #444;&#10;    }&#10;&#10;    .thumbnail.selected {&#10;      outline: 2px solid #050505;&#10;      border: 2px solid transparent;&#10;      outline-offset: -2px;&#10;      box-shadow: 0 0 8px rgba(49, 49, 49, 0.5);&#10;    }&#10;&#10;    .thumbnail img {&#10;      max-width: 90%;&#10;      max-height: 90%;&#10;      opacity: 1;&#10;    }&#10;&#10;    .thumbnail-caption {&#10;      font-size: 15px;&#10;      color: #555;&#10;      margin-top: 6px;&#10;      font-weight: 500;&#10;      opacity: 1;&#10;    }&#10;&#10;    #overview-icons img {&#10;      width: 80px;&#10;      height: 80px;&#10;      border-radius: 8px;&#10;      border: 1px solid #ddd;&#10;      object-fit: contain;&#10;      opacity: 1;&#10;    }&#10;&#10;    #config-overview h4 {&#10;      font-size: 20px;&#10;      font-weight: 600;&#10;      margin-bottom: 18px;&#10;    }&#10;&#10;    #overview-details .detail-item {&#10;      font-size: 16px;&#10;      margin: 8px 0;&#10;    }&#10;&#10;    #overview-total-price {&#10;      font-size: 22px;&#10;    }&#10;&#10;    #overview-icons {&#10;      gap: 16px;&#10;      margin-bottom: 20px;&#10;      padding-bottom: 20px;&#10;    }&#10;&#10;    #summary {&#10;      margin-top: auto;&#10;      padding-top: 15px;&#10;      border-top: 1px solid #ffffff;&#10;    }&#10;&#10;    #back-to-models-container {&#10;      display: flex;&#10;      align-items: center;&#10;      margin-bottom: 18px;&#10;      justify-content: flex-start;&#10;    }&#10;&#10;    .back-to-model-btn {&#10;      position: relative;&#10;      width: 80px;&#10;      height: 80px;&#10;      border: 1.5px solid #bbb;&#10;      border-radius: 12px;&#10;      background: #fff;&#10;      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      cursor: pointer;&#10;      margin-right: 10px;&#10;      transition: box-shadow 0.2s;&#10;    }&#10;&#10;    .back-to-model-btn:hover {&#10;      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);&#10;    }&#10;&#10;    .back-to-model-btn img {&#10;      width: 60px;&#10;      height: 60px;&#10;      object-fit: contain;&#10;      display: block;&#10;    }&#10;&#10;    .back-to-model-btn .close-x {&#10;      position: absolute;&#10;      top: 4px;&#10;      right: 6px;&#10;      background: #fff;&#10;      border: none;&#10;      font-size: 20px;&#10;      color: #333;&#10;      cursor: pointer;&#10;      border-radius: 50%;&#10;      width: 24px;&#10;      height: 24px;&#10;      line-height: 20px;&#10;      padding: 0;&#10;      box-shadow: 0 1px 4px #0001;&#10;      transition: background 0.2s;&#10;    }&#10;&#10;    .back-to-model-btn .close-x:hover {&#10;      background: #eee;&#10;    }&#10;&#10;    #camera-debug-panel {&#10;      position: fixed;&#10;      top: 20px;&#10;      right: 20px;&#10;      z-index: 1000;&#10;      background: #fff;&#10;      border: 1px solid #ccc;&#10;      padding: 16px;&#10;      border-radius: 8px;&#10;      box-shadow: 0 2px 8px #0002;&#10;    }&#10;&#10;    #camera-debug-panel label {&#10;      display: block;&#10;      margin: 8px 0 4px;&#10;      font-size: 14px;&#10;    }&#10;&#10;    #camera-debug-panel input {&#10;      width: 100%;&#10;      margin-bottom: 8px;&#10;    }&#10;&#10;    #camera-debug-panel button {&#10;      width: 100%;&#10;      padding: 8px;&#10;      background: #007bff;&#10;      color: #fff;&#10;      border: none;&#10;      border-radius: 4px;&#10;      cursor: pointer;&#10;      transition: background 0.2s;&#10;    }&#10;&#10;    #camera-debug-panel button:hover {&#10;      background: #0056b3;&#10;    }&#10;&#10;    body {&#10;      background: #ededed;&#10;      /* lub Twój kolor tła */&#10;    }&#10;&#10;    #buy-button {&#10;      width: 100%;&#10;      padding: 14px 0;&#10;      background: #111;&#10;      color: #fff;&#10;      border: none;&#10;      border-radius: 8px;&#10;      font-size: 18px;&#10;      font-weight: 600;&#10;      margin-top: 18px;&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      gap: 10px;&#10;      cursor: pointer;&#10;      transition: background 0.2s;&#10;    }&#10;&#10;    #buy-button:hover {&#10;      background: #333;&#10;    }&#10;&#10;    #buy-button .cart-icon {&#10;      width: 22px;&#10;      height: 22px;&#10;      display: inline-block;&#10;    }&#10;&#10;    #sidebar .model-image {&#10;      width: 100%;&#10;      max-width: 100%;&#10;      height: 110px;&#10;      object-fit: contain;&#10;      display: block;&#10;      margin: 0 auto 10px auto;&#10;      background: #fff;&#10;      border-radius: 10px;&#10;      border: 1px solid #eee;&#10;    }&#10;&#10;&#10;&#10;    .modal {&#10;      position: fixed;&#10;      top: 0;&#10;      left: 0;&#10;      right: 0;&#10;      bottom: 0;&#10;      background: rgba(0, 0, 0, 0.5);&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      z-index: 1000;&#10;    }&#10;&#10;    .modal.hidden {&#10;      display: none;&#10;    }&#10;&#10;    .modal-content {&#10;      position: fixed;&#10;      top: 50%;&#10;      left: 50%;&#10;      transform: translate(-50%, -50%);&#10;      width: 320px;&#10;      background: #fff;&#10;      padding: 24px 28px;&#10;      border-radius: 16px;&#10;      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);&#10;      font-family: &quot;Poppins&quot;, &quot;Segoe UI&quot;, Tahoma, Geneva, Verdana, sans-serif;&#10;      color: #222;&#10;    }&#10;&#10;&#10;    .close-button {&#10;      position: absolute;&#10;      top: 12px;&#10;      right: 16px;&#10;      cursor: pointer;&#10;      font-size: 26px;&#10;      font-weight: 700;&#10;      color: #888;&#10;      transition: color 0.2s ease;&#10;    }&#10;&#10;    .close-button:hover {&#10;      color: #444;&#10;    }&#10;&#10;    .modal-content h2 {&#10;      margin-top: 0;&#10;      margin-bottom: 16px;&#10;      font-weight: 700;&#10;      font-size: 20px;&#10;      text-align: center;&#10;    }&#10;&#10;    .modal-content label {&#10;      display: block;&#10;      margin-bottom: 6px;&#10;      font-weight: 600;&#10;      font-size: 14px;&#10;    }&#10;&#10;    .modal-content input {&#10;      width: 100%;&#10;      padding: 10px 12px;&#10;      margin-bottom: 18px;&#10;      border: 1.5px solid #ddd;&#10;      border-radius: 12px;&#10;      font-size: 15px;&#10;      box-sizing: border-box;&#10;      transition: border-color 0.2s ease;&#10;    }&#10;&#10;    .modal-content input:focus {&#10;      border-color: #888;&#10;      outline: none;&#10;    }&#10;&#10;    .modal-content button[type=&quot;submit&quot;] {&#10;      width: 100%;&#10;      background: #000;&#10;      color: #fff;&#10;      font-weight: 700;&#10;      font-size: 16px;&#10;      padding: 12px 0;&#10;      border: none;&#10;      border-radius: 16px;&#10;      cursor: pointer;&#10;      transition: background-color 0.3s ease;&#10;    }&#10;&#10;    .modal-content button[type=&quot;submit&quot;]:hover {&#10;      background: #333;&#10;    }&#10;&#10;    /* Komunikat sukcesu */&#10;    #success-message {&#10;      position: fixed;&#10;      top: 50%;&#10;      left: 50%;&#10;      transform: translate(-100%, -50%);&#10;&#10;      background: #ffffff;&#10;      /* jasne zielone tło */&#10;      border: 1.5px solid #1f1f1f;&#10;      /* zielona ramka, spójna z tłem */&#10;      color: #000000;&#10;      /* ciemnozielony tekst */&#10;&#10;      font-weight: 700;&#10;      font-family: &quot;Poppins&quot;, &quot;Segoe UI&quot;, Tahoma, Geneva, Verdana, sans-serif;&#10;&#10;      padding: 20px 28px;&#10;      border-radius: 16px;&#10;      box-shadow: 0 8px 32px rgba(3, 3, 3, 0.15);&#10;&#10;      max-width: 320px;&#10;      width: 90%;&#10;      text-align: center;&#10;      z-index: 9999;&#10;    }&#10;&#10;&#10;    /* Ukrywanie i pokazywanie */&#10;    .hidden {&#10;      display: none;&#10;    }&#10;&#10;    .visible {&#10;      display: block;&#10;    }&#10;&#10;&#10;    #bottom-toolbar {&#10;      position: fixed;&#10;      /* &lt;- zmień z absolute */&#10;      bottom: 14px;&#10;      left: 50%;&#10;      transform: translateX(-100%);&#10;      background: #fff;&#10;      border: 1.5px solid #ccc;&#10;      border-radius: 12px;&#10;      padding: 8px 14px;&#10;      display: flex;&#10;      gap: 16px;&#10;      z-index: 2000;&#10;      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);&#10;      opacity: 0;&#10;      transition: opacity 0.4s ease;&#10;      justify-content: center;&#10;    }&#10;&#10;&#10;    #bottom-toolbar button {&#10;      background: #f0f0f0;&#10;      border: none;&#10;      border-radius: 8px;&#10;      padding: 8px 12px;&#10;      font-size: 14px;&#10;      cursor: pointer;&#10;      transition: background 0.2s ease;&#10;    }&#10;&#10;    #bottom-toolbar.visible {&#10;      opacity: 1;&#10;    }&#10;&#10;    #bottom-toolbar button:hover {&#10;      background: #e0e0e0;&#10;    }&#10;&#10;    #dimension-overlay {&#10;      position: absolute;&#10;      top: 0;&#10;      left: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      pointer-events: none;&#10;      z-index: 1000;&#10;    }&#10;&#10;    .dimension-line {&#10;      position: absolute;&#10;      background-color: #000;&#10;      height: 2px;&#10;    }&#10;&#10;    .axis-line {&#10;      position: absolute;&#10;      height: 2px;&#10;      background-color: #222;&#10;      opacity: 0.6;&#10;    }&#10;&#10;    .axis-line.x {&#10;      top: 50%;&#10;      left: 0;&#10;      width: 100%;&#10;      transform: translateY(-50%);&#10;    }&#10;&#10;    .axis-line.y {&#10;      left: 50%;&#10;      top: 0;&#10;      width: 2px;&#10;      height: 100%;&#10;      transform: translateX(-50%);&#10;    }&#10;&#10;    .axis-line.z {&#10;      top: 0;&#10;      left: 0;&#10;      width: 100%;&#10;      height: 100%;&#10;      border: 2px dashed #888;&#10;      box-sizing: border-box;&#10;      border-radius: 10px;&#10;    }&#10;&#10;    .dimension-label {&#10;      position: absolute;&#10;      background-color: rgba(255, 255, 255, 0.7);&#10;      padding: 5px;&#10;      border-radius: 3px;&#10;      font-size: 14px;&#10;      font-weight: bold;&#10;    }&#10;&#10;    .dimension-label:nth-child(4) {&#10;      top: 20px;&#10;    }&#10;&#10;    .dimension-label:nth-child(5) {&#10;      top: 50%;&#10;      transform: translate(-50%, -50%);&#10;    }&#10;&#10;    .dimension-label:nth-child(6) {&#10;      bottom: 20px;&#10;    }&#10;&#10;&#10;    #qr-close-btn {&#10;      background-color: #000;&#10;      color: #fff;&#10;      padding: 10px 16px;&#10;      border: none;&#10;      border-radius: 8px;&#10;      cursor: pointer;&#10;      font-size: 14px;&#10;      transition: background 0.2s ease;&#10;    }&#10;&#10;    #qr-close-btn:hover {&#10;      background-color: #333;&#10;    }&#10;&#10;    #qr-popup {&#10;      right: auto !important;&#10;      left: 20px !important;&#10;      transform: translate(175%, 0%) !important;&#10;      width: 320px;&#10;      background: #fff;&#10;      border: 2px solid rgb(0, 0, 0);&#10;      /* łatwiej zobaczyć granice */&#10;      z-index: 999;&#10;      padding: 24px;&#10;      border-radius: 16px;&#10;      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);&#10;      text-align: center;&#10;      box-sizing: border-box;&#10;    }&#10;&#10;    #qr-popup p {&#10;      font-size: 16px;&#10;      margin-bottom: 12px;&#10;      color: #000;&#10;    }&#10;&#10;    #qrcode {&#10;      margin: 0 auto 16px auto;&#10;      display: flex;&#10;      justify-content: center;&#10;    }&#10;&#10;    #collapse-btn {&#10;      font-size: 18px;&#10;      /* Zmniejszona z 22px */&#10;      font-weight: bold;&#10;      background: none;&#10;      border: none;&#10;      cursor: pointer;&#10;      color: #111;&#10;      margin-right: 8px;&#10;      padding: 0;&#10;      width: 24px;&#10;      /* Zmniejszona z 30px */&#10;      height: 24px;&#10;      /* Zmniejszona z 30px */&#10;      display: flex;&#10;      align-items: center;&#10;      justify-content: center;&#10;      line-height: 1;&#10;      /* Dodane dla lepszego wycentrowania */&#10;    }&#10;&#10;    .overview-header h6 {&#10;      font-size: 18;&#10;      /* Dodane, aby zmniejszyć rozmiar nagłówka */&#10;      margin: 0;&#10;      /* Usunięcie domyślnych marginesów */&#10;    }&#10;&#10;    .overview-header {&#10;      display: flex;&#10;      align-items: center;&#10;      margin-bottom: 8px;&#10;      /* Zmniejszone z 12px */&#10;    }&#10;&#10;    #config-overview.hidden {&#10;      display: none;&#10;    }&#10;&#10;    .overview-title {&#10;      font-size: 16px;&#10;      /* lub inna preferowana wielkość */&#10;      font-weight: bold;&#10;      margin: 0;&#10;    }&#10;&#10;   /*  Tryb PIONOWY — ukryj aplikację, pokaż komunikat */&#10;@media (max-width: 820px) and (orientation: portrait) {&#10;  #app,&#10;  #bottom-toolbar,&#10;  #sidebar,&#10;  .dimension-panel,&#10;  .dimension-label,&#10;  #qr-button {&#10;    display: none !important;&#10;  }&#10;&#10;  #rotate-message {&#10;    display: flex !important;&#10;    justify-content: center;&#10;    align-items: center;&#10;    text-align: center;&#10;    padding: 40px;&#10;    font-size: 18px;&#10;    background: #000;&#10;    color: #fff;&#10;    position: fixed;&#10;    top: 0;&#10;    left: 0;&#10;    right: 0;&#10;    bottom: 0;&#10;    z-index: 2000;&#10;  }&#10;&#10;   #export-panel {&#10;    display: none !important;&#10;  }&#10;&#10;  /* Ukryj wyszukiwanie w trybie portrait */&#10;  #search-container {&#10;    display: none;&#10;  }&#10;}&#10;&#10;/*  Tryb POZIOMY — pokazujemy UI */&#10;@media (max-width: 820px) and (orientation: landscape) {&#10;  #rotate-message {&#10;    display: none !important;&#10;  }&#10;&#10;  canvas {&#10;  touch-action: manipulation;&#10;  -webkit-tap-highlight-color: transparent;&#10;  width: 100%;&#10;  height: 100vh;&#10;  display: block;&#10;}&#10;&#10; #sidebar {&#10;  width: 280px; /* stała szerokość panelu UI */&#10;  max-width: 280px;&#10;  min-width: 280px;&#10;  box-sizing: border-box;&#10;  overflow-y: auto;&#10;  padding: 8px;&#10;}&#10;&#10;  /* Responsywne style dla wyszukiwania na mobile */&#10;  #search-toggle {&#10;    width: 38px;&#10;    height: 38px;&#10;  }&#10;&#10;  #search-toggle svg {&#10;    width: 18px;&#10;    height: 18px;&#10;  }&#10;&#10;  #search-panel {&#10;    width: 240px;&#10;  }&#10;&#10;  #search-input {&#10;    padding: 10px 12px;&#10;    font-size: 14px;&#10;  }&#10;&#10;  #search-results {&#10;    max-height: 150px;&#10;  }&#10;&#10;  .search-result-item {&#10;    padding: 6px 10px;&#10;    font-size: 14px;&#10;  }&#10;&#10;#bottom-toolbar #qr-button {&#10;  display: none !important;&#10;}&#10;&#10;#part-tabs {&#10;  display: flex;&#10;  flex-wrap: nowrap; /*  nie zawijaj w nowe linie */&#10;  overflow-x: auto;  /*  pozwól na przesuwanie */&#10;  gap: 8px;&#10;  padding: 8px;&#10;  justify-content: flex-start;&#10;}&#10;&#10;/* Styl dla pojedynczej ikonki */&#10;#part-tabs button,&#10;#part-tabs .part-btn {&#10;  width: 56px;&#10;  height: 56px;&#10;  font-size: 11px;&#10;  padding: 6px;&#10;  flex: 0 0 auto; /*  stała szerokość */&#10;  border-radius: 6px;&#10;  box-sizing: border-box;&#10;}&#10;&#10;/* Jeśli ikonka ma obrazek */&#10;#part-tabs img {&#10;  width: 32px;&#10;  height: 32px;&#10;}&#10;&#10;&#10;#bottom-toolbar {&#10;  left: 50%;&#10;  transform: translateX(-125%);&#10;  bottom: 12px;&#10;  padding: 10px 16px;&#10;  display: flex;&#10;  justify-content: center;&#10;  flex-wrap: wrap;&#10;  gap: 8px; /* opcjonalny odstęp między przyciskami */&#10;}&#10;&#10;.dimension-panel {&#10;  position: fixed !important;&#10;  top: auto !important;       /* lub np. top: 80px */&#10;  bottom: 150px !important;   /* odległość od dołu */&#10;  left: 200px !important;      /* odległość od lewej krawędzi */&#10;  right: auto !important;     /* lub np. right: 20px */&#10;  transform: none !important;&#10;&#10;  font-size: 12px !important;&#10;  padding: 6px 8px !important;&#10;  width: auto !important;&#10;  max-width: 90% !important;&#10;  z-index: 2147483647 !important;&#10;  background: white !important;&#10;  border: 1px solid #ccc !important;&#10;  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2) !important;&#10;  border-radius: 6px !important;&#10;}&#10;&#10;#export-panel {&#10;    display: none !important;&#10;    visibility: hidden;&#10;    pointer-events: none;&#10;  }&#10;&#10;   #export-config,&#10;  .export-trigger,&#10;  .toolbar-btn[data-action=&quot;export&quot;] {&#10;    display: none !important;&#10;  }&#10;&#10;&#10;&#10;  .thumbnail,&#10;  #overview-icons img,&#10;  .back-to-model-btn {&#10;    width: 56px;&#10;    height: 56px;&#10;  }&#10;&#10;  .thumbnail-caption {&#10;    font-size: 13px;&#10;    margin-top: 4px;&#10;    text-align: center;&#10;  }&#10;&#10;  #buy-button {&#10;    font-size: 14px;&#10;    padding: 10px;&#10;    width: 100%;&#10;    margin-top: 12px;&#10;  }&#10;&#10;  #config-overview {&#10;  position: fixed;&#10;  top: 0;&#10;  bottom: 0;&#10;  left: 0;&#10;  width: 150px; /* szerokość bocznego panelu */&#10;  height: 100vh; /* pełna wysokość */&#10;  padding: 16px;&#10;  background: rgba(245, 245, 245, 0.95);&#10;  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);&#10;  border-radius: 0 8px 8px 0;&#10;  z-index: 999;&#10;  overflow-y: auto;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;&#10;&#10;  #config-overview h2 {&#10;    font-size: 6px !important;&#10;    line-height: 1 !important;&#10;    margin: 0 !important;&#10;    padding: 0 !important;&#10;  }&#10;&#10;  #config-overview h2::after {&#10;    content: &quot;+  Twoja konfiguracja&quot;;&#10;    font-size: 14px;&#10;    position: absolute;&#10;    right: 10px;&#10;    top: 50%;&#10;    transform: translateY(-50%);&#10;    color: #000;&#10;  }&#10;&#10;  #config-overview .overview-title {&#10;    display: none;&#10;  }&#10;}&#10;&#10;&#10;&#10;    .dimension-panel {&#10;      background-color: white;&#10;      border: 1px solid #ccc;&#10;      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);&#10;      padding: 10px;&#10;      border-radius: 5px;&#10;      font-size: 14px;&#10;      z-index: 1001;&#10;    }&#10;&#10;    #hdr-toggle {&#10;      position: relative;&#10;    }&#10;&#10;    #hdr-panel {&#10;      position: absolute;&#10;      bottom: 100%;&#10;      left: 50%;&#10;      transform: translateX(-50%) translateY(-8px);&#10;      background: #fff;&#10;      border-radius: 12px;&#10;      padding: 12px 16px;&#10;      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);&#10;      z-index: 9999;&#10;      min-width: 240px;&#10;      display: none;&#10;      padding-top: 30px;&#10;    }&#10;&#10;    #hdr-panel.hidden {&#10;      display: none;&#10;    }&#10;&#10;    #hdr-close {&#10;      position: absolute;&#10;      top: 5px;&#10;      right: 5px;&#10;      background: none;&#10;      border: none;&#10;      font-size: 20px;&#10;      cursor: pointer;&#10;      color: #111111;&#10;      z-index: 1000;&#10;    }&#10;&#10;    #hdr-options {&#10;      display: flex;&#10;      gap: 12px;&#10;      flex-wrap: wrap;&#10;      justify-content: center;&#10;      padding-top: 10px;&#10;    }&#10;&#10;    #hdr-options .thumbnail {&#10;      width: 72px;&#10;      height: 72px;&#10;    }&#10;&#10;    #hdr-options .thumbnail img {&#10;      max-width: 100%;&#10;      max-height: 100%;&#10;    }&#10;&#10;    .hdr-close-btn {&#10;      position: absolute;&#10;      top: 8px;&#10;      right: 10px;&#10;      background: none;&#10;      border: none;&#10;      font-size: 22px;&#10;      font-weight: bold;&#10;      cursor: pointer;&#10;      color: #555;&#10;      z-index: 10000;&#10;    }&#10;&#10;    .hdr-close-btn:hover {&#10;      color: #000;&#10;    }&#10;&#10;    #export-panel {&#10;      position: absolute;&#10;      bottom: 60px;&#10;      /* nad przyciskiem */&#10;      right: 62px;&#10;      /* &lt;- tu zwiększ wartość, żeby przesunąć panel bardziej w lewo */&#10;      background: #ffffff;&#10;      border: 1px solid #eeeeee;&#10;      border-radius: 8px;&#10;      padding: 8px;&#10;      display: flex;&#10;      flex-direction: column;&#10;      gap: 8px;&#10;      z-index: 100;&#10;      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);&#10;    }&#10;&#10;    #export-panel.hidden {&#10;      display: none;&#10;    }&#10;&#10;    .export-btn {&#10;      background-color: #444;&#10;      color: #222222;&#10;      padding: 6px 12px;&#10;      border: none;&#10;      border-radius: 6px;&#10;      cursor: pointer;&#10;      text-align: left;&#10;      white-space: nowrap;&#10;    }&#10;&#10;    .export-btn:hover {&#10;      background-color: #555;&#10;    }&#10;/*Ukrycie przyciku exportu*/&#10;#export-config {&#10;  display: none;&#10;}&#10;&#10;#export-panel {&#10;  display: none;&#10;}&#10;&#10;   .collection-icon {&#10;  width: 64px;&#10;  height: 64px;&#10;  object-fit: contain;&#10;  cursor: pointer;&#10;  border: 1px solid #ccc;&#10;  border-radius: 8px;&#10;  transition: transform 0.2s, border-color 0.2s;&#10;}&#10;&#10;.collection-icon:hover {&#10;  transform: scale(1.05);&#10;  border-color: #444;&#10;}&#10;&#10;.collection-icon.selected {&#10;  outline: 2px solid #000;&#10;  box-shadow: 0 0 8px rgba(0,0,0,0.2);&#10;}&#10;&#10;&#10;&#10;&#10;    @keyframes slideDown {&#10;      from {&#10;        opacity: 0;&#10;        transform: translateY(-5px);&#10;      }&#10;&#10;      to {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;      }&#10;    }&#10;&#10;    #material-options details summary {&#10;      cursor: pointer;&#10;      font-weight: bold;&#10;      background: #f7f7f7;&#10;      border-radius: 8px;&#10;      padding: 6px 10px;&#10;      margin-bottom: 6px;&#10;    }&#10;&#10;    .collection-icon {&#10;  width: 64px;&#10;  height: 64px;&#10;  object-fit: contain;&#10;  cursor: pointer;&#10;  border: 1px solid #ccc;&#10;  border-radius: 8px;&#10;  transition: transform 0.2s, border-color 0.2s;&#10;}&#10;&#10;.collection-icon:hover {&#10;  transform: scale(1.05);&#10;  border-color: #444;&#10;}&#10;&#10;.collection-icon.selected {&#10;  outline: 2px solid #000;&#10;  box-shadow: 0 0 8px rgba(0,0,0,0.2);&#10;}&#10;&#10;.collection-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 16px;&#10;  width: 88px;&#10;  align-items: center;&#10;}&#10;&#10;#custom-loader {&#10;  position: fixed;&#10;  top: 0; left: 0;&#10;  width: 100%; height: 100%;&#10;  background: #fff;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 9999;&#10;  font-family: 'Poppins', Arial, sans-serif;&#10;}&#10;&#10;#custom-loader.fade-out {&#10;  opacity: 0;&#10;  transition: opacity 0.5s ease;&#10;  pointer-events: none;&#10;}&#10;&#10;#model-loader {&#10;  position: fixed;&#10;  top: 0; left: 0;&#10;  width: 100%; height: 100%;&#10;  background: rgba(255, 255, 255, 0.97);&#10;  display: none;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 9999;&#10;  font-family: 'Poppins', Arial, sans-serif;&#10;  transition: opacity 0.5s ease-in-out;&#10;}&#10;&#10;#model-loader p {&#10;  font-size: 18px;&#10;  color: #333;&#10;  text-align: center;&#10;  margin: 10px 0 0 0;&#10;  font-weight: 500;&#10;  text-shadow: 1px 1px 2px rgba(0,0,0,0.1);&#10;}&#10;&#10;/* Model loader animations */&#10;@keyframes logoPulse {&#10;  0%, 100% { opacity: 0.9; transform: scale(1); }&#10;  50% { opacity: 1; transform: scale(1.05); }&#10;}&#10;&#10;@keyframes progressSlide {&#10;  0% { transform: translateX(-100%); }&#10;  50% { transform: translateX(0%); }&#10;  100% { transform: translateX(100%); }&#10;}&#10;&#10;/*  WELCOME SCREEN */&#10;#welcome-screen {&#10;  position: absolute;&#10;  top: 0; left: 0;&#10;  width: 100%;&#10;  height: 100%;&#10;  background: #fff;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 100;&#10;  font-family: 'Poppins', Arial, sans-serif;&#10;  text-align: center;&#10;  padding: 20px;&#10;  /* Ukrywa tylko canvas, nie UI */&#10;}&#10;&#10;#welcome-logo {&#10;  max-width: 200px;&#10;  height: auto;&#10;  margin-bottom: 30px;&#10;  animation: logoPulse 3s ease-in-out infinite;&#10;}&#10;&#10;#welcome-screen h1 {&#10;  font-size: 2.5em;&#10;  font-weight: 600;&#10;  color: #333;&#10;  margin: 0 0 20px 0;&#10;}&#10;&#10;#welcome-screen p {&#10;  font-size: 1.1em;&#10;  color: #666;&#10;  max-width: 500px;&#10;  line-height: 1.5;&#10;  margin: 0;&#10;}&#10;&#10;/* Welcome screen yellow accents */&#10;.title-with-accent {&#10;  position: relative;&#10;  margin-bottom: 25px;&#10;}&#10;&#10;.title-with-accent h1 {&#10;  margin-bottom: 15px !important;&#10;}&#10;&#10;.yellow-accent-line {&#10;  width: 120px;&#10;  height: 4px;&#10;  background: linear-gradient(90deg, #FFD700, #FFA500);&#10;  margin: 0 auto;&#10;  border-radius: 2px;&#10;  animation: accentGlow 2s ease-in-out infinite;&#10;}&#10;&#10;.promo-text {&#10;  font-size: 1em !important;&#10;  color: #555 !important;&#10;  font-style: normal;&#10;  margin-top: 20px !important;&#10;  opacity: 0.9;&#10;  animation: fadeInUp 1s ease-out 0.5s both;&#10;}&#10;&#10;@keyframes accentGlow {&#10;  0%, 100% { &#10;    transform: scaleX(1);&#10;    box-shadow: 0 0 5px rgba(255, 215, 0, 0.3);&#10;  }&#10;  50% { &#10;    transform: scaleX(1.1);&#10;    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6);&#10;  }&#10;}&#10;&#10;@keyframes fadeInUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(10px);&#10;  }&#10;  to {&#10;    opacity: 0.9;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;/*  ANIMATIONS */&#10;@keyframes logoPulse {&#10;  0% { transform: scale(1); opacity: 1; }&#10;  50% { transform: scale(1.05); opacity: 0.8; }&#10;  100% { transform: scale(1); opacity: 1; }&#10;}&#10;&#10;@keyframes spin {&#10;  0% { transform: rotate(0deg); }&#10;  100% { transform: rotate(360deg); }&#10;}&#10;&#10;@keyframes progressSlide {&#10;  0% { transform: translateX(-100%); }&#10;  50% { transform: translateX(0%); }&#10;  100% { transform: translateX(100%); }&#10;}&#10;&#10;.loader {&#10;  border: 8px solid #f3f3f3;&#10;  border-top: 8px solid #555;&#10;  &#10;  border-radius: 50%;&#10;  width: 48px;&#10;  height: 48px;&#10;  animation: spin 1s linear infinite;&#10;  display: inline-block;&#10;  margin-bottom: 12px;&#10;}&#10;#material-preloader {&#10;  display: none;&#10;  position: fixed;&#10;  z-index: 10000;&#10;  left: 0; top: 0; right: 0; bottom: 0;&#10;  width: 100vw; height: 100vh;&#10;  background: rgba(255,255,255,0.85);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;#material-preloader .preloader-box {&#10;  text-align: center;&#10;  background: rgba(255,255,255,0.97);&#10;  border-radius: 12px;&#10;  padding: 20px 30px;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,0.15);&#10;}&#10;#material-preloader .loader {&#10;  border: 3px solid #f3f3f3;&#10;  border-top: 3px solid #555;&#10;  border-radius: 50%;&#10;  width: 24px;&#10;  height: 24px;&#10;  animation: spin 1s linear infinite;&#10;  display: inline-block;&#10;  margin-bottom: 12px;&#10;}&#10;@keyframes spin {&#10;  0% { transform: rotate(0deg);}&#10;  100% { transform: rotate(360deg);}&#10;}&#10;&#10;&#10;  &lt;/style&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--  ANIMATED LOADER z żółtym paskiem --&gt;&#10;    &lt;div id=&quot;custom-loader&quot;&gt;&#10;        &lt;div class=&quot;logo-container&quot; style=&quot;&#10;            position: relative;&#10;            margin-bottom: 40px;&#10;            animation: logoPulse 3s ease-in-out infinite;&#10;        &quot;&gt;&#10;            &lt;img src=&quot;icons/FK_logo.png&quot; alt=&quot;Fajne Krzesła&quot; style=&quot;&#10;                max-width: 200px; &#10;                height: auto;&#10;                border-radius: 10px;&#10;                opacity: 0.9;&#10;            &quot; /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;spinner&quot; style=&quot;&#10;            width: 40px;&#10;            height: 40px;&#10;            border: 3px solid #f0f0f0;&#10;            border-top: 3px solid #333;&#10;            border-radius: 50%;&#10;            animation: spin 1s linear infinite;&#10;            margin-bottom: 30px;&#10;        &quot;&gt;&lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;progress-container&quot; style=&quot;&#10;            width: 280px;&#10;            height: 3px;&#10;            background: #f0f0f0;&#10;            border-radius: 2px;&#10;            overflow: hidden;&#10;            margin-bottom: 25px;&#10;        &quot;&gt;&#10;            &lt;div class=&quot;progress-bar&quot; style=&quot;&#10;                width: 100%;&#10;                height: 100%;&#10;                background: #FFD700;&#10;                animation: progressSlide 2s ease-in-out infinite;&#10;            &quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;loading-text&quot; style=&quot;&#10;            font-size: 16px; &#10;            color: #333;&#10;            font-weight: 500;&#10;            text-align: center;&#10;            letter-spacing: 0.5px;&#10;        &quot;&gt;Inicjalizacja konfiguratora...&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!--  SPINNER podczas zmiany modelu --&gt;&#10;    &lt;div id=&quot;model-loader&quot;&gt;&#10;        &lt;div class=&quot;logo-container&quot; style=&quot;&#10;            position: relative;&#10;            margin-bottom: 30px;&#10;            animation: logoPulse 3s ease-in-out infinite;&#10;        &quot;&gt;&#10;            &lt;img src=&quot;icons/FK_logo.png&quot; alt=&quot;Fajne Krzesła&quot; style=&quot;&#10;                max-width: 150px; &#10;                height: auto;&#10;                border-radius: 10px;&#10;                opacity: 0.9;&#10;            &quot; /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;spinner&quot; style=&quot;&#10;            width: 35px;&#10;            height: 35px;&#10;            border: 3px solid #f0f0f0;&#10;            border-top: 3px solid #333;&#10;            border-radius: 50%;&#10;            animation: spin 1s linear infinite;&#10;            margin-bottom: 15px;&#10;        &quot;&gt;&lt;/div&gt;&#10;        &#10;        &lt;p&gt;Ładowanie modelu...&lt;/p&gt;&#10;        &#10;        &lt;div class=&quot;progress-container&quot; style=&quot;&#10;            width: 220px;&#10;            height: 3px;&#10;            background: #f0f0f0;&#10;            border-radius: 2px;&#10;            overflow: hidden;&#10;            margin-top: 15px;&#10;        &quot;&gt;&#10;            &lt;div class=&quot;progress-bar&quot; style=&quot;&#10;                width: 100%;&#10;                height: 100%;&#10;                background: #FFD700;&#10;                animation: progressSlide 2s ease-in-out infinite;&#10;            &quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;  &lt;div id=&quot;app&quot;&gt;&#10;&#10;&lt;div id=&quot;material-preloader&quot; style=&quot;display:none;&quot;&gt;&#10;  &lt;div class=&quot;preloader-box&quot;&gt;&#10;    &lt;span class=&quot;loader&quot;&gt;&lt;/span&gt;&#10;    &lt;div style=&quot;margin-top: 16px; font-size: 2em;&quot;&gt;Ładowanie materiału...&lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;    &lt;!-- CANVAS CONTAINER z WELCOME SCREEN --&gt;&#10;    &lt;div id=&quot;canvas-container&quot; style=&quot;flex: 1 1 0; position: relative; height: 100%; background: #ededed15;&quot;&gt;&#10;      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;&#10;      &#10;      &lt;!--  WELCOME SCREEN - tylko nad canvas --&gt;&#10;      &lt;div id=&quot;welcome-screen&quot;&gt;&#10;          &lt;img id=&quot;welcome-logo&quot; src=&quot;icons/FK_logo.png&quot; alt=&quot;Fajne Krzesła&quot;&gt;&#10;          &lt;div class=&quot;title-with-accent&quot;&gt;&#10;              &lt;h1&gt;Konfigurator Krzeseł&lt;/h1&gt;&#10;              &lt;div class=&quot;yellow-accent-line&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;p&gt;Wybierz kategorię oraz model krzesła z bocznego panelu, aby rozpocząć konfigurację w 3D&lt;/p&gt;&#10;          &lt;p class=&quot;promo-text&quot;&gt;Możesz również zapoznać się z naszymi promocjami i bestsellerami - najczęściej wybieranymi modelami krzeseł&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &#10;    &lt;div id=&quot;config-overview&quot; class=&quot;collapsed hidden&quot;&gt;&#10;      &lt;div class=&quot;overview-header&quot;&gt;&#10;        &lt;button id=&quot;collapse-btn&quot;&gt;+&lt;/button&gt;&#10;        &lt;span class=&quot;overview-title&quot;&gt;Twoja Konfiguracja&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;overview-content&quot;&gt;&#10;        &lt;!-- tu cała zawartość, która ma się zwijać --&gt;&#10;        &lt;div id=&quot;overview-icons&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;overview-details&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;overview-total&quot;&gt;&#10;          &lt;p&gt;Suma: &lt;strong id=&quot;overview-total-price&quot;&gt;0.00 PLN&lt;/strong&gt;&lt;/p&gt;&#10;          &lt;button id=&quot;buy-button&quot;&gt;Kupuję&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div id=&quot;sidebar&quot;&gt;&#10;      &lt;!-- Pole wyszukiwania w prawym górnym rogu sidebar'a --&gt;&#10;      &lt;div id=&quot;search-container&quot;&gt;&#10;        &lt;button id=&quot;search-toggle&quot; type=&quot;button&quot; aria-label=&quot;Szukaj&quot;&gt;&#10;          &lt;svg viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path d=&quot;M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z&quot;/&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/button&gt;&#10;        &#10;        &lt;div id=&quot;search-panel&quot;&gt;&#10;          &lt;input &#10;            type=&quot;text&quot; &#10;            id=&quot;search-input&quot; &#10;            placeholder=&quot;Szukaj modeli, materiałów, kolekcji...&quot;&#10;            autocomplete=&quot;off&quot;&#10;          /&gt;&#10;          &lt;div id=&quot;search-results&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Modal wyboru akcji po wyszukiwaniu --&gt;&#10;      &lt;div id=&quot;search-choice-modal&quot;&gt;&#10;        &lt;div class=&quot;search-choice-content&quot;&gt;&#10;          &lt;div class=&quot;search-choice-title&quot;&gt;Co chcesz zrobić?&lt;/div&gt;&#10;          &lt;div class=&quot;search-choice-item&quot;&gt;&#10;            &lt;img id=&quot;search-choice-item-img&quot; src=&quot;&quot; alt=&quot;&quot; onerror=&quot;this.style.display='none'&quot;&gt;&#10;            &lt;div class=&quot;search-choice-item-info&quot;&gt;&#10;              &lt;div class=&quot;search-choice-item-name&quot; id=&quot;search-choice-item-name&quot;&gt;&lt;/div&gt;&#10;              &lt;div class=&quot;search-choice-item-category&quot; id=&quot;search-choice-item-category&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;search-choice-buttons&quot;&gt;&#10;            &lt;button class=&quot;search-choice-btn secondary&quot; id=&quot;search-choice-view-options&quot;&gt;Wyniki wyszukiwania&lt;/button&gt;&#10;            &lt;button class=&quot;search-choice-btn primary&quot; id=&quot;search-choice-go-to-chair&quot;&gt;Przejdź do krzesła&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;&#10;      &#10;      &lt;!-- Wskaźnik aktywnego filtra wyszukiwania --&gt;&#10;      &lt;div id=&quot;search-filter-indicator&quot; style=&quot;display: none; margin-bottom: 15px; padding: 8px 12px; background: rgba(245, 200, 66, 0.1); border: 1px solid #F5C842; border-radius: 8px; font-size: 14px;&quot;&gt;&#10;        &lt;span style=&quot;font-weight: 600;&quot;&gt; Filtr aktywny:&lt;/span&gt; &#10;        &lt;span id=&quot;search-filter-text&quot;&gt;&lt;/span&gt;&#10;        &lt;button id=&quot;clear-search-filter&quot; style=&quot;float: right; background: none; border: none; color: #666; cursor: pointer; font-size: 16px; padding: 0;&quot; title=&quot;Wyczyść filtr&quot;&gt;×&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;!-- Przyciski kategorii --&gt;&#10;      &lt;div id=&quot;category-buttons&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&#10;        &lt;h3 style=&quot;margin-bottom: 10px; font-size: 16px; color: #555;&quot;&gt;Kategorie:&lt;/h3&gt;&#10;        &lt;div id=&quot;category-buttons-container&quot; style=&quot;display: flex; flex-wrap: wrap; gap: 8px;&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div id=&quot;model-section&quot;&gt;&#10;        &lt;div class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Wybierz model:&lt;/h3&gt;&#10;          &lt;div id=&quot;model-thumbnails&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div id=&quot;config-section&quot; style=&quot;display:none;&quot;&gt;&#10;        &lt;div id=&quot;back-to-models-container&quot; style=&quot;margin-bottom: 15px;&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;legs-section&quot; class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Nogi:&lt;/h3&gt;&#10;          &lt;div id=&quot;legs-thumbnails&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;parts-section&quot; class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Wybierz element:&lt;/h3&gt;&#10;          &lt;div id=&quot;part-tabs&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;materials-section&quot; class=&quot;selection-section&quot;&gt;&#10;          &lt;h3&gt;Wybierz materiał:&lt;/h3&gt;&#10;          &lt;div id=&quot;material-options&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;!-- PANEL KOLEKCJI + MATERIAŁY --&gt;&#10;&lt;div id=&quot;collection-container&quot; style=&quot;display: flex; gap: 24px; margin-top: 20px;&quot;&gt;&#10;  &lt;div id=&quot;collection-icons&quot; style=&quot;display: flex; flex-direction: column; gap: 14px; width: 88px;&quot;&gt;&lt;/div&gt;&#10;  &lt;div id=&quot;material-panel-viewer&quot; class=&quot;options-grid&quot; style=&quot;flex-grow: 1;&quot;&gt;&lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&#10;&#10;&#10;      &lt;/div&gt;&#10;      &lt;div id=&quot;summary&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;!-- FORMULARZ EMAIL - POPUP --&gt;&#10;  &lt;div id=&quot;emailModal&quot; class=&quot;modal hidden&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;span class=&quot;close-button&quot;&gt;&amp;times;&lt;/span&gt;&#10;      &lt;h2&gt;Wyślij swoją konfigurację&lt;/h2&gt;&#10;      &lt;form id=&quot;emailForm&quot;&gt;&#10;        &lt;label for=&quot;name&quot;&gt;Imię i nazwisko:&lt;/label&gt;&#10;        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; required&gt;&#10;&#10;        &lt;label for=&quot;email&quot;&gt;Adres e-mail:&lt;/label&gt;&#10;        &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#10;&#10;        &lt;label for=&quot;phone&quot;&gt;Numer telefonu:&lt;/label&gt;&#10;        &lt;input type=&quot;tel&quot; id=&quot;phone&quot; name=&quot;phone&quot;&gt;&#10;&#10;        &lt;!-- Ukryte pola na dane konfiguracji --&gt;&#10;        &lt;input type=&quot;hidden&quot; id=&quot;model&quot; name=&quot;model&quot;&gt;&#10;        &lt;input type=&quot;hidden&quot; id=&quot;price&quot; name=&quot;price&quot;&gt;&#10;        &lt;input type=&quot;hidden&quot; id=&quot;total&quot; name=&quot;total&quot;&gt;&#10;&#10;        &lt;button type=&quot;submit&quot;&gt;Wyślij&lt;/button&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&#10;  &#10;&#10;&#10;&#10;  &lt;!-- KOMUNIKAT obrotu --&gt;&#10;  &lt;div id=&quot;rotate-message&quot; style=&quot;display: none;&quot;&gt;&#10;   Obróć urządzenie poziomo&#10;&lt;/div&gt;&#10;&#10;&#10;&#10;  &lt;!-- KOMUNIKAT SUKCESU --&gt;&#10;  &lt;div id=&quot;success-message&quot; class=&quot;hidden&quot;&gt;✅ Dziękujemy! Formularz został wysłany.&lt;/div&gt;&#10;&#10;&#10;&#10;  &lt;!-- Dolny panel UI --&gt;&#10;  &lt;div id=&quot;bottom-toolbar&quot; style=&quot;display: none;&quot;&gt;&#10;&#10;    &lt;!-- Przycisk HDR --&gt;&#10;    &lt;button id=&quot;hdr-toggle&quot; title=&quot;Zmień HDR&quot;&gt;&#10;      &lt;img src=&quot;icons/bulb_icon.png&quot; alt=&quot;HDR&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;    &lt;div id=&quot;hdr-panel&quot; class=&quot;hidden&quot;&gt;&#10;      &lt;button id=&quot;hdr-close&quot; class=&quot;hdr-close-btn&quot;&gt;×&lt;/button&gt;&#10;      &lt;div id=&quot;hdr-options&quot; class=&quot;options-grid&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    &lt;button id=&quot;ar-button&quot; title=&quot;AR&quot;&gt;&#10;      &lt;img src=&quot;icons/AR_icon.png&quot; alt=&quot;AR&quot; style=&quot;width: 30px; height: 30px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;    &lt;button id=&quot;dimensions-show&quot; title=&quot;Wymiary modelu&quot;&gt;&#10;      &lt;img src=&quot;icons/dimmension_icon.png&quot; alt=&quot;Wymiary&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;&#10;    &lt;button id=&quot;export-config&quot; title=&quot;Pobierz konfigurację&quot;&gt;&#10;      &lt;img src=&quot;icons/export_icon.png&quot; alt=&quot;Eksport&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;&#10;      &lt;div id=&quot;export-panel&quot; class=&quot;hidden&quot;&gt;&#10;      &lt;button class=&quot;export-btn&quot; data-format=&quot;fbx&quot;&gt;FBX&lt;/button&gt;&#10;      &lt;button class=&quot;export-btn&quot; data-format=&quot;dae&quot;&gt;DAE&lt;/button&gt;&#10;      &lt;button class=&quot;export-btn&quot; data-format=&quot;obj&quot;&gt;OBJ&lt;/button&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;button id=&quot;qr-button&quot; title=&quot;Zobacz na telefonie&quot;&gt;&#10;      &lt;img src=&quot;icons/qr_icon.png&quot; alt=&quot;QR&quot; style=&quot;width: 20px; height: 20px;&quot;&gt;&#10;    &lt;/button&gt;&#10;  &lt;/div&gt;&#10;&#10;&#10;  &lt;div id=&quot;dimension-overlay&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;&#10;&#10;  &lt;link rel=&quot;manifest&quot; href=&quot;manifest.json?v=2025080201&quot; /&gt;&#10;  &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;icons/favicon.png&quot;&gt;&#10;  &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;&#10;  &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot;&quot;&gt;&#10;&#10;&#10;  &lt;div id=&quot;ar-popup&quot; style=&quot;&#10;  position: fixed;&#10;  top: 50%;&#10;  left: 50%;&#10;  transform: translate(-100%, -50%);&#10;  background: white;&#10;  padding: 20px 30px;&#10;  border-radius: 12px;&#10;  box-shadow: 0 4px 24px rgba(0,0,0,0.2);&#10;  display: none;&#10;  z-index: 9999;&#10;  text-align: center;&#10;  max-width: 300px;&#10;&quot;&gt;&#10;    &lt;img src=&quot;icons/AR_icon.png&quot; alt=&quot;AR Ikona&quot; style=&quot;width: 60px; margin-bottom: 10px;&quot; /&gt;&#10;    &lt;div style=&quot;font-size: 18px; font-weight: bold;&quot;&gt;Dostępne wkrótce&lt;/div&gt;&#10;    &lt;div style=&quot;margin-top: 6px; font-size: 14px;&quot;&gt;Tryb AR zostanie wkrótce uruchomiony.&lt;/div&gt;&#10;    &lt;button onclick=&quot;document.getElementById('ar-popup').style.display='none'&quot; style=&quot;&#10;    margin-top: 12px;&#10;    background: #141414;&#10;    color: white;&#10;    border: none;&#10;    padding: 6px 12px;&#10;    border-radius: 6px;&#10;    cursor: pointer;&#10;  &quot;&gt;Zamknij&lt;/button&gt;&#10;  &lt;/div&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  &lt;div id=&quot;qr-popup&quot;&#10;    style=&quot;display:none; position:fixed; top:20%; left:50%; transform:translateX(-50%); background:white; padding:20px; border-radius:12px; box-shadow:0 0 20px rgba(0,0,0,0.2); z-index:3000;&quot;&gt;&#10;    &lt;p style=&quot;margin-bottom:10px;&quot;&gt;Zeskanuj kod QR telefonem:&lt;/p&gt;&#10;    &lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;&#10;    &lt;button id=&quot;qr-close-btn&quot;&gt;Zamknij&lt;/button&gt;&#10;&#10;  &lt;/div&gt;&#10;&#10;&#10;  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js&quot;&gt;&lt;/script&gt;&#10;  &lt;script&gt;&#10;    function showQR() {&#10;      const url = window.location.href;&#10;      document.getElementById('qr-popup').style.display = 'block';&#10;      document.getElementById('qrcode').innerHTML = ''; // czyść stare&#10;      document.getElementById('qr-close-btn').addEventListener('click', () =&gt; {&#10;        document.getElementById('qr-popup').style.display = 'none';&#10;      });&#10;&#10;      new QRCode(document.getElementById(&quot;qrcode&quot;), {&#10;        text: url,&#10;        width: 200,&#10;        height: 200,&#10;      });&#10;    }&#10;  &lt;/script&gt;&#10;&#10;&#10;  &lt;script src=&quot;https://cdn.emailjs.com/dist/email.min.js&quot;&gt;&lt;/script&gt;&#10;  &lt;script&gt;&#10;    emailjs.init('tjw0wCwxn3xsnfNV5');&#10;&#10;    function generateSummaryText() {&#10;      let text = &quot;&quot;;&#10;      let totalPrice = 0;&#10;&#10;      if (window.selectedChair) {&#10;        const price = parseFloat(window.selectedChair.Cena) || 0;&#10;        totalPrice += price;&#10;        text += `Model: ${window.selectedChair.Nazwa} (${price.toFixed(2)} PLN)\n`;&#10;      }&#10;&#10;      if (window.selectedLeg) {&#10;        const price = parseFloat(window.selectedLeg.Cena) || 0;&#10;        totalPrice += price;&#10;        text += `Wariant nóg: ${window.selectedLeg.Nazwa} (${price.toFixed(2)} PLN)\n`;&#10;      }&#10;&#10;      const partOrder = ['seat', 'backseat_inside', 'backseat_outside', 'legs_material', 'backseat'];&#10;      partOrder.forEach(part =&gt; {&#10;        const mat = window.selectedMaterials?.[part];&#10;        if (mat) {&#10;          const price = parseFloat(mat.Cena) || 0;&#10;          totalPrice += price;&#10;          text += `${part.replace(/_/g, ' ')}: ${mat.Nazwa} (${price.toFixed(2)} PLN)\n`;&#10;        }&#10;      });&#10;&#10;      text += `\nSuma konfiguracji: ${totalPrice.toFixed(2)} PLN`;&#10;      return { text, totalPrice };&#10;    }&#10;&#10;&#10;&#10;    emailForm.addEventListener('submit', (e) =&gt; {&#10;      e.preventDefault();&#10;&#10;      const summary = generateSummaryText();&#10;&#10;      document.getElementById('model').value = window.selectedChair?.Nazwa || 'Brak modelu';&#10;      document.getElementById('price').value = parseFloat(window.selectedChair?.Cena || 0).toFixed(2);&#10;      document.getElementById('total').value = summary.totalPrice.toFixed(2);&#10;&#10;      let configTextInput = document.getElementById('configText');&#10;      if (!configTextInput) {&#10;        configTextInput = document.createElement('textarea');&#10;        configTextInput.name = 'configText';&#10;        configTextInput.id = 'configText';&#10;        configTextInput.hidden = true;&#10;        emailForm.appendChild(configTextInput);&#10;      }&#10;      configTextInput.value = summary.text;&#10;&#10;      emailjs.sendForm('service_iqzcwli', 'template_qgq7htg', emailForm)&#10;        .then(() =&gt; {&#10;          document.getElementById('emailModal')?.classList.add('hidden');&#10;&#10;          const successMessage = document.getElementById('success-message');&#10;          successMessage.classList.remove('hidden');&#10;          successMessage.classList.add('visible');&#10;&#10;          setTimeout(() =&gt; {&#10;            successMessage.classList.remove('visible');&#10;            successMessage.classList.add('hidden');&#10;          }, 3500);&#10;&#10;          emailForm.reset();&#10;        })&#10;        .catch((error) =&gt; {&#10;          alert('❌ Coś poszło nie tak. Spróbuj ponownie.');&#10;          console.error('EmailJS error:', error);&#10;        });&#10;    });&#10;  &lt;/script&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  &lt;script type=&quot;module&quot;&gt;&#10;    // Główna biblioteka Three.js (z importmap)&#10;    import * as THREE from 'three'; // opcjonalne, jeśli używasz tylko konkretnych importów&#10;&#10;    // Konkretnie z Three.js (potrzebne do wymiarów i geometrii)&#10;    import {&#10;      Group,&#10;      Box3,&#10;      Vector3,&#10;      ArrowHelper,&#10;      Sprite,&#10;      SpriteMaterial,&#10;      CanvasTexture,&#10;      Color,&#10;      TextureLoader&#10;    } from 'three';&#10;&#10;    // ThreePipe core – viewer i pluginy&#10;    import {&#10;      ThreeViewer,&#10;      LoadingScreenPlugin,&#10;      GBufferPlugin,&#10;      SSAAPlugin,&#10;    } from 'threepipe';&#10;&#10;    // Pluginy z WebGI (ThreePipe)&#10;    import {&#10;      SSReflectionPlugin,&#10;      BloomPlugin&#10;    } from '@threepipe/webgi-plugins';&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    const CAMERA_FOV = 12;&#10;    const CAMERA_NEAR = 0.1;&#10;    const CAMERA_FAR = 100;&#10;    const CAMERA_POSITION = { x: -4.5, y: 0.76, z: 3.9 };&#10;    const CAMERA_TARGET = { x: 0.79, y: -1.09, z: -0.22 };&#10;&#10;    const MIN_ZOOM_DISTANCE = 1; // minimalna odległość kamery od modelu (przybliżenie)&#10;    const MAX_ZOOM_DISTANCE = 8; // maksymalna odległość kamery od modelu (oddalenie)&#10;    const VERTICAL_OFFSET = 0;&#10;&#10;    let viewer, currentModelContainer, currentLegModel;&#10;    let allData = [];&#10;    let selectedChair, selectedLeg, selectedMaterials = {};&#10;    let globalCameraTargetPosition;&#10;    let userInteracted = false;&#10;    let dimensionHelpers = [];&#10;    let currentModel = null;&#10;    let selectedLegVariant = null;&#10;    let lastOpenedCollection = null;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    const ELEMENT_ICONS = {&#10;      seat: 'icons/m_seat_icon.png',&#10;      backseat_inside: 'icons/m_backseat_in_icon.png',&#10;      backseat_outside: 'icons/m_backseat_out_icon.png',&#10;      backseat: 'icons/m_backseat_icon.png',&#10;      legs: 'icons/m_legs_icon.png'&#10;    };&#10;&#10;    function showScreen(screenName) {&#10;      const welcomeScreen = document.getElementById('welcome-screen');&#10;      &#10;      // Ukryj welcome screen przy przejściu do jakiegokolwiek ekranu&#10;      if (welcomeScreen &amp;&amp; screenName !== 'search-results') {&#10;        welcomeScreen.style.display = 'none';&#10;      }&#10;      &#10;      document.getElementById('model-section').style.display = (screenName === 'models' || screenName === 'search-results') ? 'block' : 'none';&#10;      document.getElementById('config-section').style.display = screenName === 'config' ? 'block' : 'none';&#10;    }&#10;&#10;&#10;    async function loadCameraTarget() {&#10;      try {&#10;        const targetsContainer = await viewer.load('camera_target.glb');&#10;        if (targetsContainer) {&#10;          // Szukaj obiektu o nazwie &quot;camera_target&quot; (lub zmień na nazwę empty z Blender)&#10;          const targetObject = targetsContainer.getObjectByName('camera_target');&#10;          if (targetObject) {&#10;            globalCameraTargetPosition = targetObject.getWorldPosition(new Vector3());&#10;          } else {&#10;            // Jeśli nie znajdzie, użyj środka sceny&#10;            globalCameraTargetPosition = new Vector3(0, 0, 0);&#10;          }&#10;          viewer.scene.remove(targetsContainer); // nie pokazuj empty w scenie&#10;        }&#10;      } catch (e) {&#10;        console.warn(&quot;Nie udało się załadować 'camera_target.glb'. Używam domyślnych ustawień.&quot;);&#10;        globalCameraTargetPosition = new Vector3(0, 0, 0);&#10;      }&#10;    }&#10;&#10;    async function loadModelWithFreshness(path, viewer, options = {}) {&#10;      try {&#10;        // Wykonaj zapytanie HEAD, aby pobrać Last-Modified z serwera&#10;        const res = await fetch(path, { method: 'HEAD' });&#10;        const lastModified = res.headers.get('Last-Modified');&#10;&#10;        // Jeśli data jest dostępna, użyj jej jako wersji cache-bustera&#10;        const version = lastModified ? new Date(lastModified).getTime() : Date.now();&#10;        const pathWithVersion = `${path}?v=${version}`;&#10;&#10;        // Załaduj model z cache-busterem&#10;        const modelContainer = await viewer.load(pathWithVersion, options);&#10;        return modelContainer;&#10;      } catch (e) {&#10;        console.error(`Nie udało się załadować modelu: ${path}`, e);&#10;        throw e;&#10;      }&#10;    }&#10;&#10;&#10;&#10;    async function init() {&#10;      const canvas = document.getElementById(&quot;canvas&quot;);&#10;&#10;      viewer = new ThreeViewer({&#10;        canvas: canvas,&#10;        plugins: [ GBufferPlugin, SSAAPlugin, SSReflectionPlugin, BloomPlugin],&#10;        rendererSettings: { antialias: true }&#10;      });&#10;      if (viewer.controls) {&#10;        viewer.controls.minDistance = MIN_ZOOM_DISTANCE;&#10;        viewer.controls.maxDistance = MAX_ZOOM_DISTANCE;&#10;        viewer.controls.dampingFactor = 0.1;&#10;        viewer.controls.enableDamping = true;&#10;        // Dodaj nasłuchiwanie TUTAJ, po utworzeniu viewer i controls:&#10;        viewer.controls.addEventListener('change', clampCameraDistance);&#10;      }&#10;&#10;      const collapseBtn = document.getElementById('collapse-btn');&#10;      const overviewPanel = document.getElementById('config-overview');&#10;&#10;      collapseBtn.onclick = () =&gt; {&#10;        overviewPanel.classList.toggle('collapsed');&#10;        collapseBtn.textContent = overviewPanel.classList.contains('collapsed') ? '+' : '−';&#10;      };&#10;&#10;&#10;      document.getElementById('buy-button').innerHTML = '&lt;span class=&quot;cart-icon&quot;&gt;&lt;/span&gt;Zapytaj o produkt';&#10;&#10;      document.getElementById('buy-button').onclick = () =&gt; {&#10;        const summary = generateSummaryText();&#10;        const emailAddress = 'mrpeter@o2.pl'; // adres docelowy&#10;&#10;        const subject = `Zapytanie o wycenę: ${selectedChair.Nazwa}`;&#10;        const body = `Dzień dobry,\n\nProszę o wycenę poniższej konfiguracji:\n\n${summary.text}\n-------------------\nSuma: ${summary.totalPrice.toFixed(2)} PLN\n\nPozdrawiam,\n[Imię i nazwisko]`;&#10;&#10;        console.log(&quot;Symulowana wysyłka wiadomości:&quot;);&#10;        console.log(&quot;Temat:&quot;, subject);&#10;        console.log(&quot;Treść:&quot;, body);&#10;&#10;        // Zamknij modal jeśli otwarty&#10;        const modal = document.getElementById('emailModal');&#10;        if (modal) modal.classList.add('hidden');&#10;&#10;        // Pokaż komunikat sukcesu (dodaj klasę visible i usuń hidden)&#10;        const successMessage = document.getElementById('success-message');&#10;        if (successMessage) {&#10;          successMessage.classList.add('visible');&#10;          successMessage.classList.remove('hidden');&#10;&#10;          // Po 0.5s otwórz mailto, by dać czas na pokazanie komunikatu&#10;          &#10;&#10;          // Ukryj komunikat po 3 sekundach&#10;          setTimeout(() =&gt; {&#10;            successMessage.classList.remove('visible');&#10;            successMessage.classList.add('hidden');&#10;          }, 3500);&#10;        } else {&#10;          // Jeżeli brak komunikatu, to od razu wywołaj mailto&#10;          window.location.href = `mailto:${emailAddress}?subject=${encodeURIComponent(subject)}&amp;body=${encodeURIComponent(body)}`;&#10;        }&#10;      };&#10;&#10;&#10;&#10;&#10;      try {&#10;        await viewer.setEnvironmentMap(&quot;hdr/hamburg_hbf_1k.hdr&quot;, { isHDR: true });&#10;      } catch (e) { console.error(&quot;Błąd ładowania HDR:&quot;, e); }&#10;&#10;      await loadCameraTarget();&#10;      window.addEventListener(&quot;resize&quot;, resizeCanvas);&#10;      resizeCanvas();&#10;      await loadDataFromSheet();&#10;      &#10;      // Pokaż welcome screen jako domyślny ekran&#10;      const welcomeScreen = document.getElementById('welcome-screen');&#10;      if (welcomeScreen) {&#10;        welcomeScreen.style.display = 'flex';&#10;      }&#10;      &#10;      // Ukryj toolbar na welcome screen&#10;      const toolbar = document.getElementById('bottom-toolbar');&#10;      if (toolbar) {&#10;        toolbar.classList.remove('visible');&#10;        toolbar.style.display = 'none';&#10;      }&#10;      &#10;      // Ukryj panel konfiguracji na welcome screen&#10;      const configOverview = document.getElementById('config-overview');&#10;      if (configOverview) {&#10;        configOverview.style.display = 'none';&#10;        configOverview.classList.add('hidden');&#10;      }&#10;    }&#10;&#10;    function setCameraView(targetPosition) {&#10;      const camera = viewer.scene.activeCamera;&#10;      camera.fov = CAMERA_FOV;&#10;      camera.near = CAMERA_NEAR;&#10;      camera.far = CAMERA_FAR;&#10;      camera.position.set(CAMERA_POSITION.x, CAMERA_POSITION.y, CAMERA_POSITION.z);&#10;&#10;      // Ustaw target na wybraną pozycję (np. globalCameraTargetPosition)&#10;      let center = globalCameraTargetPosition || new Vector3(0, 0, 0);&#10;      camera.lookAt(center);&#10;      camera.updateProjectionMatrix();&#10;&#10;      // Całkowicie wyłącz kontrolki pozycjonowania&#10;      if (viewer.controls) {&#10;        viewer.controls.target.copy(center);&#10;        viewer.controls.enableRotate = true;&#10;        viewer.controls.enablePan = false;&#10;        viewer.controls.screenSpacePanning = false;&#10;        viewer.controls.enableZoom = false;&#10;        viewer.controls.enabled = true; // to blokuje WSZYSTKIE interakcje&#10;        viewer.controls.update();&#10;      }&#10;    }&#10;&#10;    function resizeCanvas() {&#10;      const sidebar = document.getElementById(&quot;sidebar&quot;);&#10;      const sidebarWidth = sidebar ? sidebar.offsetWidth : 0;&#10;      const canvas = document.getElementById(&quot;canvas&quot;);&#10;      const width = window.innerWidth - sidebarWidth;&#10;      const height = window.innerHeight;&#10;      // Ustaw rozmiar CSS&#10;      canvas.style.width = width + &quot;px&quot;;&#10;      canvas.style.height = height + &quot;px&quot;;&#10;      // Ustaw rozmiar atrybutów (dla WebGL)&#10;      canvas.width = width;&#10;      canvas.height = height;&#10;      if (viewer &amp;&amp; viewer.renderer &amp;&amp; viewer.scene &amp;&amp; viewer.scene.activeCamera) {&#10;        viewer.renderer.setSize(width, height, false);&#10;        viewer.scene.activeCamera.aspect = width / height;&#10;        viewer.scene.activeCamera.updateProjectionMatrix();&#10;      }&#10;    }&#10;&#10;    async function silentLoadModel(variant) {&#10;      if (currentModelContainer) viewer.scene.remove(currentModelContainer);&#10;      currentModelContainer = await loadModelWithFreshness(`chairs/${variant.Nazwa}.glb`, viewer, { autoCenter: true });&#10;&#10;      console.log(&quot;Meshe w modelu:&quot;, currentModelContainer.children.map(obj =&gt; obj.name)); // &lt;-- DODAJ TO TUTAJ&#10;      //selectedChair = variant; // &lt;-- DODAJ TO!&#10;&#10;      &#10;      // Wyśrodkuj kamerę na modelu&#10;      const box = new Box3().setFromObject(currentModelContainer);&#10;      const center = box.getCenter(new Vector3());&#10;      setCameraView(center);&#10;      currentModelContainer.position.sub(center);&#10;      updateSummary();&#10;      renderPartButtons();&#10;    }&#10;&#10;    async function loadModel(variant) {&#10;  // Ukryj welcome screen przy wyborze krzesła&#10;  const welcomeScreen = document.getElementById('welcome-screen');&#10;  if (welcomeScreen) {&#10;    welcomeScreen.style.display = 'none';&#10;  }&#10;  &#10;  if (currentModelContainer) {&#10;    viewer.scene.remove(currentModelContainer);&#10;    if (typeof currentModelContainer.dispose === 'function') currentModelContainer.dispose();&#10;  }&#10;  if (currentLegModel) {&#10;    viewer.scene.remove(currentLegModel);&#10;    if (typeof currentLegModel.dispose === 'function') currentLegModel.dispose();&#10;  }&#10;  currentModelContainer = null;&#10;  currentLegModel = null;&#10;  selectedLeg = null;&#10;  selectedMaterials = {};&#10;&#10;  document.getElementById('model-loader').style.display = 'flex';&#10;&#10;  try {&#10;    const modelPath = `chairs/${variant.Nazwa}.glb`;&#10;    selectedChair = variant;&#10;&#10;    // Załaduj kubełek&#10;    currentModelContainer = await loadModelWithFreshness(modelPath, viewer, { autoCenter: true });&#10;&#10;    // Jeśli kubełek, to ewentualnie załaduj domyślne nogi&#10;    if (selectedChair.Grupa &amp;&amp; selectedChair.Grupa.toLowerCase() === 'kubełek') {&#10;      const chairBounds = new Box3().setFromObject(currentModelContainer);&#10;      currentModelContainer.position.y -= chairBounds.min.y;&#10;&#10;      const legsVariants = allData.filter(d =&gt; d.Grupa.toLowerCase() === 'nogi');&#10;      const defaultLeg = legsVariants.find(l =&gt; l.Nazwa.toLowerCase().includes('regularne')) || legsVariants[0];&#10;&#10;      if (defaultLeg) {&#10;        await setLegModel(defaultLeg);&#10;      }&#10;&#10;      document.getElementById('legs-section').style.display = 'block';&#10;      activateLegsTabAndShowMaterials();&#10;    } else {&#10;      document.getElementById('legs-section').style.display = 'none';&#10;      if (currentLegModel) {&#10;        viewer.scene.remove(currentLegModel);&#10;        currentLegModel = null;&#10;        selectedLeg = null;&#10;      }&#10;    }&#10;&#10;    // ✅ Dopiero teraz chowamy loader&#10;    // ✅ Eleganckie ukrycie z fade-out&#10;document.getElementById('model-loader').classList.add('fade-out');&#10;setTimeout(() =&gt; {&#10;  document.getElementById('model-loader').style.display = 'none';&#10;  document.getElementById('model-loader').classList.remove('fade-out');&#10;}, 500);&#10;&#10;&#10;    // Pokaż dolny pasek narzędzi&#10;    const toolbar = document.getElementById('bottom-toolbar');&#10;    toolbar.classList.add('visible');&#10;    toolbar.style.display = 'flex';&#10;&#10;    // Pokaż panel konfiguracji&#10;    const configOverview = document.getElementById('config-overview');&#10;    if (configOverview) {&#10;      configOverview.style.display = 'block';&#10;      configOverview.classList.remove('hidden');&#10;    }&#10;&#10;    renderPartButtons();&#10;    userInteracted = true;&#10;    hideDimensions();&#10;&#10;    // Pokaż sekcję materiałów nóg&#10;    document.getElementById('materials-section').style.display = 'block';&#10;&#10;    // Wyrenderuj kafelki materiałów nóg&#10;    const legsMaterials = allData.filter(d =&gt; d.Grupa.toLowerCase() === 'nogi');&#10;    renderOptions('materials-thumbnails', legsMaterials, (item) =&gt; {&#10;      setLegMaterial(item);&#10;    });&#10;&#10;    setCameraView(globalCameraTargetPosition);&#10;    enforceZoomLimits();&#10;    updateUI();&#10;    showScreen('config');&#10;&#10;  } catch (e) {&#10;    console.error(`BŁĄD ładowania modelu: ${e.message}`, e);&#10;    // Ukryj loader nawet przy błędzie&#10;    document.getElementById('model-loader').style.display = 'none';&#10;  }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    function createLegMaterial(legData) {&#10;      const metalness = isNaN(parseFloat(legData.metalness)) ? 1 : parseFloat(legData.metalness);&#10;      const roughness = isNaN(parseFloat(legData.roughness)) ? 0.1 : parseFloat(legData.roughness);&#10;      const color = legData.color || '#FFFFFF';&#10;&#10;      return new THREE.MeshStandardMaterial({&#10;        color: new THREE.Color(color),&#10;        metalness: metalness,&#10;        roughness: roughness,&#10;      });&#10;    }&#10;    &#10;    function czyNogaPasujeDoKubełka(nogaVariant, kubelekNazwa) {&#10;  const zgodneKubełki = (nogaVariant.DlaKubełka || '')&#10;    .toLowerCase()&#10;    .split(',')&#10;    .map(k =&gt; k.trim());&#10;  return zgodneKubełki.includes(kubelekNazwa.toLowerCase());&#10;}&#10;&#10;&#10;    async function setLegModel(variant) {&#10;  userInteracted = true;&#10;  console.log(&quot;Wywołanie setLegModel dla wariantu:&quot;, variant);&#10;&#10;  // ✅ Sprawdzenie zgodności kubełka z wariantem nóg&#10;  if (selectedChair &amp;&amp; selectedChair.Grupa.toLowerCase() === 'kubełek') {&#10;    const zgodneKubełki = (variant.DlaKubełka || '').toLowerCase().split(',').map(k =&gt; k.trim());&#10;    const nazwaKubełka = selectedChair.Nazwa?.toLowerCase();&#10;    if (!zgodneKubełki.includes(nazwaKubełka)) {&#10;      console.warn(`❌ Wariant nóg &quot;${variant.Nazwa}&quot; nie pasuje do kubełka &quot;${selectedChair.Nazwa}&quot;`);&#10;      return;&#10;    }&#10;  }&#10;&#10;  // Pokaż loader podczas ładowania nóg&#10;  showModelLoader('Ładowanie nóg...');&#10;&#10;      console.log(&quot;Wywołanie setLegModel dla wariantu:&quot;, variant);&#10;      const oldLegs = currentLegModel;&#10;      try {&#10;        const modelPath = `legs/${variant.Nazwa}.glb`;&#10;        console.log(&quot;Ładuję model nóg z ścieżki:&quot;, modelPath);&#10;        const newLegs = await loadModelWithFreshness(modelPath, viewer, { autoCenter: false });&#10;&#10;&#10;        const legBounds = new Box3().setFromObject(newLegs);&#10;        const legHeight = legBounds.max.y - legBounds.min.y;&#10;&#10;        if (currentModelContainer &amp;&amp; selectedChair) {&#10;          if (selectedChair.Grupa.toLowerCase() === 'kubełek') {&#10;            let height = parseFloat(variant.height) || legHeight;&#10;            newLegs.position.y = -height;&#10;            currentModelContainer.position.y = 0;&#10;          } else {&#10;            currentModelContainer.position.y = legHeight + VERTICAL_OFFSET;&#10;            newLegs.position.y = 0;&#10;          }&#10;        }&#10;&#10;        if (oldLegs) {&#10;          viewer.scene.remove(oldLegs);&#10;          if (typeof oldLegs.dispose === 'function') oldLegs.dispose();&#10;        }&#10;        viewer.scene.add(newLegs);&#10;        currentLegModel = newLegs;&#10;        selectedLeg = variant;&#10;        renderFilteredMaterialOptions('legs'); // ⬅️ to odświeża widok kafelków materiałów nóg&#10;        updateMaterialTiles(); // ⬅️ MUSI być tutaj!&#10;&#10;&#10;        // Odśwież listę nóg, żeby podświetlić wybrany wariant&#10;        const legs = allData&#10;  .filter(d =&gt; d.Grupa.toLowerCase() === 'nogi')&#10;  .filter(noga =&gt; {&#10;    if (!selectedChair || selectedChair.Grupa.toLowerCase() !== 'kubełek') return true;&#10;    return czyNogaPasujeDoKubełka(noga, selectedChair.Nazwa);&#10;  });&#10;&#10;&#10;&#10;// Ustaw pierwszą nogę jeśli jeszcze żadna nie została wybrana&#10;if (!selectedLeg &amp;&amp; legs.length &gt; 0) {&#10;  setLegModel(legs[0]); // automatycznie ustawia pierwszą pasującą nogę&#10;}&#10;    renderOptions('legs-thumbnails', legs, item =&gt; {&#10;  setLegModel(item);&#10;});    &#10;&#10;&#10;&#10;        updateSummary();&#10;&#10;        // Wymuszenie odświeżenia sceny&#10;        if (viewer.render) viewer.render();&#10;        &#10;        // Ukryj loader po udanym załadowaniu&#10;        hideModelLoader();&#10;      } catch (e) {&#10;        console.error(`BŁĄD ładowania nóg: ${e.message}`, e);&#10;        // Ukryj loader również przy błędzie&#10;        hideModelLoader();&#10;      }&#10;    }&#10;&#10;&#10;&#10;    let forceRenderInterval;&#10;&#10;    function triggerSceneRefresh() {&#10;      if (viewer?.camera) {&#10;        viewer.camera.position.x += 0.00001;&#10;        viewer.camera.zoom += 0.0001; // ⬅️ mikroskopijny zoom&#10;        viewer.camera.updateProjectionMatrix();&#10;      }&#10;      if (viewer?.renderer?.info) {&#10;        viewer.renderer.info.reset();&#10;      }&#10;      if (viewer?.render) viewer.render();&#10;    }&#10;&#10;&#10;    function startForceRender(duration = 2000) {&#10;      clearInterval(forceRenderInterval);&#10;      forceRenderInterval = setInterval(() =&gt; {&#10;        triggerSceneRefresh();&#10;      }, 100);&#10;&#10;      setTimeout(() =&gt; {&#10;        clearInterval(forceRenderInterval);&#10;        console.log(&quot; Zakończono wymuszone odświeżanie&quot;);&#10;      }, duration);&#10;    }&#10;&#10;&#10;&#10;    const textureLoader = new TextureLoader();&#10;&#10;    &#10;&#10;    if (&#10;      selectedChair?.Grupa?.toLowerCase() === 'kubełek' &amp;&amp;&#10;      variant.TargetMeshOrModel?.toLowerCase().includes('legs') &amp;&amp;&#10;      variant.WariantModelu&#10;    ) {&#10;      //  dla kubełków z podmianą nóg — zmień model nóg&#10;      setLegModel(variant);&#10;    } else if (&#10;      selectedChair &amp;&amp;&#10;      (selectedChair.Grupa.toLowerCase() !== 'kubełek' || !variant.WariantModelu)&#10;    ) {&#10;      //  dla pozostałych krzeseł bez wariantów nóg — wyświetl materiały nóg do wyboru&#10;      showLegMaterialsForSimpleChairs(selectedChair);&#10;    }&#10;&#10;    // Funkcje preloadera – używamy tego samego model-loader co dla modeli i nóg&#10;function showPreloader() {&#10;  showModelLoader('Ładowanie materiału...');&#10;}&#10;function hidePreloader() {&#10;  hideModelLoader();&#10;}&#10;&#10;// Uniwersalne funkcje loadera z zmiennym tekstem&#10;function showModelLoader(text = 'Ładowanie modelu...') {&#10;  const el = document.getElementById('model-loader');&#10;  if (el) {&#10;    const textEl = el.querySelector('p');&#10;    if (textEl) textEl.textContent = text;&#10;    el.style.display = 'flex';&#10;  }&#10;}&#10;&#10;function hideModelLoader() {&#10;  const el = document.getElementById('model-loader');&#10;  if (el) {&#10;    el.classList.add('fade-out');&#10;    setTimeout(() =&gt; {&#10;      el.style.display = 'none';&#10;      el.classList.remove('fade-out');&#10;      // Przywróć oryginalny tekst&#10;      const textEl = el.querySelector('p');&#10;      if (textEl) textEl.textContent = 'Ładowanie modelu...';&#10;    }, 500);&#10;  }&#10;}&#10;&#10;// Funkcje loadera materiałów&#10;function showMaterialLoader(text = 'Ładowanie materiału...') {&#10;  const el = document.getElementById('material-preloader');&#10;  if (el) {&#10;    const textEl = el.querySelector('div');&#10;    if (textEl) textEl.textContent = text;&#10;    el.style.display = 'flex';&#10;  }&#10;}&#10;&#10;function hideMaterialLoader() {&#10;  const el = document.getElementById('material-preloader');&#10;  if (el) {&#10;    el.style.display = 'none';&#10;  }&#10;}&#10;&#10;    function applyMaterialToMesh(variant, forcedMeshName) {&#10;      const clone = { ...variant };&#10;      clone.TargetMeshOrModel = forcedMeshName;&#10;      console.log(` Przypisano '${clone.Nazwa}' tylko do mesh '${forcedMeshName}'`);&#10;      applyMaterial(clone);&#10;    }&#10;&#10;    // Funkcja, która wyświetla kafelki materiałów nóg dla prostych krzeseł&#10;    function showLegMaterialsForSimpleChairs(chair) {&#10;      const legsMaterialsContainer = document.getElementById('legs-thumbnails');&#10;      // Usuń tylko kafelki materiałów (pozostaw warianty nóg)&#10;      legsMaterialsContainer.querySelectorAll('.material-tile').forEach(tile =&gt; tile.remove());&#10;&#10;&#10;      // Pobierz materiały nóg dla danego krzesła (przykład, wymaga dostosowania)&#10;      const materials = getMaterialsForLegs(chair.defaultLegsId || 'default');&#10;&#10;      materials.forEach(mat =&gt; {&#10;        const tile = document.createElement('div');&#10;        tile.className = 'material-tile';&#10;        tile.textContent = mat.Nazwa;&#10;        tile.style.backgroundImage = `url(${mat.Obrazek || 'fallback.png'})`;&#10;        tile.onclick = () =&gt; {&#10;          onLegVariantClick(mat.DlaModeliNóg || mat.Nazwa);&#10;          applyLegMaterial(mat);&#10;        };&#10;&#10;        legsMaterialsContainer.appendChild(tile);&#10;      });&#10;    }&#10;&#10;&#10;    &#10;&#10;&#10;&#10;// DOBRE PROGRESYWNE ŁADOWANIE MATERIAŁÓW!!!&#10;&#10;async function applyMaterial(variant) {&#10;  showMaterialLoader('Ładowanie materiału...');&#10;  try {&#10;    console.log(' variant:', variant);&#10;&#10;    if (!currentModelContainer) {&#10;      console.warn('currentModelContainer jest null lub undefined');&#10;      hideMaterialLoader();&#10;      return;&#10;    }&#10;&#10;    if (!variant.TargetMeshOrModel) {&#10;      console.warn('Brak TargetMeshOrModel w wariancie');&#10;      hideMaterialLoader();&#10;      return;&#10;    }&#10;&#10;    const targetNames = variant.TargetMeshOrModel.split(',').map(name =&gt; name.trim());&#10;    const isHex = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(variant.Color || variant.Wartość);&#10;    const folderPath = (!isHex &amp;&amp; variant.Wartość.startsWith('textures/')) ? variant.Wartość : `textures/${variant.Wartość}`;&#10;&#10;    // Progresywna obsługa wielu meshów - loader znika dopiero po wszystkich meshach&#10;    const meshPromises = targetNames.map(async (targetName) =&gt; {&#10;      let container;&#10;      if (targetName.toLowerCase() === 'legs') {&#10;        if (selectedChair?.Grupa?.toLowerCase() === 'krzesło' || !currentLegModel) {&#10;          container = currentModelContainer;&#10;        } else {&#10;          container = currentLegModel;&#10;        }&#10;      } else {&#10;        container = currentModelContainer;&#10;      }&#10;&#10;      let targetObject = null;&#10;      container?.traverse(obj =&gt; {&#10;        if (&#10;          obj.isMesh &amp;&amp;&#10;          obj.name &amp;&amp;&#10;          obj.name.toLowerCase().trim() === targetName.toLowerCase().trim()&#10;        ) {&#10;          targetObject = obj;&#10;        }&#10;      });&#10;&#10;      if (!targetObject) {&#10;        console.warn(`❌ Mesh '${targetName}' nie znaleziony w modelu`);&#10;        return;&#10;      }&#10;&#10;      if (!targetObject.material) {&#10;        console.warn(`⚠️ Mesh '${targetName}' nie ma materiału.`);&#10;        return;&#10;      }&#10;&#10;      // Funkcja do bezpiecznego ładowania tekstury (zwraca null, jeśli nie uda się załadować)&#10;      async function loadTextureSafe(url) {&#10;        try {&#10;          const tex = await textureLoader.loadAsync(url);&#10;          tex.magFilter = THREE.LinearFilter;&#10;          tex.minFilter = THREE.LinearMipMapLinearFilter;&#10;          tex.anisotropy = viewer?.renderer?.capabilities?.getMaxAnisotropy?.() || 4;&#10;          tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;          tex.encoding = THREE.sRGBEncoding;&#10;          tex.offset.set(0, 0);&#10;          tex.repeat.set(1, 1);&#10;          tex.needsUpdate = true;&#10;          return tex;&#10;        } catch {&#10;          return null;&#10;        }&#10;      }&#10;&#10;      if (isHex) {&#10;        // Jeśli kolor HEX – podmień od razu (nie ma tekstur)&#10;        const material = targetObject.material.clone();&#10;        material.color.set(variant.Color || variant.Wartość);&#10;        material.map = null;&#10;        material.normalMap = null;&#10;        material.roughnessMap = null;&#10;        material.metalnessMap = null;&#10;        material.needsUpdate = true;&#10;        targetObject.material = material;&#10;        viewer.render?.();&#10;      } else if (folderPath &amp;&amp; !/\.(jpg|jpeg|png|gif)$/i.test(folderPath)) {&#10;        // --- PROGRESYWNE ŁADOWANIE ---&#10;&#10;        // 1. Najpierw załaduj basecolor&#10;        let baseColorTex = null;&#10;        try {&#10;          baseColorTex = await loadTextureSafe(`${folderPath}/baseColor.jpg`);&#10;        } catch (err) {&#10;          console.warn(&quot;Błąd ładowania baseColor:&quot;, err);&#10;        }&#10;&#10;        // 2. Skopiuj materiał i podepnij basecolor (lub null)&#10;        const material = targetObject.material.clone();&#10;        material.map = baseColorTex || null;&#10;        material.color.set(0xffffff);&#10;        material.normalMap = null;&#10;        material.roughnessMap = null;&#10;        material.metalnessMap = null;&#10;        material.needsUpdate = true;&#10;&#10;        // 3. Metalness i roughness z wariantu&#10;        function parseValue(val, fallback) {&#10;          const raw = (val || '')&#10;            .toString()&#10;            .trim()&#10;            .replace(/['&quot;]/g, '')&#10;            .replace(',', '.');&#10;          const parsed = parseFloat(raw);&#10;          return !isNaN(parsed) ? parsed : fallback;&#10;        }&#10;        material.metalness = parseValue(variant.Metalness, 0);&#10;        material.roughness = parseValue(variant.Roughness, 0.814);&#10;&#10;        // 4. Podmień materiał dopiero teraz (dopiero po basecolor)&#10;        targetObject.material = material;&#10;        if (targetObject.geometry?.computeVertexNormals) {&#10;          targetObject.geometry.computeVertexNormals();&#10;        }&#10;        viewer.render?.();&#10;&#10;        // 6. Progresywnie doładowuj pozostałe mapy i podmieniaj &quot;w locie&quot;&#10;        loadTextureSafe(`${folderPath}/normal.jpg`).then(tex =&gt; {&#10;          if (tex) {&#10;            tex.encoding = THREE.LinearEncoding;&#10;            tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;            tex.offset.set(0, 0);&#10;            tex.repeat.set(1.001, 1.001);&#10;            material.normalMap = tex;&#10;            material.needsUpdate = true;&#10;            targetObject.material = material;&#10;            viewer.render?.();&#10;          }&#10;        });&#10;&#10;        loadTextureSafe(`${folderPath}/roughness.jpg`).then(tex =&gt; {&#10;          if (tex) {&#10;            tex.encoding = THREE.LinearEncoding;&#10;            tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;            tex.offset.set(0, 0);&#10;            tex.repeat.set(1.001, 1.001);&#10;            material.roughnessMap = tex;&#10;            material.needsUpdate = true;&#10;            targetObject.material = material;&#10;            viewer.render?.();&#10;          }&#10;        });&#10;&#10;        loadTextureSafe(`${folderPath}/metallic.jpg`).then(tex =&gt; {&#10;          if (tex) {&#10;            tex.encoding = THREE.LinearEncoding;&#10;            tex.wrapS = tex.wrapT = THREE.RepeatWrapping;&#10;            tex.offset.set(0, 0);&#10;            tex.repeat.set(1.001, 1.001);&#10;            material.metalnessMap = tex;&#10;            material.needsUpdate = true;&#10;            targetObject.material = material;&#10;            viewer.render?.();&#10;          }&#10;        });&#10;&#10;        console.log(`✅ Progresywne ładowanie tekstur na '${targetName}'`);&#10;        console.log(` Metalness=${material.metalness}, Roughness=${material.roughness}`);&#10;      }&#10;&#10;      // Zapamiętanie wyboru i odświeżenie sceny&#10;      selectedMaterials[targetName] = variant;&#10;      if (targetName === 'legs' || targetName === 'legs_material') {&#10;        selectedMaterials['legs_material'] = variant;&#10;      }&#10;    });&#10;&#10;    await Promise.all(meshPromises); // czekaj aż wszystkie meshe ogarną materiał&#10;hideMaterialLoader();&#10;    // ️ Automatycznie przypisz Folder do eksportu&#10;    Object.entries(selectedMaterials).forEach(([key, mat]) =&gt; {&#10;      if (!mat.Folder &amp;&amp; typeof mat.Wartość === 'string') {&#10;        const parts = mat.Wartość.split('/');&#10;        const last = parts[parts.length - 1];&#10;        if (last &amp;&amp; texturesFilesByFolder?.[last]) {&#10;          mat.Folder = last;&#10;          console.log(` Dodano Folder='${last}' do '${key}'`);&#10;        }&#10;      }&#10;    });&#10;&#10;    viewer.scene.traverse(obj =&gt; {&#10;      if (obj.isMesh &amp;&amp; obj.material) {&#10;        obj.material.needsUpdate = true;&#10;      }&#10;    });&#10;&#10;    if (viewer?.camera) {&#10;      viewer.camera.position.x += 0.00001;&#10;      viewer.camera.updateProjectionMatrix();&#10;    }&#10;&#10;    if (viewer?.render) viewer.render();&#10;&#10;    updateSummary();&#10;  } catch (e) {&#10;    hideMaterialLoader();&#10;    console.error(&quot;Błąd w applyMaterial:&quot;, e);&#10;  }&#10;}&#10;&#10;function applyMaterialToSpecificMesh(variant, meshKey) {&#10;  const clone = { ...variant };&#10;  clone.TargetMeshOrModel = meshKey;&#10;  console.log(` Przypisano '${variant.Nazwa}' tylko do mesh '${meshKey}'`);&#10;  applyMaterial(clone);&#10;}&#10;&#10;// DOBRE PROGRESYWNE ŁADOWANIE MATERIAŁÓW!!!&#10;&#10;&#10;&#10;&#10;&#10;      function renderOptions(containerId, items, onSelect, isInteractive = true) {&#10;        const container = document.getElementById(containerId);&#10;        if (!container) return;&#10;        container.innerHTML = '';&#10;        &#10;        // Zastosuj filtr wyszukiwania jeśli jest aktywny&#10;        const filteredItems = currentSearchFilter &#10;          ? items.filter(matchesSearchFilter)&#10;          : items;&#10;          &#10;        console.log(` Rendering ${filteredItems.length}/${items.length} items in ${containerId} with filter: &quot;${currentSearchFilter}&quot;`);&#10;        &#10;        filteredItems.forEach((item, index) =&gt; {&#10;          const wrapper = document.createElement('div');&#10;          wrapper.className = 'thumbnail-wrapper';&#10;          const button = document.createElement('div');&#10;          button.className = 'thumbnail';&#10;          button.title = item.Nazwa;&#10;&#10;          // PODŚWIETLENIE WYBRANEGO&#10;          let isSelected = false;&#10;          if (containerId === 'material-options') {&#10;            if (item.Grupa &amp;&amp; item.Grupa.toLowerCase() === 'materiały_nóg') {&#10;              isSelected = selectedMaterials['legs_material'] &amp;&amp; selectedMaterials['legs_material'].Nazwa === item.Nazwa;&#10;            } else if (item.TargetMeshOrModel) {&#10;              const targets = item.TargetMeshOrModel.split(',').map(t =&gt; t.trim());&#10;              isSelected = targets.some(t =&gt; selectedMaterials[t] &amp;&amp; selectedMaterials[t].Nazwa === item.Nazwa);&#10;            }&#10;          } else if (containerId === 'legs-thumbnails') {&#10;            isSelected = selectedLeg &amp;&amp; selectedLeg.Nazwa === item.Nazwa;&#10;          }&#10;          if (isSelected) button.classList.add('selected');&#10;&#10;          if (isInteractive) {&#10;            button.addEventListener('click', () =&gt; {&#10;              onSelect(item);&#10;              container.querySelectorAll('.thumbnail').forEach(t =&gt; t.classList.remove('selected'));&#10;              button.classList.add('selected');&#10;            });&#10;          }&#10;          const img = document.createElement('img');&#10;          img.src = item.Obrazek &amp;&amp; item.Obrazek.length &gt; 4 ? item.Obrazek : 'icons/placeholder.svg';&#10;          img.alt = item.Nazwa;&#10;          button.appendChild(img);&#10;          const caption = document.createElement('div');&#10;          caption.className = 'thumbnail-caption';&#10;          caption.textContent = item.Nazwa;&#10;          wrapper.appendChild(button);&#10;          wrapper.appendChild(caption);&#10;          container.appendChild(wrapper);&#10;        });&#10;      }&#10;&#10;&#10;&#10;&#10;&#10;      function renderFilteredMaterialOptions(targetMesh) {&#10;  if (!selectedChair || !selectedChair.Grupa) return;&#10;&#10;  const grupa = selectedChair.Grupa.toLowerCase();&#10;&#10;  function isAllowedForGroup(entryGroupDocelowa) {&#10;    if (!entryGroupDocelowa) return false;&#10;    const values = entryGroupDocelowa.toLowerCase().split(',').map(s =&gt; s.trim());&#10;    return values.includes('wszystkie') || values.includes(grupa) || values.includes('kubełek, krzesło');&#10;  }&#10;&#10;  let materialOptions = [];&#10;&#10;  const isLegs = targetMesh === 'legs' || targetMesh === 'legs_material';&#10;&#10;  if (isLegs) {&#10;    materialOptions = allData.filter(d =&gt;&#10;      d.Grupa?.toLowerCase() === 'materiały_nóg' &amp;&amp;&#10;      isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;      d.Visible?.toLowerCase() !== 'false'&#10;    );&#10;&#10;    if (selectedLeg &amp;&amp; selectedLeg.Typ) {&#10;      materialOptions = materialOptions.filter(mat =&gt;&#10;        !mat.Typ || mat.Typ.toLowerCase().trim() === selectedLeg.Typ.toLowerCase().trim()&#10;      );&#10;    }&#10;&#10;    if (selectedLeg &amp;&amp; selectedLeg.Nazwa) {&#10;      const currentLegName = selectedLeg.Nazwa.toLowerCase().trim();&#10;      materialOptions = materialOptions.filter(mat =&gt; {&#10;        const allowedLegs = mat.DlaModeluNóg&#10;          ? mat.DlaModeluNóg.split(',').map(s =&gt; s.trim().toLowerCase())&#10;          : [];&#10;        return allowedLegs.length === 0 || allowedLegs.includes(currentLegName);&#10;      });&#10;    }&#10;&#10;    if (selectedChair &amp;&amp; selectedChair.Nazwa) {&#10;  const currentChairName = selectedChair.Nazwa.toLowerCase().trim();&#10;  materialOptions = materialOptions.filter(mat =&gt; {&#10;    // ⛔️ Jeśli pole DlaKrzesła jest puste → odrzucamy&#10;    if (!mat.DlaKrzesła || mat.DlaKrzesła.trim().length === 0) return false;&#10;&#10;    const allowedChairs = mat.DlaKrzesła&#10;      .split(',')&#10;      .map(s =&gt; s.trim().toLowerCase());&#10;&#10;    return allowedChairs.includes(currentChairName);&#10;  });&#10;}&#10;&#10;&#10;&#10;    const groupedByCollection = {};&#10;    materialOptions.forEach(mat =&gt; {&#10;      const key = mat.Kolekcja?.trim() || 'Inne';&#10;      if (!groupedByCollection[key]) groupedByCollection[key] = [];&#10;      groupedByCollection[key].push(mat);&#10;    });&#10;&#10;    renderCollectionsAndMaterials(groupedByCollection, 'legs');&#10;    return;&#10;  }&#10;&#10;  //  TKANINY (siedzisko, oparcie itd.)&#10;  materialOptions = allData.filter(d =&gt;&#10;    d.Grupa?.toLowerCase() === 'tkanina' &amp;&amp;&#10;    d.TargetMeshOrModel &amp;&amp;&#10;    d.TargetMeshOrModel.split(',').map(t =&gt; t.trim()).includes(targetMesh) &amp;&amp;&#10;    isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;    d.Visible?.toLowerCase() !== 'false'&#10;  );&#10;&#10;  // Zastosuj filtr wyszukiwania do materiałów nóg&#10;  if (currentSearchFilter &amp;&amp; isLegs) {&#10;    materialOptions = allData.filter(d =&gt;&#10;      d.Grupa?.toLowerCase() === 'materiały_nóg' &amp;&amp;&#10;      isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;      d.Visible?.toLowerCase() !== 'false'&#10;    ).filter(matchesSearchFilter);&#10;    &#10;    console.log(` Filtered leg materials to ${materialOptions.length} for filter: &quot;${currentSearchFilter}&quot;`);&#10;    &#10;    // Zastosuj pozostałe filtry nóg&#10;    if (selectedLeg &amp;&amp; selectedLeg.Typ) {&#10;      materialOptions = materialOptions.filter(mat =&gt;&#10;        !mat.Typ || mat.Typ.toLowerCase().trim() === selectedLeg.Typ.toLowerCase().trim()&#10;      );&#10;    }&#10;&#10;    if (selectedLeg &amp;&amp; selectedLeg.Nazwa) {&#10;      const currentLegName = selectedLeg.Nazwa.toLowerCase().trim();&#10;      materialOptions = materialOptions.filter(mat =&gt; {&#10;        const allowedLegs = mat.DlaModeluNóg&#10;          ? mat.DlaModeluNóg.split(',').map(s =&gt; s.trim().toLowerCase())&#10;          : [];&#10;        return allowedLegs.length === 0 || allowedLegs.includes(currentLegName);&#10;      });&#10;    }&#10;&#10;    if (selectedChair &amp;&amp; selectedChair.Nazwa) {&#10;      const currentChairName = selectedChair.Nazwa.toLowerCase().trim();&#10;      materialOptions = materialOptions.filter(mat =&gt; {&#10;        if (!mat.DlaKrzesła || mat.DlaKrzesła.trim().length === 0) return false;&#10;        const allowedChairs = mat.DlaKrzesła.split(',').map(s =&gt; s.trim().toLowerCase());&#10;        return allowedChairs.includes(currentChairName);&#10;      });&#10;    }&#10;&#10;    const groupedByCollection = {};&#10;    materialOptions.forEach(mat =&gt; {&#10;      const key = mat.Kolekcja?.trim() || 'Inne';&#10;      if (!groupedByCollection[key]) groupedByCollection[key] = [];&#10;      groupedByCollection[key].push(mat);&#10;    });&#10;&#10;    renderCollectionsAndMaterials(groupedByCollection, 'legs');&#10;    return;&#10;  }&#10;&#10;  //  TKANINY (siedzisko, oparcie itd.)&#10;  materialOptions = allData.filter(d =&gt;&#10;    d.Grupa?.toLowerCase() === 'tkanina' &amp;&amp;&#10;    d.TargetMeshOrModel &amp;&amp;&#10;    d.TargetMeshOrModel.split(',').map(t =&gt; t.trim()).includes(targetMesh) &amp;&amp;&#10;    isAllowedForGroup(d.GrupaDocelowa) &amp;&amp;&#10;    d.Visible?.toLowerCase() !== 'false'&#10;  );&#10;&#10;  // Zastosuj filtr wyszukiwania jeśli jest aktywny&#10;  if (currentSearchFilter) {&#10;    materialOptions = materialOptions.filter(matchesSearchFilter);&#10;    console.log(` Filtered materials from ${allData.length} to ${materialOptions.length} for filter: &quot;${currentSearchFilter}&quot;`);&#10;  }&#10;&#10;  const groupedByCollection = {};&#10;  materialOptions.forEach(mat =&gt; {&#10;    const key = mat.Kolekcja?.trim() || 'Inne';&#10;    if (!groupedByCollection[key]) groupedByCollection[key] = [];&#10;    groupedByCollection[key].push(mat);&#10;  });&#10;&#10;  renderCollectionsAndMaterials(groupedByCollection, targetMesh);&#10;}&#10;&#10;     &#10;&#10;&#10;&#10;&#10;// ✅ Po wygenerowaniu — otwórz ostatnio klikniętą kolekcję&#10;if (lastOpenedCollection) {&#10;  const toOpen = container.querySelector(`details[data-kolekcja=&quot;${lastOpenedCollection}&quot;]`);&#10;  if (toOpen) toOpen.open = true;&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      function activateLegsTabAndShowMaterials() {&#10;        // Podświetl zakładkę &quot;Nogi&quot; po data-key&#10;        const partTabs = document.querySelectorAll('#part-tabs .thumbnail');&#10;        partTabs.forEach(tab =&gt; tab.classList.remove('selected'));&#10;        partTabs.forEach(tab =&gt; {&#10;          if (tab.dataset.key === 'legs') {&#10;            tab.classList.add('selected');&#10;          }&#10;        });&#10;&#10;        // Pokaż sekcję materiałów i wyświetl wszystkie materiały nóg&#10;        document.getElementById('materials-section').style.display = 'block';&#10;        renderFilteredMaterialOptions('legs');&#10;&#10;      }&#10;&#10;      function renderPartTabs() {&#10;        const container = document.getElementById('part-tabs');&#10;        container.innerHTML = '';&#10;        // Pobierz unikalne elementy do wyboru&#10;        const allTargets = allData.filter(d =&gt; d.TargetMeshOrModel)&#10;          .flatMap(d =&gt; d.TargetMeshOrModel.split(',').map(t =&gt; t.trim()));&#10;        const uniqueTargets = [...new Set(allTargets)];&#10;        if (uniqueTargets.length === 0) {&#10;          document.getElementById('parts-section').style.display = 'none';&#10;          return;&#10;        }&#10;        document.getElementById('parts-section').style.display = 'block';&#10;&#10;        // Mapowanie nazw technicznych na polskie&#10;        const POLISH_LABELS = {&#10;          seat: 'Siedzisko',&#10;          backseat_inside: 'Oparcie wew.',&#10;          backseat_outside: 'Oparcie zew.',&#10;          backseat: 'Siedzisko/Oparcie',&#10;          legs: 'Nogi'&#10;        };&#10;&#10;        renderOptions('part-tabs', uniqueTargets.map(name =&gt; {&#10;          const key = name.trim().toLowerCase();&#10;          return {&#10;            Nazwa: POLISH_LABELS[key] || name.trim(),&#10;            Obrazek: ELEMENT_ICONS[key] || 'icons/placeholder.svg',&#10;            _technicalKey: key&#10;          };&#10;        }), (item) =&gt; {&#10;          if (item._technicalKey === 'legs') {&#10;            activateLegsTabAndShowMaterials();&#10;          } else {&#10;            // Podświetl klikniętą zakładkę&#10;            const partTabs = document.querySelectorAll('#part-tabs .thumbnail');&#10;            partTabs.forEach(tab =&gt; tab.classList.remove('selected'));&#10;            partTabs.forEach(tab =&gt; {&#10;              if (tab.title &amp;&amp; tab.title.toLowerCase().includes(item.Nazwa.toLowerCase())) {&#10;                tab.classList.add('selected');&#10;              }&#10;            });&#10;            document.getElementById('materials-section').style.display = 'block';&#10;            renderFilteredMaterialOptions(item._technicalKey);&#10;          }&#10;        });&#10;      }&#10;&#10;      function updateUI() {&#10;        const backContainer = document.getElementById('back-to-models-container');&#10;        backContainer.innerHTML = '';&#10;        if (selectedChair &amp;&amp; (selectedChair.Obrazek || selectedChair.Image)) {&#10;          // Stwórz ramkę z ikonką i X&#10;          const btn = document.createElement('div');&#10;          btn.className = 'back-to-model-btn';&#10;          btn.title = 'Wróć do wyboru modelu';&#10;&#10;          // Ikonka modelu&#10;          const img = document.createElement('img');&#10;          img.src = selectedChair.Obrazek || selectedChair.Image;&#10;          img.alt = selectedChair.Nazwa;&#10;          btn.appendChild(img);&#10;&#10;          // Przycisk X w rogu&#10;          const xBtn = document.createElement('button');&#10;          xBtn.className = 'close-x';&#10;          xBtn.innerHTML = '&amp;times;';&#10;          xBtn.title = 'Wróć do wyboru modelu';&#10;          xBtn.onclick = (e) =&gt; {&#10;            e.stopPropagation();&#10;            showScreen('models');&#10;          };&#10;          btn.appendChild(xBtn);&#10;&#10;          // Kliknięcie w całą ramkę też wraca do wyboru modelu&#10;          btn.onclick = () =&gt; showScreen('models');&#10;&#10;          backContainer.appendChild(btn);&#10;        }&#10;&#10;        const legs = allData.filter(d =&gt; {&#10;  if (d.Grupa.toLowerCase() !== 'nogi') return false;&#10;  if (!selectedChair || selectedChair.Grupa.toLowerCase() !== 'kubełek') return true;&#10;  return czyNogaPasujeDoKubełka(d, selectedChair.Nazwa);&#10;});&#10;&#10;&#10;        renderOptions('legs-thumbnails', legs, item =&gt; {&#10;  setLegModel(item);&#10;});&#10;&#10;&#10;&#10;        // Sekcja nóg i materiały nóg – nogi tylko dla kubełków, materiały dla kubełków i krzeseł&#10;    if (selectedChair &amp;&amp; selectedChair.Grupa) {    &#10;          const grupa = selectedChair.Grupa.toLowerCase();&#10;&#10;          if (grupa === 'kubełek') {&#10;            console.log(&quot;Pokazuję nogi i materiały nóg dla kubełka&quot;);&#10;            document.getElementById('legs-section').style.display = 'block';&#10;            &#10;&#10;            // Ustaw pierwszą nogę jeśli jeszcze żadna nie została wybrana&#10;if (!selectedLeg &amp;&amp; legs.length &gt; 0) {&#10;  setLegModel(legs[0]); // automatycznie ustawia pierwszą pasującą nogę&#10;}&#10;&#10;renderOptions('legs-thumbnails', legs, item =&gt; {&#10;              setLegModel(item);&#10;            });&#10;&#10;            // Ukryj sekcję materiałów, pokaże się po kliknięciu w zakładkę&#10;            document.getElementById('materials-section').style.display = 'none';&#10;          } else if (grupa === 'krzesło') {&#10;            console.log(&quot;Ukrywam sekcję nóg dla krzesła&quot;);&#10;            document.getElementById('legs-section').style.display = 'none';&#10;&#10;            // Ukryj sekcję materiałów, pokaże się po kliknięciu w zakładkę&#10;            document.getElementById('materials-section').style.display = 'none';&#10;          } else {&#10;            console.log(&quot;Ukrywam sekcje nóg i materiałów&quot;);&#10;            document.getElementById('legs-section').style.display = 'none';&#10;            document.getElementById('materials-section').style.display = 'none';&#10;          }&#10;        } else {&#10;          console.log(&quot;Brak wybranego elementu lub grupy&quot;);&#10;          document.getElementById('legs-section').style.display = 'none';&#10;          document.getElementById('materials-section').style.display = 'none';&#10;        }&#10;&#10;        updateSummary();&#10;      }&#10;&#10;      const visibleData = allData.filter(d =&gt;&#10;        d.Visible?.toString().trim().length &gt; 0&#10;      );&#10;&#10;&#10;      async function loadDataFromSheet() {&#10;        const sheetId = '1lZMJ-4Qd0nDY-7Hl9iV-pJnZSTVzYiA-A3rDq_bC16U';&#10;        const sheetURL = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&amp;sheet=Baza Danych&amp;v=${new Date().getTime()}`;&#10;        try {&#10;          const response = await fetch(sheetURL + '?nocache=' + Date.now(), { cache: 'no-store' });&#10;&#10;          const csvText = await response.text();&#10;          const rows = csvText.trim().split('\n');&#10;          const headers = rows.shift().split(',').map(h =&gt; h.trim().replace(/&quot;/g, ''));&#10;          allData = rows.map(row =&gt; {&#10;            const values = row.match(/(&quot;.*?&quot;|[^&quot;,]+)(?=\s*,|\s*$)/g) || [];&#10;            const obj = {};&#10;            headers.forEach((header, index) =&gt; obj[header] = values[index]?.trim().replace(/&quot;/g, '') || '');&#10;            return obj;&#10;          }).filter(item =&gt; item.Visible?.toLowerCase() !== 'false');&#10;&#10;          // Renderuj przyciski kategorii&#10;          renderCategoryButtons();&#10;          &#10;          // Renderuj promocje na starcie&#10;          renderPromotions();&#10;          &#10;          showScreen('models');&#10;&#10;          const hdrEntries = allData.filter(d =&gt; d.HDR &amp;&amp; d.HDRIcon);&#10;          renderHDROptions(hdrEntries);&#10;&#10;&#10;&#10;&#10;&#10;          // Pokaż loader&#10;document.getElementById('custom-loader').style.display = 'flex';&#10;document.getElementById('app').style.visibility = 'hidden';&#10;&#10;// Usuń poprzedni model&#10;if (currentModelContainer) {&#10;  viewer.scene.remove(currentModelContainer);&#10;  if (typeof currentModelContainer.dispose === 'function') currentModelContainer.dispose();&#10;}&#10;&#10;// Załaduj nowy model&#10;currentModelContainer = await viewer.load('chairs/Ava.glb', { autoCenter: true });&#10;setCameraView(new Vector3(0, 0, 0));&#10;&#10;// Resetuj wybory&#10;selectedChair = null;&#10;selectedLeg = null;&#10;selectedMaterials = {};&#10;userInteracted = false;&#10;&#10;// Zaktualizuj podsumowanie&#10;updateSummary();&#10;&#10;// Pokaż scenę i ukryj loader&#10;document.getElementById('custom-loader').classList.add('fade-out');&#10;setTimeout(() =&gt; {&#10;  document.getElementById('custom-loader').style.display = 'none';&#10;  document.getElementById('app').style.visibility = 'visible';&#10;}, 500);&#10;&#10;// Pokaż toolbar&#10;const toolbar = document.getElementById('bottom-toolbar');&#10;if (toolbar) {&#10;  toolbar.style.display = 'flex';&#10;  toolbar.classList.add('visible');&#10;}&#10;&#10;&#10;        } catch (e) { console.error(&quot;Błąd ładowania danych:&quot;, e); document.body.innerHTML = `Błąd ładowania danych: ${e.message}`; }&#10;      }&#10;&#10;      document.getElementById('hdr-toggle')?.addEventListener('click', (e) =&gt; {&#10;        e.stopPropagation();&#10;        const panel = document.getElementById('hdr-panel');&#10;        panel.classList.toggle('hidden');&#10;        document.getElementById('hdr-panel').style.display = 'block';&#10;&#10;      });&#10;&#10;&#10;setDefaultMaterialsFromSheet();&#10;updateSummary();&#10;&#10;&#10;&#10;&#10;      function updateSummary() {&#10;        const overviewPanel = document.getElementById('config-overview');&#10;        const overviewIconsDiv = document.getElementById(&quot;overview-icons&quot;);&#10;        const overviewDetailsDiv = document.getElementById(&quot;overview-details&quot;);&#10;        const overviewTotalPriceSpan = document.getElementById(&quot;overview-total-price&quot;);&#10;&#10;        overviewIconsDiv.innerHTML = '';&#10;        overviewDetailsDiv.innerHTML = '';&#10;        overviewTotalPriceSpan.textContent = `0.00 PLN`;&#10;&#10;        // Jeśli nie było interakcji, nie pokazuj szczegółów&#10;        if (!userInteracted) {&#10;          overviewPanel.style.display = 'block';&#10;          return;&#10;        }&#10;&#10;        // Kolejność elementów do podsumowania&#10;        const partOrder = ['seat', 'backseat_inside', 'backseat_outside', 'legs_material', 'backseat'];&#10;        const partLabels = ['Siedzisko', 'Oparcie wew.', 'Oparcie zew.', 'Nogi', 'Siedzisko/Oparcie'];&#10;&#10;        // Ikonka modelu&#10;        if (userInteracted &amp;&amp; selectedChair &amp;&amp; (selectedChair.Obrazek || selectedChair.Image)) {&#10;          const icon = document.createElement('img');&#10;          icon.src = selectedChair.Obrazek || selectedChair.Image;&#10;          icon.title = selectedChair.Nazwa;&#10;          icon.className = 'model-image'; // &lt;-- dodaj tę klasę!&#10;          overviewIconsDiv.appendChild(icon);&#10;        }&#10;        &#10;&#10;        // Ikonki materiałów dla każdego elementu&#10;        partOrder.forEach((partKey, idx) =&gt; {&#10;          const mats = selectedMaterials[partKey];&#10;if (Array.isArray(mats)) {&#10;  mats.forEach(mat =&gt; {&#10;    if (mat &amp;&amp; (mat.Obrazek || mat.Image)) {&#10;      const icon = document.createElement('img');&#10;      icon.src = mat.Obrazek || mat.Image;&#10;      icon.title = mat.Nazwa;&#10;      overviewIconsDiv.appendChild(icon);&#10;    }&#10;  });&#10;} else if (mats &amp;&amp; (mats.Obrazek || mats.Image)) {&#10;  // Obsługa starego trybu (pojedynczy materiał)&#10;  const icon = document.createElement('img');&#10;  icon.src = mats.Obrazek || mats.Image;&#10;  icon.title = mats.Nazwa;&#10;  overviewIconsDiv.appendChild(icon);&#10;}&#10;&#10;        });&#10;&#10;        // Ikonka wybranego wariantu nóg (jeśli jest)&#10;        if (selectedLeg &amp;&amp; (selectedLeg.Obrazek || selectedLeg.Image)) {&#10;          const icon = document.createElement('img');&#10;          icon.src = selectedLeg.Obrazek || selectedLeg.Image;&#10;          icon.title = selectedLeg.Nazwa;&#10;          overviewIconsDiv.appendChild(icon);&#10;        }&#10;&#10;        // Szczegóły i ceny&#10;        let totalPrice = 0;&#10;        if (selectedChair &amp;&amp; selectedChair.Cena) {&#10;          const price = parseFloat(selectedChair.Cena) || 0;&#10;          totalPrice += price;&#10;          const detailLine = document.createElement('div');&#10;          detailLine.className = 'detail-item';&#10;          const label = (selectedChair.Grupa &amp;&amp; selectedChair.Grupa.toLowerCase() === 'krzesło') ? 'Krzesło' : 'Model';&#10;          detailLine.innerHTML = `&lt;span&gt;${label}: ${selectedChair.Nazwa}&lt;/span&gt;&lt;strong&gt;: ${price.toFixed(2)} PLN&lt;/strong&gt;`;&#10;          overviewDetailsDiv.appendChild(detailLine);&#10;        }&#10;        partOrder.forEach((partKey, idx) =&gt; {&#10;          const mat = selectedMaterials[partKey];&#10;          if (mat) {&#10;            const price = parseFloat(mat.Cena) || 0;&#10;            totalPrice += price;&#10;            const detailLine = document.createElement('div');&#10;            detailLine.className = 'detail-item';&#10;            detailLine.innerHTML = `&lt;span&gt;${partLabels[idx]}: ${mat.Nazwa}&lt;/span&gt;&lt;strong&gt;: ${price.toFixed(2)} PLN&lt;/strong&gt;`;&#10;            overviewDetailsDiv.appendChild(detailLine);&#10;          }&#10;        });&#10;        // Dodano szczegóły wariantu nóg&#10;        if (selectedLeg) {&#10;          const price = parseFloat(selectedLeg.Cena) || 0;&#10;          const detailLine = document.createElement('div');&#10;          detailLine.className = 'detail-item';&#10;          detailLine.innerHTML = `&lt;span&gt;Wariant nóg: ${selectedLeg.Nazwa}&lt;/span&gt;&lt;strong&gt;: ${price.toFixed(2)} PLN&lt;/strong&gt;`;&#10;          overviewDetailsDiv.appendChild(detailLine);&#10;        }&#10;        if (selectedLeg) {&#10;          const price = parseFloat(selectedLeg.Cena) || 0;&#10;          totalPrice += price;&#10;        }&#10;&#10;        const hr = document.createElement('hr');&#10;        overviewDetailsDiv.appendChild(hr);&#10;&#10;        overviewTotalPriceSpan.textContent = `${totalPrice.toFixed(2)} PLN`;&#10;&#10;        window.selectedChair = selectedChair;&#10;        window.selectedLeg = selectedLeg;&#10;        window.selectedMaterials = selectedMaterials;&#10;&#10;      }&#10;     &#10;&#10;&#10;      function enforceZoomLimits() {&#10;        if (viewer &amp;&amp; viewer.controls) {&#10;          viewer.controls.minDistance = MIN_ZOOM_DISTANCE;&#10;          viewer.controls.maxDistance = MAX_ZOOM_DISTANCE;&#10;          viewer.controls.enableDamping = true;&#10;          viewer.controls.dampingFactor = 0.1;&#10;          viewer.controls.update();&#10;        }&#10;      }&#10;&#10;      function clampCameraDistance() {&#10;        if (!viewer || !viewer.scene || !viewer.scene.activeCamera || !viewer.controls) return;&#10;        const camera = viewer.scene.activeCamera;&#10;        const target = viewer.controls.target;&#10;        const pos = camera.position;&#10;        const dist = pos.distanceTo(target);&#10;&#10;        if (dist &lt; MIN_ZOOM_DISTANCE) {&#10;          // Przesuń kamerę na sferę o promieniu MIN_ZOOM_DISTANCE od targetu&#10;          const dir = pos.clone().sub(target).normalize();&#10;          camera.position.copy(target.clone().add(dir.multiplyScalar(MIN_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          viewer.controls.update();&#10;        }&#10;        if (dist &gt; MAX_ZOOM_DISTANCE) {&#10;          // Przesuń kamerę na sferę o promieniu MAX_ZOOM_DISTANCE od targetu&#10;          const dir = pos.clone().sub(target).normalize();&#10;          camera.position.copy(target.clone().add(dir.multiplyScalar(MAX_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          viewer.controls.update();&#10;        }&#10;      }&#10;&#10;&#10;      // Nowa funkcja do ograniczeń zoomu w obrębie bańki&#10;      function forceBubbleZoomLimitsEachFrame() {&#10;        if (!viewer || !viewer.scene || !viewer.scene.activeCamera) return;&#10;        const camera = viewer.scene.activeCamera;&#10;        // Środek bańki – możesz zmienić na inny punkt jeśli trzeba&#10;        const bubbleCenter = new Vector3(0, 0, 0);&#10;        const pos = camera.position;&#10;        const dist = pos.distanceTo(bubbleCenter);&#10;&#10;        if (dist &lt; MIN_ZOOM_DISTANCE) {&#10;          const dir = pos.clone().sub(bubbleCenter).normalize();&#10;          camera.position.copy(bubbleCenter.clone().add(dir.multiplyScalar(MIN_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          if (viewer.controls) viewer.controls.update();&#10;        }&#10;        if (dist &gt; MAX_ZOOM_DISTANCE) {&#10;          const dir = pos.clone().sub(bubbleCenter).normalize();&#10;          camera.position.copy(bubbleCenter.clone().add(dir.multiplyScalar(MAX_ZOOM_DISTANCE)));&#10;          camera.updateProjectionMatrix();&#10;          if (viewer.controls) viewer.controls.update();&#10;        }&#10;      }&#10;&#10;      // Uruchom sprawdzanie w każdej klatce&#10;      function animateBubbleZoomLimit() {&#10;        forceBubbleZoomLimitsEachFrame();&#10;        requestAnimationFrame(animateBubbleZoomLimit);&#10;      }&#10;      animateBubbleZoomLimit();&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      const exportButton = document.getElementById(&quot;export-config&quot;);&#10;      const exportPanel = document.getElementById(&quot;export-panel&quot;);&#10;&#10;      exportButton.addEventListener(&quot;click&quot;, () =&gt; {&#10;        exportPanel.classList.toggle(&quot;hidden&quot;);&#10;      });&#10;&#10;      // Opcjonalnie – ukrywanie po kliknięciu poza panelem&#10;      document.addEventListener(&quot;click&quot;, (e) =&gt; {&#10;        if (!exportPanel.contains(e.target) &amp;&amp; !exportButton.contains(e.target)) {&#10;          exportPanel.classList.add(&quot;hidden&quot;);&#10;        }&#10;      });&#10;&#10;      // Obsługa kliknięć eksportu (przykładowo)&#10;      document.querySelectorAll(&quot;.export-btn&quot;).forEach(btn =&gt; {&#10;        btn.addEventListener(&quot;click&quot;, () =&gt; {&#10;          const format = btn.dataset.format;&#10;          alert(`Eksport jako: ${format.toUpperCase()}`);&#10;          exportPanel.classList.add(&quot;hidden&quot;);&#10;        });&#10;      });&#10;&#10;&#10;&#10;&#10;      // — Obsługa dolnego paska narzędziowego HDR&#10;&#10;      function renderHDROptions(entries) {&#10;        const container = document.getElementById('hdr-options');&#10;        if (!container) return;&#10;        container.innerHTML = '';&#10;&#10;        entries.forEach(entry =&gt; {&#10;          const img = document.createElement('img');&#10;          img.src = entry.HDRIcon;&#10;          img.alt = entry.Nazwa || entry.HDR;&#10;          img.onerror = () =&gt; {&#10;            img.src = 'icons/placeholder.svg';&#10;          };&#10;&#10;          const thumb = document.createElement('div');&#10;          thumb.className = 'thumbnail';&#10;&#10;&#10;          thumb.title = entry.Nazwa || entry.HDR;&#10;          thumb.appendChild(img);&#10;          thumb.onclick = () =&gt; {&#10;            viewer.setEnvironmentMap(entry.HDR, { isHDR: true });&#10;            document.getElementById('hdr-panel')?.classList.add('hidden');&#10;          };&#10;&#10;          const caption = document.createElement('div');&#10;          caption.className = 'thumbnail-caption';&#10;          caption.textContent = entry.Nazwa || entry.HDR;&#10;&#10;          const wrapper = document.createElement('div');&#10;          wrapper.className = 'thumbnail-wrapper';&#10;          wrapper.appendChild(thumb);&#10;          //wrapper.appendChild(caption);&#10;&#10;          container.appendChild(wrapper);&#10;        });&#10;      }&#10;&#10;&#10;&#10;      // Sterowanie widocznością panelu&#10;&#10;      // Sterowanie widocznością panelu&#10;      window.addEventListener('DOMContentLoaded', () =&gt; {&#10;        const hdrToggle = document.getElementById('hdr-toggle');&#10;        const hdrPanel = document.getElementById('hdr-panel');&#10;        const hdrClose = document.getElementById('hdr-close');&#10;&#10;        function toggleHDRPanel() {&#10;          hdrPanel.classList.toggle('hidden');&#10;          hdrPanel.style.display = hdrPanel.classList.contains('hidden') ? 'none' : 'block';&#10;        }&#10;&#10;        hdrToggle?.addEventListener('click', (e) =&gt; {&#10;          e.stopPropagation();&#10;          toggleHDRPanel();&#10;        });&#10;&#10;        hdrPanel?.addEventListener('click', (e) =&gt; {&#10;          e.stopPropagation();&#10;        });&#10;&#10;        document.addEventListener('click', () =&gt; {&#10;          hdrPanel?.classList.add('hidden');&#10;          hdrPanel.style.display = 'none';&#10;        });&#10;&#10;        hdrClose?.addEventListener('click', (e) =&gt; {&#10;          e.stopPropagation();&#10;          hdrPanel?.classList.add('hidden');&#10;          hdrPanel.style.display = 'none';&#10;        });&#10;      });&#10;&#10;      // Modyfikacja istniejącego kodu obsługi przycisku HDR&#10;      document.getElementById('hdr-toggle')?.addEventListener('click', (e) =&gt; {&#10;        e.stopPropagation();&#10;        const panel = document.getElementById('hdr-panel');&#10;        panel.classList.toggle('hidden');&#10;        panel.style.display = panel.classList.contains('hidden') ? 'none' : 'block';&#10;      });&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      // Panel wymiarów&#10;      document.getElementById('dimensions-show')?.addEventListener('click', (e) =&gt; {&#10;        e.stopPropagation();&#10;        console.log(&quot; Kliknięto przycisk wymiarów&quot;);&#10;        showDimensions();&#10;      });&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      //  Ukrywanie panelu&#10;      document.getElementById('dimensions-show')?.addEventListener('click', () =&gt; {&#10;        const overlay = document.getElementById('dimension-overlay');&#10;        const labels = overlay.querySelectorAll('.dimension-label');&#10;&#10;        //  Pobierz z arkusza&#10;        const item = allData.find(i =&gt; {&#10;          const g = (i.Grupa || '').toLowerCase();&#10;          return (g === 'krzesło' || g === 'kubełek') &amp;&amp; i.Wymiary;&#10;        });&#10;&#10;        const dims = item?.Wymiary?.match(/x\s*=\s*(\d+[\.,]?\d*)\s*cm.*?y\s*=\s*(\d+[\.,]?\d*)\s*cm.*?z\s*=\s*(\d+[\.,]?\d*)\s*cm/i);&#10;&#10;        if (dims) {&#10;          labels[0].textContent = `x = ${dims[1]} cm`;&#10;          labels[1].textContent = `y = ${dims[2]} cm`;&#10;          labels[2].textContent = `z = ${dims[3]} cm`;&#10;        }&#10;&#10;        overlay.style.display = 'block';&#10;&#10;        // ⏱ Opcjonalnie ukryj po 6 sek.&#10;        setTimeout(() =&gt; overlay.style.display = 'none', 6000);&#10;      });&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;      window.addEventListener('load', () =&gt; {&#10;        const showQRBtn = document.getElementById('qr-button').addEventListener('click', showQR);&#10;&#10;&#10;        if (!showQRBtn) return;&#10;&#10;        // Pokaż przycisk po załadowaniu strony i UI&#10;        showQRBtn.style.display = 'flex';&#10;&#10;        // Podłącz event do wyświetlenia kodu QR&#10;        showQRBtn.addEventListener('click', () =&gt; {&#10;          const qrPopup = document.getElementById('qr-popup');&#10;          const qrContainer = document.getElementById('qrcode');&#10;          if (!qrPopup || !qrContainer) return;&#10;&#10;          qrPopup.style.display = 'block';&#10;          qrContainer.innerHTML = '';&#10;&#10;          new QRCode(qrContainer, {&#10;            text: window.location.href,&#10;            width: 200,&#10;            height: 200,&#10;          });&#10;        });&#10;      });&#10;&#10;      function showConfigOverview() {&#10;        const overviewPanel = document.getElementById('config-overview');&#10;        overviewPanel.classList.remove('hidden');&#10;      }&#10;&#10;      // Wywołaj tę funkcję w odpowiednim momencie, np. po załadowaniu modelu&#10;&#10;&#10;      document.addEventListener('click', () =&gt; {&#10;        hdrPanel.classList.add('hidden');&#10;      });&#10;&#10;&#10;&#10;      function showDimensions() {&#10;        const dimensionOverlay = document.getElementById('dimension-overlay');&#10;        dimensionOverlay.style.display = 'block';&#10;        dimensionOverlay.innerHTML = ''; // Wyczyść poprzednie wymiary&#10;&#10;        if (!selectedChair) return;&#10;&#10;        // Parsowanie wymiarów z kolumny Wymiary&#10;        const dimensionsString = selectedChair.Wymiary || '';&#10;        const dimensionsParsed = {};&#10;        dimensionsString.split(',').forEach(dim =&gt; {&#10;          const [key, value] = dim.split('=').map(s =&gt; s.trim());&#10;          if (key &amp;&amp; value) {&#10;            dimensionsParsed[key.toLowerCase()] = parseFloat(value);&#10;          }&#10;        });&#10;&#10;        const dimensions = [&#10;          { label: 'Szerokość', value: dimensionsParsed.x },&#10;          { label: 'Głębokość', value: dimensionsParsed.y },&#10;          { label: 'Wysokość', value: dimensionsParsed.z }&#10;        ];&#10;&#10;        const panel = document.createElement('div');&#10;        panel.className = 'dimension-panel';&#10;        panel.style.cssText = `&#10;  position: fixed;&#10;  top: 85%;&#10;  transform: translate(-150%, -50%);&#10;  left: 50%;&#10;  background-color: rgba(255, 255, 255, 0.8);&#10;  padding: 10px;&#10;  border-radius: 5px;&#10;  font-size: 14px;&#10;  font-weight: bold;&#10;  z-index: 1001;&#10;`;&#10;&#10;&#10;        dimensions.forEach(dim =&gt; {&#10;          if (dim.value !== undefined) {&#10;            const dimElement = document.createElement('div');&#10;            dimElement.textContent = `${dim.label}: ${dim.value} cm`;&#10;            dimElement.style.marginBottom = '5px';&#10;            panel.appendChild(dimElement);&#10;          }&#10;        });&#10;&#10;        dimensionOverlay.appendChild(panel);&#10;      }&#10;&#10;      function hideDimensions() {&#10;        const dimensionOverlay = document.getElementById('dimension-overlay');&#10;        dimensionOverlay.style.display = 'none';&#10;      }&#10;&#10;&#10;&#10;      //  Ładowanie JSZip&#10;      async function loadJSZip() {&#10;        if (!window.JSZip) {&#10;          await import('https://cdn.jsdelivr.net/npm/jszip@3.10.0/dist/jszip.min.js');&#10;        }&#10;      }&#10;&#10;      //  Załaduj listę plików tekstur z files.json&#10;      let texturesFilesByFolder = {};&#10;      async function loadTexturesFilesList() {&#10;        try {&#10;          const res = await fetch('textures/files.json');&#10;          texturesFilesByFolder = await res.json();&#10;        } catch (e) {&#10;          console.error('Błąd ładowania files.json:', e);&#10;          texturesFilesByFolder = {};&#10;        }&#10;      }&#10;&#10;      //  Obsługiwane formaty eksportu&#10;      const modelFormats = ['fbx', 'obj', 'dae'];&#10;&#10;      // ️ Główna funkcja eksportu ZIP&#10;      async function handleExport(format) {&#10;        if (!window.JSZip) {&#10;          alert('JSZip niezaładowany!');&#10;          return;&#10;        }&#10;&#10;        if (!modelFormats.includes(format)) {&#10;          alert(`Nieobsługiwany format eksportu: ${format}`);&#10;          return;&#10;        }&#10;&#10;        const zip = new JSZip();&#10;&#10;        //  Eksport głównego modelu krzesła&#10;        const chairModel = window.selectedChair?.Nazwa || 'BrakModelu';&#10;        const chairPath = `export/${chairModel}.${format}`;&#10;&#10;        try {&#10;          const res = await fetch(chairPath);&#10;          if (!res.ok) throw new Error(`Nie znaleziono modelu krzesła: ${chairPath}`);&#10;          const blob = await res.blob();&#10;          zip.file(`${chairModel}.${format}`, blob);&#10;        } catch (e) {&#10;          alert(e.message);&#10;          return;&#10;        }&#10;&#10;        //  Eksport nóg (jeśli wybrano)&#10;        const legModel = window.selectedLeg?.Nazwa;&#10;        if (legModel) {&#10;          const legPath = `export/${legModel}.${format}`;&#10;          try {&#10;            const res = await fetch(legPath);&#10;            if (res.ok) {&#10;              const blob = await res.blob();&#10;              zip.file(`${legModel}.${format}`, blob);&#10;            } else {&#10;              console.warn(`Nie znaleziono modelu nóg: ${legPath}`);&#10;            }&#10;          } catch (e) {&#10;            console.warn(`Błąd pobierania nóg: ${e.message}`);&#10;          }&#10;        }&#10;&#10;        //  Eksport materiałów / tekstur z kolekcją i bez&#10;        const textureFolderInZip = zip.folder('textures');&#10;        const materials = Object.values(window.selectedMaterials || {});&#10;        const collection = window.selectedChair?.Kolekcja?.trim() || '';&#10;&#10;        for (const mat of materials) {&#10;          const folder = mat.Folder || mat.Wartość;&#10;          const textureFiles = texturesFilesByFolder[folder] || [];&#10;&#10;          for (const texFile of textureFiles) {&#10;            const candidatePaths = [&#10;              collection ? `textures/${collection}/${folder}/${texFile}` : null,&#10;              `textures/${folder}/${texFile}`&#10;            ].filter(Boolean);&#10;&#10;            let found = false;&#10;&#10;            for (const path of candidatePaths) {&#10;              try {&#10;                const res = await fetch(path);&#10;                if (res.ok) {&#10;                  const blob = await res.blob();&#10;                  textureFolderInZip.file(`${folder}/${texFile}`, blob);&#10;                  found = true;&#10;                  break;&#10;                }&#10;              } catch (e) {&#10;                console.warn(`❌ Błąd pobierania: ${path}`, e);&#10;              }&#10;            }&#10;&#10;            if (!found) {&#10;              console.warn(`⚠️ Nie znaleziono tekstury: ${folder}/${texFile}`);&#10;            }&#10;          }&#10;        }&#10;&#10;        //  Finalny zapis ZIP&#10;        const blob = await zip.generateAsync({ type: 'blob' });&#10;        const a = document.createElement('a');&#10;        a.href = URL.createObjectURL(blob);&#10;        a.download = `export_${chairModel}_${format}.zip`;&#10;        document.body.appendChild(a);&#10;        a.click();&#10;        a.remove();&#10;        URL.revokeObjectURL(a.href);&#10;      }&#10;&#10;      //  Inicjalizacja tekstur na starcie&#10;      await loadTexturesFilesList();&#10;&#10;      // ️ Obsługa kliknięcia eksportu&#10;      document.querySelectorAll('.export-btn').forEach(button =&gt; {&#10;        button.addEventListener('click', async () =&gt; {&#10;          await loadJSZip();&#10;          const format = button.getAttribute('data-format');&#10;          await handleExport(format);&#10;        });&#10;      });&#10;&#10;&#10;&#10;      function updateMaterialTiles() {&#10;        const legsMaterialsContainer = document.getElementById('legs-thumbnails');&#10;        if (!legsMaterialsContainer || !selectedChair || !selectedLeg) return;&#10;&#10;        //  Czyść tylko kafelki materiałów nóg&#10;        legsMaterialsContainer.querySelectorAll('.material-tile')?.forEach(tile =&gt; tile.remove());&#10;&#10;        const allEntries = allData;&#10;&#10;        const chairType = selectedChair.Grupa?.trim().toLowerCase();       // 'krzesło' lub 'kubełek'&#10;        const legVariant = selectedLeg.Nazwa?.trim().toLowerCase();       // np. 'regularne'&#10;&#10;        const filteredMaterials = allEntries.filter(mat =&gt; {&#10;          // ✅ tylko materiały nóg&#10;          if (mat.Grupa?.trim().toLowerCase() !== 'materiały_nóg') return false;&#10;&#10;          // ✅ czy materiał pasuje do typu krzesła (GrupaDocelowa)&#10;          const grupaDocelowa = mat.GrupaDocelowa?.toLowerCase() || '';&#10;          const grupy = grupaDocelowa.split(',').map(g =&gt; g.trim());&#10;          if (!grupy.includes(chairType)) return false;&#10;&#10;          // ✅ jeśli krzesło → ignorujemy DlaModeluNóg&#10;          if (chairType === 'krzesło') return true;&#10;&#10;          // ✅ jeśli kubełek → DlaModeluNóg musi zawierać aktualny wariant nóg&#10;          const dlaModelu = mat.DlaModeluNóg?.toLowerCase().trim();&#10;          if (!dlaModelu || dlaModelu.length === 0) return false;&#10;&#10;          const allowedVariants = dlaModelu.split(',').map(v =&gt; v.trim());&#10;          return allowedVariants.includes(legVariant);&#10;        });&#10;&#10;        filteredMaterials.forEach(mat =&gt; {&#10;          const tile = document.createElement('div');&#10;          tile.className = 'material-tile';&#10;          tile.textContent = mat.Nazwa;&#10;          tile.style.backgroundImage = `url(${mat.Obrazek || 'fallback.png'})`;&#10;          tile.onclick = () =&gt; applyLegMaterial(mat);&#10;          legsMaterialsContainer.appendChild(tile);&#10;        });&#10;&#10;        console.log(`✅ Pokazano ${filteredMaterials.length} materiałów nóg dla '${chairType}', wariant nóg '${selectedLeg.Nazwa}'`);&#10;      }&#10;&#10;&#10;&#10;&#10;&#10;      //UKRYWANIE PRZYCISKÓW ELEMENTÓW KRZESŁA&#10;&#10;      // kolejność części i ich powiązane nazwy meshów/obiektów&#10;      const partOrder = ['seat', 'backseat_inside', 'backseat_outside', 'backseat', 'legs_material'];&#10;&#10;      // funkcja tworząca i wyświetlająca przyciski części krzesła na podstawie danych wybranego krzesła&#10;      function renderPartButtons() {&#10;        const partTabs = document.getElementById('part-tabs');&#10;        partTabs.innerHTML = ''; // czyścimy zawartość&#10;&#10;        if (!selectedChair) {&#10;          console.warn('renderPartButtons: brak wybranego krzesła');&#10;          return;&#10;        }&#10;&#10;        const availableElementsRaw = selectedChair['DostępneElementy'] || '';&#10;        if (!availableElementsRaw.trim()) {&#10;          console.log('renderPartButtons: brak dostępnych elementów — nie pokazuję nic.');&#10;          return;&#10;        }&#10;&#10;        const availableParts = availableElementsRaw&#10;          .split(',')&#10;          .map(el =&gt; el.trim().toLowerCase())&#10;          .filter(Boolean);&#10;&#10;        const partNames = {&#10;          seat: 'Siedzisko',&#10;          backseat_inside: 'Oparcie wew.',&#10;          backseat_outside: 'Oparcie zew.',&#10;          backseat: 'Siedzisko/Oparcie',&#10;&#10;          legs: 'Nogi'&#10;        };&#10;&#10;        Object.keys(ELEMENT_ICONS).forEach(part =&gt; {&#10;          if (availableParts.includes(part)) {&#10;&#10;            const wrapper = document.createElement('div');&#10;            wrapper.className = 'thumbnail-wrapper';&#10;&#10;            const thumb = document.createElement('div');&#10;            thumb.className = 'thumbnail';&#10;            thumb.title = part;&#10;            thumb.dataset.key = part; // ✅ TO jest potrzebne dla dalszego UI&#10;&#10;            thumb.onclick = () =&gt; {&#10;              document.querySelectorAll('#part-tabs .thumbnail').forEach(tab =&gt; tab.classList.remove('selected'));&#10;              thumb.classList.add('selected');&#10;              document.getElementById('materials-section').style.display = 'block';&#10;&#10;              // Pokazuje odpowiednie materiały do klikniętej części&#10;              renderFilteredMaterialOptions(part);&#10;            };&#10;&#10;            const img = document.createElement('img');&#10;            img.src = ELEMENT_ICONS[part];&#10;            img.alt = part;&#10;&#10;            thumb.appendChild(img);&#10;            wrapper.appendChild(thumb);&#10;&#10;            const caption = document.createElement('div');&#10;            caption.className = 'thumbnail-caption';&#10;            caption.textContent = partNames[part] || part;&#10;            wrapper.appendChild(caption);&#10;&#10;            partTabs.appendChild(wrapper);&#10;          }&#10;        });&#10;      }&#10;&#10;&#10;&#10;&#10;      // Przykładowo: gdy zmieniasz krzesło, wywołujesz:&#10;      renderPartButtons();&#10;&#10;&#10;&#10;&#10;      const arButton = document.getElementById('ar-button');&#10;      if (arButton) {&#10;        arButton.addEventListener('click', () =&gt; {&#10;          const popup = document.getElementById('ar-popup');&#10;          if (popup) popup.style.display = 'block';&#10;        });&#10;      }&#10;&#10;&#10;const activeCollectionsByMesh = {};&#10;const materialsByMeshAndCollection = {};&#10;&#10;function renderCollectionsAndMaterials(groupedByCollection, targetMesh) {&#10;  // ⏱️ Zapisz dane materiałów dla danego elementu&#10;  materialsByMeshAndCollection[targetMesh] = groupedByCollection;&#10;&#10;  const iconPanel = document.getElementById('collection-icons');&#10;  const materialPanel = document.getElementById('material-panel-viewer');&#10;  if (!iconPanel || !materialPanel) return;&#10;&#10;  iconPanel.innerHTML = '';&#10;  materialPanel.innerHTML = '';&#10;&#10;  Object.entries(groupedByCollection).forEach(([kolekcja, materiały]) =&gt; {&#10;    const icon = document.createElement('img');&#10;&#10;    //  Ikony specjalne dla 'legs' i 'backseat'&#10;    let iconFileName = kolekcja.trim().toLowerCase().replace(/\s+/g, '_');&#10;&#10;const basePath = `icons/${iconFileName}.png`;&#10;&#10;fetch(basePath, { method: 'HEAD' })&#10;  .then(res =&gt; {&#10;    icon.src = res.ok ? basePath : 'icons/default.png';&#10;  })&#10;  .catch(() =&gt; {&#10;    icon.src = 'icons/default.png';&#10;  });&#10;&#10;&#10;&#10;&#10;    icon.alt = kolekcja;&#10;    icon.className = 'collection-icon';&#10;&#10;    icon.onclick = () =&gt; {&#10;      const isActive = activeCollectionsByMesh[targetMesh] === kolekcja;&#10;      iconPanel.querySelectorAll('.collection-icon').forEach(i =&gt; i.classList.remove('selected'));&#10;&#10;      if (isActive) {&#10;        activeCollectionsByMesh[targetMesh] = null;&#10;        materialPanel.innerHTML = '';&#10;        return;&#10;      }&#10;&#10;      activeCollectionsByMesh[targetMesh] = kolekcja;&#10;      icon.classList.add('selected');&#10;      materialPanel.innerHTML = '';&#10;      renderMaterialsInPanel(materiały, targetMesh);&#10;    };&#10;&#10;    iconPanel.appendChild(icon);&#10;  });&#10;&#10;  // ✅ Automatyczne otwarcie zapamiętanej kolekcji&#10;  const rememberedCollection = activeCollectionsByMesh[targetMesh];&#10;  const rememberedGroup = materialsByMeshAndCollection[targetMesh] || {};&#10;  const rememberedMaterials = rememberedGroup[rememberedCollection];&#10;&#10;  if (rememberedCollection &amp;&amp; rememberedMaterials?.length) {&#10;    const rememberedIcon = [...iconPanel.querySelectorAll('.collection-icon')].find(&#10;      i =&gt; i.alt === rememberedCollection&#10;    );&#10;    if (rememberedIcon) {&#10;      rememberedIcon.classList.add('selected');&#10;      renderMaterialsInPanel(rememberedMaterials, targetMesh);&#10;    }&#10;  }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;function renderMaterialsInPanel(materiały, targetMesh) {&#10;  const viewer = document.getElementById('material-panel-viewer');&#10;  if (!viewer) return;&#10;  viewer.innerHTML = '';&#10;&#10;  materiały.forEach(mat =&gt; {&#10;    const wrapper = document.createElement('div');&#10;    wrapper.className = 'thumbnail-wrapper';&#10;&#10;    const button = document.createElement('div');&#10;    button.className = 'thumbnail';&#10;    button.title = mat.Nazwa;&#10;&#10;    const img = document.createElement('img');&#10;    img.src = mat.Obrazek || 'icons/placeholder.svg';&#10;    img.alt = mat.Nazwa;&#10;    button.appendChild(img);&#10;&#10;    const caption = document.createElement('div');&#10;    caption.className = 'thumbnail-caption';&#10;    caption.textContent = mat.Nazwa;&#10;&#10;    wrapper.appendChild(button);&#10;    wrapper.appendChild(caption);&#10;    viewer.appendChild(wrapper);&#10;&#10;    button.onclick = () =&gt; {&#10;      applyMaterialToSpecificMesh(mat, targetMesh);&#10;      viewer.querySelectorAll('.thumbnail').forEach(t =&gt; t.classList.remove('selected'));&#10;      button.classList.add('selected');&#10;    };&#10;  });&#10;}&#10;&#10;&#10;&#10; window.addEventListener('orientationchange', () =&gt; {&#10;    const rotateMsg = document.getElementById('rotate-message');&#10;    if (!rotateMsg) return;&#10;&#10;    // ✅ Jeśli poziomo — chowaj komunikat&#10;    if (window.innerWidth &gt; window.innerHeight) {&#10;      rotateMsg.style.display = 'none';&#10;    } else {&#10;      rotateMsg.style.display = 'flex';&#10;    }&#10;  });&#10;&#10;  // ✅ Dodatkowy test przy starcie — gdy strona ładuje się w pionie&#10;  window.addEventListener('load', () =&gt; {&#10;    const rotateMsg = document.getElementById('rotate-message');&#10;    if (!rotateMsg) return;&#10;&#10;    if (window.innerWidth &gt; window.innerHeight) {&#10;      rotateMsg.style.display = 'none';&#10;    } else {&#10;      rotateMsg.style.display = 'flex';&#10;    }&#10;  });&#10;&#10;&#10;function updateRotateMessage() {&#10;  const rotateMsg = document.getElementById('rotate-message');&#10;  if (!rotateMsg) return;&#10;&#10;  const isLandscape = window.innerWidth &gt; window.innerHeight;&#10;  rotateMsg.style.display = isLandscape ? 'none' : 'flex';&#10;}&#10;&#10;window.addEventListener('orientationchange', updateRotateMessage);&#10;window.addEventListener('resize', updateRotateMessage);&#10;window.addEventListener('load', updateRotateMessage);&#10;&#10;&#10;function checkOrientation() {&#10;  const rotateMsg = document.getElementById('rotate-message');&#10;  if (!rotateMsg) return;&#10;&#10;  const isLandscape = window.innerWidth &gt; window.innerHeight;&#10;  rotateMsg.style.display = isLandscape ? 'none' : 'flex';&#10;}&#10;window.addEventListener('load', checkOrientation);&#10;window.addEventListener('resize', checkOrientation);&#10;&#10;&#10;&#10;window.addEventListener('DOMContentLoaded', () =&gt; {&#10;  // przygotowanie canvas i kontenerów&#10;  &#10;});&#10;&#10;&#10;function setDefaultMaterialsFromSheet() {&#10;  if (!Array.isArray(allData) || !window.selectedChair || !selectedChair.Nazwa) return;&#10;&#10;  const modelName = selectedChair.Nazwa.trim().toLowerCase();&#10;  if (typeof window.selectedMaterials !== 'object') window.selectedMaterials = {};&#10;&#10;  allData.forEach(row =&gt; {&#10;    const modelMatch = row.Default?.trim().toLowerCase();&#10;    const targetRaw = row.TargetMeshOrObiect?.trim().toLowerCase();&#10;    const name = row.Nazwa?.trim();&#10;    const price = parseFloat(row.Cena) || 0;&#10;    const image = row.Obrazek || row.Image || '';&#10;&#10;    if (!modelMatch || modelMatch !== modelName || !name || !targetRaw) return;&#10;&#10;    if (!selectedMaterials[targetRaw]) selectedMaterials[targetRaw] = [];&#10;&#10;    selectedMaterials[targetRaw].push({&#10;      Nazwa: name,&#10;      Cena: price,&#10;      Obrazek: image&#10;    });&#10;  });&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>