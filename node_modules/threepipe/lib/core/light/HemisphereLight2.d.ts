import { Color, ColorRepresentation, HemisphereLight, Vector3 } from 'three';
import { ILight } from './ILight';
import { IObject3D } from '../IObject';
import { UiObjectConfig } from 'uiconfig.js';
export declare class HemisphereLight2 extends HemisphereLight implements ILight<undefined> {
    assetType: "light";
    setDirty: (this: ILight, options?: import("../IObject").IObjectSetDirtyOptions, ...args: any[]) => void;
    refreshUi: (this: IObject3D) => void;
    uiConfig: UiObjectConfig;
    readonly isHemisphereLight2 = true;
    visible: boolean;
    color: Color;
    groundColor: Color;
    intensity: number;
    readonly position: Vector3;
    constructor(skyColor?: ColorRepresentation, groundColor?: ColorRepresentation, intensity?: number);
    autoScale(): this;
    autoCenter(): this;
    /**
     * @deprecated use `this` instead
     */
    get lightObject(): this;
    /**
     * @deprecated use `this` instead
     */
    get modelObject(): this;
    traverse: (callback: (object: IObject3D) => void) => void;
    traverseVisible: (callback: (object: IObject3D) => void) => void;
    traverseAncestors: (callback: (object: IObject3D) => void) => void;
    getObjectById: <T extends IObject3D = IObject3D>(id: number) => T | undefined;
    getObjectByName: <T extends IObject3D = IObject3D>(name: string) => T | undefined;
    getObjectByProperty: <T extends IObject3D = IObject3D>(name: string, value: string) => T | undefined;
    copy: (source: HemisphereLight | IObject3D, recursive?: boolean, ...args: any[]) => this;
    clone: (recursive?: boolean) => this;
    remove: (...object: IObject3D[]) => this;
    parent: IObject3D | null;
    children: IObject3D[];
}
//# sourceMappingURL=HemisphereLight2.d.ts.map