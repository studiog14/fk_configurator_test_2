import { Mesh } from 'three';
import { IObject3D, IObject3DEventMap, IObject3DUserData } from '../IObject';
import { IMaterial } from '../IMaterial';
import { IGeometry } from '../IGeometry';
export declare class Mesh2<TGeometry extends IGeometry = IGeometry, TMaterial extends IMaterial | IMaterial[] = IMaterial | IMaterial[], TE extends IObject3DEventMap = IObject3DEventMap> extends Mesh<TGeometry, TMaterial, TE> implements IObject3D<TE> {
    assetType: "model";
    setDirty: (this: IObject3D, options?: import("../IObject").IObjectSetDirtyOptions, ...args: any[]) => void;
    refreshUi: (this: IObject3D) => void;
    material: TMaterial;
    readonly materials: IMaterial[];
    geometry: TGeometry;
    /**
     * @deprecated use `this` instead
     */
    get modelObject(): this;
    constructor(geometry?: TGeometry, material?: TMaterial);
    userData: IObject3DUserData;
    traverse: (callback: (object: IObject3D) => void) => void;
    traverseVisible: (callback: (object: IObject3D) => void) => void;
    traverseAncestors: (callback: (object: IObject3D) => void) => void;
    getObjectById: <T extends IObject3D = IObject3D>(id: number) => T | undefined;
    getObjectByName: <T extends IObject3D = IObject3D>(name: string) => T | undefined;
    getObjectByProperty: <T extends IObject3D = IObject3D>(name: string, value: string) => T | undefined;
    copy: (source: Mesh2 | IObject3D, recursive?: boolean, ...args: any[]) => this;
    clone: (recursive?: boolean) => this;
    remove: (...object: IObject3D[]) => this;
    parent: IObject3D | null;
    children: IObject3D[];
    dispose: (removeFromParent?: boolean) => void;
}
//# sourceMappingURL=Mesh2.d.ts.map