import { LineGeometry2 } from '../geometry/LineGeometry2';
import { LineMaterial2 } from '../material/LineMaterial2';
import { IObject3D, IObject3DEventMap, IObject3DUserData } from '../IObject';
import { Line2 } from 'three/examples/jsm/lines/Line2';
import { IMaterial } from '../IMaterial';
import { UiObjectConfig } from 'uiconfig.js';
export declare class MeshLine<TGeometry extends LineGeometry2 = LineGeometry2, TMaterial extends LineMaterial2 = LineMaterial2, TE extends IObject3DEventMap = IObject3DEventMap> extends Line2<TGeometry, TMaterial, TE> implements IObject3D<TE> {
    assetType: "model";
    setDirty: (this: IObject3D, options?: import('../IObject').IObjectSetDirtyOptions, ...args: any[]) => void;
    refreshUi: (this: IObject3D) => void;
    readonly isMeshLine = true;
    material: TMaterial;
    readonly materials: IMaterial[];
    geometry: TGeometry;
    uiConfig: UiObjectConfig;
    /**
     * @deprecated use `this` instead
     */
    get modelObject(): this;
    constructor(geometry?: TGeometry, material?: TMaterial);
    userData: IObject3DUserData;
    traverse: (callback: (object: IObject3D) => void) => void;
    traverseVisible: (callback: (object: IObject3D) => void) => void;
    traverseAncestors: (callback: (object: IObject3D) => void) => void;
    getObjectById: <T extends IObject3D = IObject3D>(id: number) => T | undefined;
    getObjectByName: <T extends IObject3D = IObject3D>(name: string) => T | undefined;
    getObjectByProperty: <T extends IObject3D = IObject3D>(name: string, value: string) => T | undefined;
    copy: (source: MeshLine | IObject3D, recursive?: boolean, ...args: any[]) => this;
    clone: (recursive?: boolean) => this;
    remove: (...object: IObject3D[]) => this;
    parent: IObject3D | null;
    children: IObject3D[];
    dispose: (removeFromParent?: boolean) => void;
}
//# sourceMappingURL=MeshLine.d.ts.map