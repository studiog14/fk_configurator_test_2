import { GLTFLoaderPlugin, GLTFParser } from 'three/examples/jsm/loaders/GLTFLoader';
import { MeshStandardMaterial } from 'three';
import { GLTFExporterPlugin, GLTFWriter } from 'three/examples/jsm/exporters/GLTFExporter';
/**
 * Alpha Map Extension
 *
 * alphaTexture is added to the material
 * This is separate from the alpha in base color texture. This is used when that is not supported in the viewer
 *
 * Specification: https://webgi.xyz/docs/gltf-extensions/WEBGI_materials_alphamap.html
 */
export declare class GLTFMaterialsAlphaMapExtension {
    static readonly WebGiMaterialsAlphaMapExtension = "WEBGI_materials_alphamap";
    static Import: (parser: GLTFParser) => GLTFLoaderPlugin;
    static Export: (writer: GLTFWriter) => GLTFExporterPlugin;
    static Textures: Record<string, string | number>;
}
declare class GLTFMaterialsAlphaMapExtensionImport {
    parser: GLTFParser;
    name: string;
    constructor(parser: GLTFParser);
    extendMaterialParams(materialIndex: number, materialParams: any): Promise<void | import('three').Texture<import('three').TextureEventMap>[]>;
}
export type { GLTFMaterialsAlphaMapExtensionImport };
declare class GLTFMaterialsAlphaMapExtensionExport {
    writer: GLTFWriter;
    name: string;
    constructor(writer: GLTFWriter);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsAlphaMapExtensionExport };
//# sourceMappingURL=GLTFMaterialsAlphaMapExtension.d.ts.map