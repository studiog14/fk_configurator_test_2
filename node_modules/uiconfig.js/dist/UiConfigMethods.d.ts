import { UiObjectConfig } from './types';
import { UiConfigRendererBase } from './UiConfigRendererBase';
import { ActionCommand, SetValueCommand } from './undo_commands';
import { PrimitiveVal } from './primitive_value';
export declare class UiConfigMethods {
    protected _renderer: UiConfigRendererBase;
    constructor(_renderer: UiConfigRendererBase);
    getBinding(config: UiObjectConfig, parent?: boolean): [any, string | number];
    getRawValue<T extends any>(config: UiObjectConfig<T>): T | undefined;
    /**
     * Get the value from config
     * @param config
     * @param val - existing value, new value can be copied to this if not equal.
     * @param copyOnEqual - whether the value should be copied to val if equal. Default is true.
     * @returns The value from the binding, cloned or copied if possible. If the value is equal and copyOnEqual is false, then undefined is returned. this can be used to check if the value is changed
     */
    getValue<T extends PrimitiveVal>(config: UiObjectConfig<T>, val: T | undefined, copyOnEqual?: boolean): T | undefined;
    dispatchOnChangeSync(config: UiObjectConfig, props: {
        last?: boolean;
        config?: UiObjectConfig;
        configPath?: UiObjectConfig[];
        value?: any;
        lastValue?: any;
    }, ...args: any[]): void;
    undoEditingWaitTime: number;
    recordUndo(com: SetValueCommand | ActionCommand): import("ts-browser-helpers").JSUndoManager | undefined;
    /**
     *
     * @param config
     * @param value
     * @param props - only the prop `last` need to be set, rest are optional. `lastValue` can be set if known (but it should be exactly equal to the value in the binding and not cloned). `config`, `configPath` are for parentOnChange, no need to set that.
     * @param forceOnChange
     * @param trackUndo
     */
    setValue<T extends PrimitiveVal>(config: UiObjectConfig<T>, value: T, props: {
        last?: boolean;
        config?: UiObjectConfig;
        configPath?: UiObjectConfig[];
        lastValue?: T;
    }, forceOnChange?: boolean, trackUndo?: boolean): Promise<boolean>;
    /**
     *
     * @param config
     * @param props - only last needs to be set. check the docs for `setValue`
     */
    dispatchOnChange<T>(config: UiObjectConfig<T>, props: {
        last?: boolean;
        config?: UiObjectConfig;
        configPath?: UiObjectConfig[];
        value?: any;
        lastValue?: any;
    }): Promise<void>;
    getLabel(config: UiObjectConfig): string;
    getChildren(config: UiObjectConfig): UiObjectConfig[];
    clickButton(config: UiObjectConfig, options?: {
        args: any[];
    }): Promise<void>;
    runAtEvent<T>(config: UiObjectConfig, run: () => T | Promise<T>): Promise<T>;
    initUiConfig(config: UiObjectConfig): void;
    getBounds(config: UiObjectConfig, unbounded?: boolean): {
        min: number;
        max: number;
        step: number;
    };
    undoPresets: {
        UiConfigMethods_set: (c: SetValueCommand) => {
            undo: () => void;
            redo: () => void;
        };
        UiConfigMethods_action: (c: ActionCommand) => {
            undo: () => Promise<void>;
            redo: () => Promise<void>;
        };
    };
}
//# sourceMappingURL=UiConfigMethods.d.ts.map