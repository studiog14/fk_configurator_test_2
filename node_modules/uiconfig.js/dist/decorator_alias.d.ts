import { UiObjectConfig } from './types';
import { TParams } from './decorators';
import { ValOrFunc } from 'ts-browser-helpers';
export declare function uiMonitor<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiSlider<T = any>(label?: string, bounds?: [number, number], stepSize?: number, params?: TParams<T>): PropertyDecorator;
export declare function uiVector<T = any>(label?: string, bounds?: [number, number], stepSize?: number, params?: TParams<T>): PropertyDecorator;
export declare function uiDropdown<T = any>(label?: string, children?: string[] | ValOrFunc<UiObjectConfig[]>, params?: TParams<T>): PropertyDecorator;
export declare function uiButton<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiInput<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiNumber<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiColor<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiImage<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiToggle<T = any>(label?: string, params?: TParams<T>): PropertyDecorator;
export declare function uiPanelContainer<TP = any>(label: ValOrFunc<string, [TP]>, params?: any): <T extends new (...args: any[]) => any>(constructor: T) => {
    new (...args: any[]): {
        [x: string]: any;
        uiConfig: UiObjectConfig<any, string, any>;
    };
} & T;
export declare function uiFolderContainer<TP = any>(label: ValOrFunc<string, [TP]>, params?: any): <T extends new (...args: any[]) => any>(constructor: T) => {
    new (...args: any[]): {
        [x: string]: any;
        uiConfig: UiObjectConfig<any, string, any>;
    };
} & T;
//# sourceMappingURL=decorator_alias.d.ts.map